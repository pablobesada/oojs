{"version":3,"sources":["ClientRecord.es6"],"names":[],"mappings":"AAAA;;;;;;;;;;;;AACA,IAAI,KAAK,QAAQ,YAAR,CAAT;AACA,IAAI,KAAK,GAAG,YAAZ;;AAEA,IAAI,cAAc;AACd,UAAM,cADQ;AAEd,cAAU,iBAFI;AAGd,YAAQ;AACJ,qBAAa,EAAC,MAAM,SAAP;AADT,KAHM;AAMd,cAAU;AANI,CAAlB;;AASA,IAAI,SAAS,GAAG,UAAH,CAAc,WAAd,CAAb;;IAEM,Y;;;AACF,4BAAc;AAAA;;AAAA;AAEb;;;;;;;;;;iEAGU,KAAK,WAAL,CAAiB,MAAjB,C;;;;;;;;;;;;;;;;;;;;;;;;AAIP,wCAAQ,GAAR,CAAY,2BAAZ;;kEAEO,KAAK,WAAL,CAAiB,OAAjB,C;;;;;;;;;;;;;;;;;;;;;;;;kEAMA,KAAK,WAAL,CAAiB,MAAjB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;kEAOA,KAAK,WAAL,CAAiB,KAAjB,C;;;;;;;;;;;;;;;;;;;kFAGO,U,EAAY,M;oBACtB,G,EACA,I;;;;;AADA,mC,GAAM,I;AACN,oC,GAAO,E;;AACX,oCAAI,eAAe,GAAnB,EAAwB;AACpB,yCAAK,QAAL,GAAgB,UAAhB;AACA,yCAAK,IAAL,GAAY,KAAK,SAAL,CAAe,IAAI,MAAJ,EAAf,CAAZ;AACH,iCAHD,MAGO;AACH,yCAAK,QAAL,GAAgB,OAAhB;AACA,yCAAK,WAAL,GAAmB,KAAK,eAAL,CAAqB,IAAxC;AACH;AACD,qCAAK,MAAL,GAAc,UAAd;AACA,qCAAK,MAAL,GAAc,UAAU,IAAV,GAAiB,MAAjB,GAA0B,EAAxC;kEACO,IAAI,OAAJ,CAAY,UAAU,OAAV,EAAmB,MAAnB,EAA2B;AAC1C,wCAAI,MAAM,GAAG,OAAH,GAAa,UAAb,GAA0B,UAApC;AACA,sCAAE,IAAF,CAAO;AACH,8CAAM,MADH;AAEH,6CAAK,GAFF;AAGH,qDAAa,iCAHV;AAIH,kDAAU,MAJP;AAKH,+CAAO,IALJ;AAMH,8CAAM,KAAK,SAAL,CAAe,IAAf,CANH;AAOH,iDAAS,iBAAU,MAAV,EAAkB;AACvB,gDAAI,CAAC,OAAO,EAAZ,EAAgB;AACZ,uDAAO,OAAO,KAAd;AACA;AACH;AACD,gDAAI,KAAK,QAAL,IAAiB,UAArB,EAAiC;AAC7B,mDAAG,QAAH,CAAY,QAAZ,EAAsB,QAAtB,CAA+B,OAAO,IAAtC,EAA4C,GAA5C;AACH;AACD,gDAAI,WAAW,cAAc,MAAd,GAAuB,OAAO,QAA9B,GAAyC,IAAxD;AACA,oDAAQ,QAAR;AACA;AACH,yCAlBE;AAmBH,+CAAO,eAAU,KAAV,EAAiB,UAAjB,EAA6B,WAA7B,EAA0C;;AAE7C,mDAAO,WAAP;AACH,yCAtBE;AAuBH,kDAAU,oBAAY;;AAErB;AAzBE,qCAAP;AA2BH,iCA7BM,C;;;;;;;;;;;;;;;;;;;EAxCY,M;;AAyE3B,OAAO,OAAP,GAAiB,aAAa,SAAb,CAAuB,WAAvB,CAAjB","file":"ClientRecord.js","sourcesContent":["\"use strict\"\nlet oo = require('openorange');\nlet cm = oo.classmanager\n\nvar Description = {\n    name: 'ClientRecord',\n    inherits: 'Embedded_Record',\n    fields: {\n        syncVersion: {type: \"integer\"},\n    },\n    filename: __filename\n}\n\nvar Parent = cm.SuperClass(Description)\n\nclass ClientRecord extends Parent {\n    constructor() {\n        super()\n    }\n\n    async load() {\n        return this.runInServer(\"load\");\n    }\n\n    async store() {\n        console.log(\"en store de clienterecord\")\n\n        return this.runInServer(\"store\");\n    }\n\n\n    async save() {\n        //return super.save();\n        return this.runInServer(\"save\");\n        // por ahora vamos al servidor solo en el store. ojo que si vamos al servidor con el save, hay que tener en cuenta:\n            // 1. save de registros locals\n            // 2. alerts, mensajes y inputs al usuario durante el proceso de grabado\n    }\n\n    async ppp() {\n        return this.runInServer(\"ppp\");\n    }\n\n    async runInServer(methodname, params) {\n        var rec = this;\n        var data = {}\n        if ('__isnew__' in rec) {\n            data.calltype = 'instance';\n            data.self = JSON.stringify(rec.toJSON())\n        } else {\n            data.calltype = 'class';\n            data.recordclass = this.__description__.name;\n        }\n        data.method = methodname;\n        data.params = params != null ? params : [];\n        return new Promise(function (resolve, reject) {\n            var url = oo.baseurl  +'/record/' + methodname;\n            $.ajax({\n                type: \"POST\",\n                url: url,\n                contentType: 'application/json; charset=utf-8',\n                dataType: \"json\",\n                async: true,\n                data: JSON.stringify(data),\n                success: function (result) {\n                    if (!result.ok) {\n                        reject(result.error);\n                        return;\n                    }\n                    if (data.calltype == 'instance') {\n                        cm.getClass(\"Record\").fromJSON(result.self, rec)\n                    }\n                    var response = 'response' in result ? result.response : null;\n                    resolve(response);\n                    return;\n                },\n                error: function (jqXHR, textStatus, errorThrown) {\n                    //console.log(\"en fail\")\n                    reject(errorThrown);\n                },\n                complete: function () {\n                    //console.log(\"en load::complete\");\n                }\n            });\n        });\n    }\n}\n\nmodule.exports = ClientRecord.initClass(Description)"]}