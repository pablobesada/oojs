{"version":3,"sources":["TestRecord.es6"],"names":[],"mappings":"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","file":"TestRecord.js","sourcesContent":["\"use strict\";\nvar cm = require('openorange').classmanager\nlet _ = require(\"underscore\")\nlet chance = require(\"chance\")()\nlet moment = require(\"moment\")\n\nvar Description = {\n    name: 'TestRecord',\n    inherits: 'Record',\n    fields: {\n        TestName: {type: \"string\", length: 60},\n        SubTestName: {type: \"string\", length: 60},\n        String_Field: {type: \"string\", length: 60},\n        Set_Field: {type: \"set\", length: 60, linkto: \"Customer\", setrecordname: \"TestRecordSet_Field\"},\n        LinkTo_Field: {type: \"string\", linkto: \"Customer\"},\n        Integer_Field: {type: \"integer\"},\n        NonPersistent_Field: {type: \"string\", length:60, persistent: false},\n        Date_Field: {type: \"date\"},\n        Rows: {type: \"detail\", class: \"TestRecordRow\"},\n        NonPersistent_Rows: {type: \"detail\", class: \"NonPersistent_TestRecordRow\", persistent: false}\n    },\n    filename: __filename,\n}\n\nlet Parent = cm.SuperClass(Description)\n\nclass TestRecord extends Parent {\n\n    constructor() {\n        super()\n        this.waitBeforeReturningFromCheck = 0;\n        this.waitBeforeStoringRecordsInBeforeInsert = 0;\n        this.checkReturnValue = true;\n        this.beforeInsertReturnValue = true;\n        this.beforeUpdateReturnValue = true;\n        this.beforeInsert_recordsToStore = [];\n    }\n\n    async check(){\n        let res = await Parent.tryCall(this, true, \"check\");\n        if (!res) return res;\n        if (this.waitBeforeReturningFromCheck > 0) await TestRecord.wait(this.waitBeforeReturningCheck);\n        return this.checkReturnValue;\n    }\n\n    static wait(t) {\n        return new Promise(function (resolve, reject) {\n            setTimeout(function () {\n                resolve()\n            },t)\n        });\n    }\n    async beforeInsert(){\n        let self = this;\n        let res = await Parent.tryCall(this, true, \"beforeInsert\");\n        if (!res) return res;\n        for (let i in this.beforeInsert_recordsToStore) {\n            let record = this.beforeInsert_recordsToStore[i];\n            if (this.waitBeforeStoringRecordsInBeforeInsert > 0) await TestRecord.wait(this.waitBeforeStoringRecordsInBeforeInsert);\n            let res = await record.store();\n            if (!res) throw new Error(\"no se pudo grabar registro dentro de beforeInsert\")\n        }\n        return self.beforeInsertReturnValue;\n    }\n\n    async beforeUpdate(){\n        let res = await Parent.tryCall(this, true, \"beforeUpdate\");\n        if (!res) return res;\n        return this.beforeUpdateReturnValue;\n    }\n\n    static fillRecordWithRandomValues(record, opts) {\n        if (!opts) opts = {}\n        let nrows = 'nrows' in opts? opts.nrows : chance.natural({min: 4, max: 13});\n        let cls = this;\n        _(record.persistentFieldNames()).forEach(function(fn) {\n            let fielddef = record.fields(fn)\n            if (fn == 'internalId') return;\n            if (fn == 'masterId') return;\n            if (fn == 'rowNr') return;\n            switch (fielddef.type) {\n                case 'string':\n                    record[fn] = chance.word({length: fielddef.length});\n                    break;\n                case 'set':\n                    record[fn] = chance.sentence({words: 5}).replace(/ /g, \",\").replace(/\\./g, \"\")\n                    break;\n                case 'integer':\n                    record[fn] = chance.integer({min: -10000, max: 10000});\n                    break;\n                case 'date':\n                    let v = new moment()\n                    record[fn] = v\n                    break;\n                case 'time':\n                    record[fn] = '07:04:33'\n                    break;\n            }\n        });\n        _(record.persistentDetailNames()).forEach(function (dn) {\n            let detail = record[dn];\n            for (var j = 0; j < nrows; j++) {\n                //console.log(fn)\n                var row = detail.newRow()\n                cls.fillRecordWithRandomValues(row, opts)\n                detail.push(row);\n            }\n        });\n        return record;\n    }\n\n    fillWithRandomValues(opts) {\n        return this.__class__.fillRecordWithRandomValues(this, opts);\n    }\n\n    static async newSavedRecord() {\n        let rec = this.new().fillWithRandomValues();\n        if (await rec.store()) return rec;\n        return null;\n\n    }\n\n    async pasteLinkTo_Field() {\n        var self = this;\n        if (this.LinkTo_Field) {\n            let customer = await cm.getClass(\"Customer\").bring(this.LinkTo_Field);\n            if (customer) self.String_Field = customer.Name;\n        }\n    }\n\n\n}\n\nmodule.exports = TestRecord.initClass(Description)\n"]}