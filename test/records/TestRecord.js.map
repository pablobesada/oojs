{"version":3,"sources":["TestRecord.es6"],"names":[],"mappings":"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","file":"TestRecord.js","sourcesContent":["\"use strict\";\nvar cm = require('openorange').classmanager\nlet _ = require(\"underscore\")\nlet chance = require(\"chance\")()\nlet moment = require(\"moment\")\n\n\nvar Description = {\n    name: 'TestRecord',\n    inherits: 'Record',\n    fields: {\n        TestName: {type: \"string\", length: 60},\n        SubTestName: {type: \"string\", length: 60},\n        String_Field: {type: \"string\", length: 60},\n        Integer_Field: {type: \"integer\"},\n        Date_Field: {type: \"date\"},\n        Rows: {type: \"detail\", class: \"TestRecordRow\"}\n    },\n    filename: __filename,\n}\n\nlet Parent = cm.SuperClass(Description)\n\nclass TestRecord extends Parent {\n\n    constructor() {\n        super()\n        this.checkReturnValue = true;\n        this.beforeInsertReturnValue = true;\n        this.beforeUpdateReturnValue = true;\n        this.beforeInsert_recordsToStore = [];\n    }\n\n    async check(){\n        let res = await Parent.tryCall(this, true, \"check\");\n        if (!res) return res;\n        await TestRecord.wait(2000)\n        return this.checkReturnValue;\n    }\n\n    static wait(t) {\n        return new Promise(function (resolve, reject) {\n            setTimeout(function () {\n                resolve()\n            },t)\n        });\n    }\n    async beforeInsert(){\n        let self = this;\n        let res = await Parent.tryCall(this, true, \"beforeInsert\");\n        if (!res) return res;\n        for (let i in this.beforeInsert_recordsToStore) {\n            let record = this.beforeInsert_recordsToStore[i];\n            await TestRecord.wait(2000);\n            let res = await record.store();\n            if (!res) throw new Error(\"no se pudo grabar registro dentro de beforeInsert\")\n        }\n        return self.beforeInsertReturnValue;\n    }\n\n    async beforeUpdate(){\n        let res = await Parent.tryCall(this, true, \"beforeUpdate\");\n        if (!res) return res;\n        return this.beforeUpdateReturnValue;\n    }\n\n    static fillRecordWithRandomValues(record) {\n        console.log(\"AAAAASDASDASDASDASDASDS\")\n        let cls = this;\n        var fields = record.__class__.getDescription().fields\n        _(fields).forEach(function(fielddef, fn) {\n            if (fn == 'internalId') return;\n            if (fn == 'masterId') return;\n            if (fn == 'rowNr') return;\n            console.log(fn, fielddef)\n            switch (fielddef.type) {\n                case 'string':\n                    record[fn] = chance.word({length: fielddef.length});\n                    break;\n                case 'integer':\n                    record[fn] = chance.integer({min: -10000, max: 10000});\n                    break;\n                case 'date':\n                    let v = new moment()\n                    record[fn] = v\n                    console.log(v, record[fn])\n                    break;\n                case 'time':\n                    //record[fn] = moment()\n                    record[fn] = '07:04:33'\n                    break;\n                case 'detail':\n                    var nrows = chance.natural({min: 4, max: 13})\n                    for (var j=0;j<nrows;j++) {\n                        //console.log(fn)\n                        var row = record[fn].newRow()\n                        cls.fillRecordWithRandomValues(row)\n                        record[fn].push(row);\n                    }\n            }\n        });\n        return record;\n    }\n\n    fillWithRandomValues() {\n        return this.__class__.fillRecordWithRandomValues(this);\n    }\n\n    static async newSavedRecord() {\n        let rec = this.new().fillWithRandomValues();\n        if (await rec.store()) return rec;\n        return null;\n\n    }\n\n}\n\nmodule.exports = TestRecord.initClass(Description)\n"]}