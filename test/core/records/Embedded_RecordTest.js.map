{"version":3,"sources":["Embedded_RecordTest.es6"],"names":[],"mappings":"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","file":"Embedded_RecordTest.js","sourcesContent":["\"use strict\";\n//var app = require(\"./../../app\")\nvar chance = new require(\"chance\")();\nvar _ = require(\"underscore\")\nvar oo = require(\"openorange\")\nvar Query = oo.query;\nvar cm = oo.classmanager\nvar should = require('should');\nvar async = require('async')\nvar moment = require('moment')\nlet utils = null;\n\ndescribe(\"Embedded_Record\", function () {\n    let cls = cm.getClass(\"TestRecord\");\n    let cls2 = cm.getClass(\"TestRecord2\");\n    let rec = null;\n    let original_rec = null;\n\n    it(\"create new record and set some field values\", async () => {\n        rec = cls.new();\n        rec.String_Field = 'ABCD'\n        let now = moment([2014,4-1,3]);\n        rec.Date_Field = now\n        should(rec.String_Field).be.equal('ABCD');\n        should(rec.Date_Field.isSame(now)).ok()\n    });\n\n    it(\"Linkto fields must get its length from the linked record\", async () => {\n        rec = cls.new();\n        let linkto_class = rec.fields(\"LinkTo_Field\").getLinktoRecordClass()\n        should(rec.fields(\"LinkTo_Field\").getMaxLength()).be.equal(linkto_class.getDescription().fields[linkto_class.uniqueKey()[0]].length)\n        should(rec.fields(\"String_Field\").getMaxLength()).be.equal(cls.getDescription().fields.String_Field.length)\n    });\n\n    it(\"create new record and store it\", async () => {\n        await oo.beginTransaction()\n        rec = cls.new().fillWithRandomValues()\n        let res = await rec.store();\n        res.should.be.true();\n        original_rec = rec.clone();\n        await oo.commit()\n    })\n\n    it(\"control for non-persistent fields\", async () => {\n        await oo.beginTransaction()\n        rec = cls.new().fillWithRandomValues()\n        rec.NonPersistent_Field = \"esto no deberia persistir\"\n        let row = rec.NonPersistent_Rows.newRow();\n        cls.fillRecordWithRandomValues(row)\n        rec.NonPersistent_Rows.push(row)\n        let res = await rec.store();\n        res.should.be.true();\n        let loaded_rec = await cls.findOne({internalId: rec.internalId})\n        should(loaded_rec.NonPersistent_Field).be.null();\n        should(loaded_rec.Rows.length).be.greaterThan(0);\n        should(loaded_rec.NonPersistent_Rows.length).be.equal(0);\n        await oo.commit()\n    })\n\n    it(\"load\", async () => {\n        rec = cls.new()\n        rec.internalId = original_rec.internalId;\n        rec.Date_Field = original_rec.Date_Field;\n        console.log(original_rec.Date_Field)\n        var res = await rec.load();\n        res.should.be.true(\"no se grabo\");\n        original_rec.syncOldFields();\n        rec.isEqual(original_rec).should.be.true(\"registros diferentes\");\n    })\n\n    it(\"Concurrent store (storing with old syncVersion)\", async () => {\n        await (await oo.contextmanager.getDBConnection()).beginTransaction()\n        let r1 = await cls.newSavedRecord();\n        let r2 = await cls.findOne({internalId: r1.internalId})\n        should(r1.isEqual(r2)).be.true()\n        r1.String_Field = 'r1'\n        r1.Integer_Field++;\n        should(await r1.store()).ok()\n        r2.Integer_Field--;\n        r2.String_Field = 'r2'\n        should(await r2.store()).not.ok()\n        //await (await oo.contextmanager.getDBConnection()).commit()\n    })\n\n    it(\"Detail integrity against master syncVersion\", async () => {\n        let r1 = await cls.newSavedRecord();\n        let r2 = await cls.findOne({internalId: r1.internalId})\n        should(r1.isEqual(r2)).be.true()\n        console.log(r1)\n        console.log(r1.Rows)\n        console.log(r1.Rows.length)\n        r1.Rows[0].Integer_Field++;\n        should(await r1.store()).ok()\n        r2.Rows[0].Integer_Field--;\n        should(await r2.store()).not.ok()\n\n    })\n\n    it(\"Save new OK\", async ()=> {\n        rec = cls.new().fillWithRandomValues()\n        should(await rec.save()).be.true(\"El save no grabo\")\n        should.exist(await cls.findOne({internalId: rec.internalId, Integer_Field: rec.Integer_Field}), \"El save devolvio true, pero el registro no esta en la DB\")\n    })\n\n    it(\"Save with Check fail\", async ()=> {\n        let internalId = rec.internalId;\n        rec = await cls.findOne({internalId: rec.internalId})\n        should.exist(rec);\n        rec.checkReturnValue = false;\n        rec.Integer_Field++;\n        let res = await rec.save()\n        res.should.be.false(\"El save grabo y no deberia haberse grabado\")\n        should.not.exist(await cls.findOne({internalId: rec.internalId, Integer_Field: rec.Integer_Field}), \"El save devolvio false, pero igual grabo el registro\")\n    })\n\n    it(\"Save with beforeInsert fail\", async ()=> {\n        let rec = cls.new().fillWithRandomValues()\n        rec.beforeInsertReturnValue = false;\n        for (let i=0;i<3;i++) {\n            let record = cls.new().fillWithRandomValues()\n            record.SubTestName = \"Save with beforeInsert fail\"\n            rec.beforeInsert_recordsToStore.push(record);\n        }\n        rec.SubTestName = 'PARENT'\n        let res = await rec.save()\n        should(res).be.false(\"No deberia haber grabado\")\n        should.not.exist(await cls.findOne({String_Field: rec.String_Field}), \"El save devolvio false, pero igual grabo el registro\")\n        for (let i in rec.beforeInsert_recordsToStore) {\n            let record = rec.beforeInsert_recordsToStore[i]\n            should.not.exist(await cls.findOne({internalId: record.internalId, String_Field: record.String_Field}), \"El save devolvio false, pero igual grabo registros dentro del beforeInsert\")\n        }\n    });\n\n    it(\"Save with beforeUpdate fail\", async ()=> {\n        let rec = cls.new()\n        utils.fillRecord(rec)\n        rec.beforeUpdateReturnValue = false;\n        let res = await rec.save()\n        should(res).be.true(\"Deberia haber grabado\");\n        rec.Integer_Field++;\n        res = await rec.save();\n        should(res).be.false(\"No Deberia haber grabado\");\n        should.not.exist(await cls.findOne({internalId: rec.internalId, Integer_Field: rec.Integer_Field}), \"El save devolvio false, pero igual grabo el registro\")\n    })\n\n    it (\"Check if it makes rollback when storing record with wrong fields\", async () => {\n        await oo.beginTransaction()\n        //cls.__description__.fields['DUMMY'] = {type: \"string\", length: 30}\n        //cls.__description__.fieldnames.push(\"DUMMY\")\n        let rec = cls.new().fillWithRandomValues();\n        rec.beforeInsertReturnValue = false;\n        rec.SubTestName = 'TEST'\n        for (let i=0;i<3;i++) {\n            let record = cls2.new().fillWithRandomValues()\n            record.SubTestName = rec.SubTestName\n            rec.beforeInsert_recordsToStore.push(record);\n        }\n\n        let res = await rec.save();\n        await oo.commit()\n    });\n});\n\nmodule.exports = function config(utilsModule) {\n    utils = utilsModule\n};"]}