{"version":3,"sources":["Embedded_RecordTest.es6"],"names":[],"mappings":"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","file":"Embedded_RecordTest.js","sourcesContent":["\"use strict\";\n//var app = require(\"./../../app\")\nvar chance = new require(\"chance\")();\nvar _ = require(\"underscore\")\nvar oo = require(\"openorange\")\nvar Query = oo.query;\nvar cm = oo.classmanager\nvar should = require('should');\nvar async = require('async')\nlet utils = null;\n\ndescribe(\"Embedded_Record\", function () {\n    let cls = cm.getClass(\"TestRecord\");\n    let cls2 = cm.getClass(\"TestRecord2\");\n    let rec = null;\n    let original_rec = null;\n\n    it(\"create new record and store it\", async () => {\n        return;\n        await (await oo.contextmanager.getDBConnection()).beginTransaction()\n        rec = cls.new()\n        utils.fillRecord(rec);\n        let res = await rec.store();\n        res.should.be.true();\n        original_rec = rec.clone();\n        await (await oo.contextmanager.getDBConnection()).commit()\n    })\n\n    it(\"load\", async () => {\n        return\n        rec = cls.new()\n        rec.internalId = original_rec.internalId;\n        var res = await rec.load();\n        res.should.be.true(\"no se grabo\");\n        original_rec.syncOldFields();\n        rec.isEqual(original_rec).should.be.true(\"registros diferentes\");\n    })\n\n    it(\"Concurrent store (storing with old syncVersion)\", async () => {\n        return\n        await (await oo.contextmanager.getDBConnection()).beginTransaction()\n        let r1 = await cls.newSavedRecord();\n        let r2 = await cls.findOne({internalId: r1.internalId})\n        should(r1.isEqual(r2)).be.true()\n        r1.String_Field = 'r1'\n        r1.Integer_Field++;\n        should(await r1.store()).ok()\n        r2.Integer_Field--;\n        r2.String_Field = 'r2'\n        should(await r2.store()).not.ok()\n        //await (await oo.contextmanager.getDBConnection()).commit()\n    })\n\n    it(\"Detail integrity against master syncVersion\", async () => {\n        return\n        let r1 = await cls.newSavedRecord();\n        let r2 = await cls.findOne({internalId: r1.internalId})\n        should(r1.isEqual(r2)).be.true()\n        r1.Rows[0].Integer_Field++;\n        should(await r1.store()).ok()\n        r2.Rows[0].Integer_Field--;\n        should(await r2.store()).not.ok()\n\n    })\n\n    it(\"Save new OK\", async ()=> {\n        return\n        rec = cls.new()\n        utils.fillRecord(rec);\n        should(await rec.save()).be.true(\"El save no grabo\")\n        should.exist(await cls.findOne({internalId: rec.internalId, Integer_Field: rec.Integer_Field}), \"El save devolvio true, pero el registro no esta en la DB\")\n    })\n\n    it(\"Save with Check fail\", async ()=> {\n        return\n        let internalId = rec.internalId;\n        rec = await cls.findOne({internalId: rec.internalId})\n        should.exist(rec);\n        rec.checkReturnValue = false;\n        rec.Integer_Field++;\n        let res = await rec.save()\n        res.should.be.false(\"El save grabo y no deberia haberse grabado\")\n        should.not.exist(await cls.findOne({internalId: rec.internalId, Integer_Field: rec.Integer_Field}), \"El save devolvio false, pero igual grabo el registro\")\n    })\n\n    it(\"Save with beforeInsert fail\", async ()=> {\n        return\n        let rec = cls.new()\n        utils.fillRecord(rec)\n        rec.beforeInsertReturnValue = false;\n        for (let i=0;i<3;i++) {\n            let record = cls.new().fillWithRandomValues()\n            record.SubTestName = \"Save with beforeInsert fail\"\n            rec.beforeInsert_recordsToStore.push(record);\n        }\n        rec.SubTestName = 'PARENT'\n        let res = await rec.save()\n        should(res).be.false(\"No deberia haber grabado\")\n        should.not.exist(await cls.findOne({internalId: rec.internalId}), \"El save devolvio false, pero igual grabo el registro\")\n        for (let i in rec.beforeInsert_recordsToStore) {\n            let record = rec.beforeInsert_recordsToStore[i]\n            should.not.exist(await cls.findOne({internalId: record.internalId, String_Field: record.String_Field}), \"El save devolvio false, pero igual grabo registros dentro del beforeInsert\")\n        }\n    });\n\n    it(\"Save with beforeUpdate fail\", async ()=> {\n        return\n        let rec = cls.new()\n        utils.fillRecord(rec)\n        rec.beforeUpdateReturnValue = false;\n        let res = await rec.save()\n        should(res).be.true(\"Deberia haber grabado\");\n        rec.Integer_Field++;\n        res = await rec.save();\n        should(res).be.false(\"No Deberia haber grabado\");\n        should.not.exist(await cls.findOne({internalId: rec.internalId, Integer_Field: rec.Integer_Field}), \"El save devolvio false, pero igual grabo el registro\")\n    })\n\n    it (\"Check if it makes rollback when storing record with wrong fields\", async () => {\n        await oo.beginTransaction()\n        //cls.__description__.fields['DUMMY'] = {type: \"string\", length: 30}\n        //cls.__description__.fieldnames.push(\"DUMMY\")\n        let rec = cls.new().fillWithRandomValues();\n        rec.beforeInsertReturnValue = false;\n        rec.SubTestName = 'TEST'\n        for (let i=0;i<3;i++) {\n            let record = cls2.new().fillWithRandomValues()\n            record.SubTestName = rec.SubTestName\n            rec.beforeInsert_recordsToStore.push(record);\n        }\n\n        let res = await rec.save();\n        await oo.commit()\n    });\n});\n\nmodule.exports = function config(utilsModule) {\n    utils = utilsModule\n};"]}