{"version":3,"sources":["Embedded_RecordTest.es6"],"names":[],"mappings":"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","file":"Embedded_RecordTest.js","sourcesContent":["\"use strict\";\n//var app = require(\"./../../app\")\nvar chance = new require(\"chance\")();\nvar _ = require(\"underscore\")\nvar oo = require(\"openorange\")\nvar query = oo.query;\nvar cm = oo.classmanager\nvar should = require('should');\nvar async = require('async')\nvar moment = require('moment')\nlet utils = null;\n\ndescribe(\"Embedded_Record\", function () {\n    let cls = cm.getClass(\"TestRecord\");\n    let cls2 = cm.getClass(\"TestRecord2\");\n    let rec = null;\n    let original_rec = null;\n\n    beforeEach(async () => {\n        await oo.beginTransaction();\n    })\n    after(async () => {\n        await oo.commit();\n    })\n\n\n    it(\"create new record and set some field values\", async () => {\n        rec = cls.new();\n        rec.String_Field = 'ABCD'\n        let now = moment([2014,4-1,3]);\n        rec.Date_Field = now\n        should(rec.String_Field).be.equal('ABCD');\n        should(rec.Date_Field.isSame(now)).ok()\n    });\n\n    it(\"Linkto fields must get its length from the linked record\", async () => {\n        rec = cls.new();\n        let linkto_class = rec.fields(\"LinkTo_Field\").getLinktoRecordClass()\n        should(rec.fields(\"LinkTo_Field\").getMaxLength()).be.equal(linkto_class.getDescription().fields[linkto_class.uniqueKey()[0]].length)\n        should(rec.fields(\"String_Field\").getMaxLength()).be.equal(cls.getDescription().fields.String_Field.length)\n    });\n\n    it(\"create new record and store it\", async () => {\n        rec = cls.new().fillWithRandomValues()\n        let res = await rec.store();\n        res.should.be.true();\n        original_rec = rec.clone();\n    })\n\n    it(\"control for non-persistent fields\", async () => {\n        rec = cls.new().fillWithRandomValues()\n        rec.NonPersistent_Field = \"esto no deberia persistir\"\n        let row = rec.NonPersistent_Rows.newRow();\n        cls.fillRecordWithRandomValues(row)\n        rec.NonPersistent_Rows.push(row)\n        let res = await rec.store();\n        res.should.be.true();\n        let loaded_rec = await cls.findOne({internalId: rec.internalId})\n        should(loaded_rec.NonPersistent_Field).be.null();\n        should(loaded_rec.Rows.length).be.greaterThan(0);\n        should(loaded_rec.NonPersistent_Rows.length).be.equal(0);\n    })\n\n    it(\"load\", async () => {\n        rec = cls.new()\n        rec.internalId = original_rec.internalId;\n        rec.Date_Field = original_rec.Date_Field;\n        console.log(original_rec.Date_Field)\n        var res = await rec.load();\n        res.should.be.true(\"no se grabo\");\n        original_rec.syncOldFields();\n        rec.isEqual(original_rec).should.be.true(\"registros diferentes\");\n    })\n\n    it(\"Concurrent store (storing with old syncVersion)\", async () => {\n        let r1 = await cls.newSavedRecord();\n        let r2 = await cls.findOne({internalId: r1.internalId})\n        should(r1.isEqual(r2)).be.true()\n        r1.String_Field = 'r1'\n        r1.Integer_Field++;\n        should(await r1.store()).ok()\n        r2.Integer_Field--;\n        r2.String_Field = 'r2'\n        should(await r2.store()).not.ok()\n    })\n\n    it(\"Detail integrity against master syncVersion\", async () => {\n        let r1 = await cls.newSavedRecord();\n        let r2 = await cls.findOne({internalId: r1.internalId})\n        should(r1.isEqual(r2)).be.true()\n        console.log(r1)\n        console.log(r1.Rows)\n        console.log(r1.Rows.length)\n        r1.Rows[0].Integer_Field++;\n        should(await r1.store()).ok()\n        r2.Rows[0].Integer_Field--;\n        should(await r2.store()).not.ok()\n\n    })\n\n    it(\"Save new OK\", async ()=> {\n        rec = cls.new().fillWithRandomValues()\n        should(await rec.save()).be.true(\"El save no grabo\")\n        should.exist(await cls.findOne({internalId: rec.internalId, Integer_Field: rec.Integer_Field}), \"El save devolvio true, pero el registro no esta en la DB\")\n    })\n\n    it(\"Save with Check fail\", async ()=> {\n\n        let internalId = rec.internalId;\n        rec = await cls.findOne({internalId: rec.internalId})\n        should.exist(rec);\n        rec.checkReturnValue = false;\n        rec.Integer_Field++;\n        let res = await rec.save()\n        res.should.be.false(\"El save grabo y no deberia haberse grabado\")\n        should.not.exist(await cls.findOne({internalId: rec.internalId, Integer_Field: rec.Integer_Field}), \"El save devolvio false, pero igual grabo el registro\")\n    })\n\n    it(\"Save with beforeInsert fail\", async ()=> {\n        let rec = cls.new().fillWithRandomValues()\n        rec.beforeInsertReturnValue = false;\n        let recs_to_insert = [];\n        for (let i=0;i<3;i++) {\n            let record = cls.new().fillWithRandomValues()\n            record.SubTestName = \"Save with beforeInsert fail\"\n            recs_to_insert.push(record)\n        }\n        rec.setBeforeInsert_recordsToStore(recs_to_insert);\n        rec.SubTestName = 'PARENT'\n        let res = await rec.save()\n        should(res).be.false(\"No deberia haber grabado\")\n        should.not.exist(await cls.findOne({String_Field: rec.String_Field}), \"El save devolvio false, pero igual grabo el registro\")\n        recs_to_insert = rec.getBeforeInsert_recordsToStore()\n        for (let i in recs_to_insert) {\n            let record = recs_to_insert[i]\n            should.not.exist(await cls.findOne({internalId: record.internalId, String_Field: record.String_Field}), \"El save devolvio false, pero igual grabo registros dentro del beforeInsert\")\n        }\n    });\n\n    it(\"Save with beforeUpdate fail\", async ()=> {\n        let rec = cls.new().fillWithRandomValues()\n        rec.beforeUpdateReturnValue = false;\n\n        let res = await rec.save()\n        should(res).be.true(\"Deberia haber grabado\");\n        rec.Integer_Field++;\n\n        res = await rec.save();\n\n        should(res).be.false(\"No Deberia haber grabado\");\n        should.not.exist(await cls.findOne({internalId: rec.internalId, Integer_Field: rec.Integer_Field}), \"El save devolvio false, pero igual grabo el registro\")\n    })\n\n    it (\"Check if it makes rollback when storing record with wrong fields\", async () => {\n        //cls.__description__.fields['DUMMY'] = {type: \"string\", length: 30}\n        //cls.__description__.fieldnames.push(\"DUMMY\")\n        let rec = cls.new().fillWithRandomValues();\n        rec.beforeInsertReturnValue = false;\n        rec.SubTestName = 'TEST'\n        let recs_to_insert = []\n        for (let i=0;i<3;i++) {\n            let record = cls2.new().fillWithRandomValues()\n            record.SubTestName = rec.SubTestName\n            recs_to_insert.push(record);\n        }\n        rec.setBeforeInsert_recordsToStore(recs_to_insert)\n        let res = await rec.save();\n    });\n\n    it.skip(\"delete record\", async () => {\n        should(true).be.false()\n    })\n\n    it.skip(\"delete record check details and sets are gone\", async () => {\n        should(true).be.false()\n    })\n\n\n    it(\"check serialization\", async () => {\n        let rec = cls.new().fillWithRandomValues();\n        should(cls.fromJSON(JSON.stringify(rec.toJSON())).isEqual(rec)).be.ok();\n        rec.newproperty = 'abcde'\n    })\n\n    it (\"check sets behaviour (adding, changing, deleting)\", async () => {\n        async function checkSetField(rec, fn) {\n            let setvalues = _(rec[fn].split(\",\")).map(function (v) {return v.trim()})\n            let response = await (await oo.getDBConnection()).query(`SELECT Value FROM ${rec.fields(fn).setrecordname} WHERE masterId=?`, [rec.internalId])\n            let rset = response[0]\n            should(rset.length).be.equal(setvalues.length)\n            for (let i=0;i<setvalues.length;i++) {\n                should(rset[i].Value).be.equal(setvalues[i])\n            }\n        }\n        async function checkSetFieldDeleted(rec, fn) {\n            let response = await (await oo.getDBConnection()).query(`SELECT COUNT(*) as CNT FROM ${rec.fields(fn).setrecordname} WHERE masterId=?`, [rec.internalId])\n            let rset = response[0]\n            should(rset[0].CNT).be.equal(0)\n        }\n        //Aca empieza: creo un registro y le seteo el Set_Field al encabezado y a las filas. Luego lo grabo y compruebo que se hayan creado bien los registros set asociados\n        //A su vez luego de chequear, modifico los campos sets para la siguiente comprobacion, elimino la primera fila y agrego una nueva al final\n        rec = cls.new().fillWithRandomValues()\n        let res = await rec.store();\n        res.should.be.true();\n        await checkSetField(rec, 'Set_Field');\n        rec.Set_Field = chance.sentence({words: 2}).replace(/ /g, \",\").replace(/\\./g, \"\")\n        for (let i=0;i<rec.Rows.length;i++) {\n            let row = rec.Rows[i];\n            await checkSetField(row, 'Set_Field')\n            row.Set_Field = chance.sentence({words: 3}).replace(/ /g, \",\").replace(/\\./g, \"\")\n        }\n        let removed_row = rec.Rows[0];\n        rec.Rows.splice(0,1);\n        rec.Rows.push(cls.fillRecordWithRandomValues(rec.Rows.newRow()))\n        //grabo nuevamente el registro sin la primera fila y con una nueva fila al final. Con todos los campos Set_Field modificados (encabezado y filas)\n        //compruebo que los registros asociados esten correctos (que se hayan borrado todos y creado solo los modificados y nuevos)\n        res = await rec.store();\n        res.should.be.true();\n        await checkSetField(rec, 'Set_Field');\n        for (let i=0;i<rec.Rows.length;i++) {\n            let row = rec.Rows[i];\n            await checkSetField(row, 'Set_Field')\n        }\n        await checkSetFieldDeleted(removed_row, 'Set_Field')\n        //Ahora guardo en una lista todos los registros grabados en DB: encabezado y rows. Luego borro el registro\n        //Compruebo que efectivamete todos los registros asociados a encabezado y rows se eliminaron\n        let removed_recs = _(rec.Rows).map(function (r) {return r})\n        removed_recs.push(rec)\n        res = await rec.delete();\n        for (let i=0;i<removed_recs.length; i++) {\n            await checkSetFieldDeleted(removed_recs[i], 'Set_Field')\n        }\n    })\n});\n\nmodule.exports = function config(utilsModule) {\n    utils = utilsModule\n};"]}