{"version":3,"sources":["../../node_modules/openorange/lib/contextmanager.es6"],"names":[],"mappings":";;;;;;;;AAAA,IAAI,2BAA2B,QAAQ,4BAAR,CAA/B;AACA,IAAI,UAAU,yBAAyB,eAAzB,CAAyC,kCAAzC,CAAd;;IAEM,c;;;;;;;4CAEyB;;AAEvB,mBAAO,UAAS,GAAT,EAAc,GAAd,EAAmB,IAAnB,EAAyB;AAC5B,wBAAQ,WAAR,CAAoB,GAApB;AACA,wBAAQ,WAAR,CAAoB,GAApB;;AAEA,wBAAQ,GAAR,CAAY,YAAW;;;AAGnB,4BAAQ,GAAR,CAAY,iBAAZ,EAA+B,IAAI,OAAnC;AACA;AACH,iBALD;AAOH,aAXD;AAYH;;;4CAE0B;AACvB,mBAAO,QAAQ,GAAR,CAAY,iBAAZ,KAAkC,EAAC,IAAI,eAAL,EAAzC;AACH;;;;;oBAGO,O,EAGA,W,EACK,C,EACD,K,EAMJ,I;;;;;;AAXA,uC,GAAU,KAAK,iBAAL,E;;AACd,wCAAQ,GAAR,CAAY,UAAU,QAAQ,EAA9B;AACA,oCAAI,CAAC,KAAK,aAAL,CAAmB,QAAQ,EAA3B,CAAL,EAAqC,KAAK,aAAL,CAAmB,QAAQ,EAA3B,IAAiC,EAAjC;AACjC,2C,GAAc,KAAK,aAAL,CAAmB,QAAQ,EAA3B,C;sEACJ,W;;;;;;;;AAAL,iC;AACD,qC,GAAO,YAAY,CAAZ,C;;oCACN,MAAK,I;;;;;iEAEC,K;;;;;;;;uCAGE,QAAQ,MAAR,EAAgB,aAAhB,E;;;AAAb,oC;;AACJ,qCAAK,aAAL,CAAmB,QAAQ,EAA3B,EAA+B,IAA/B,CAAoC,IAApC;iEACO,I;;;;;;;;;;;;;;;;;;;;oBAIH,I;;;;;;uCAAa,KAAK,eAAL,E;;;AAAb,oC;kEACG,KAAK,gBAAL,E;;;;;;;;;;;;;;;;;;;;oBAIH,I;;;;;;uCAAa,KAAK,eAAL,E;;;AAAb,oC;kEACG,KAAK,MAAL,E;;;;;;;;;;;;;;;;;;;;oBAIH,I;;;;;;uCAAa,KAAK,eAAL,E;;;AAAb,oC;kEACG,KAAK,QAAL,E;;;;;;;;;;;;;;;;;;sCAGU;AACjB,gBAAI,UAAU,KAAK,iBAAL,EAAd;AACA,mBAAO,QAAQ,IAAf;AACH;;;;;;AAIL,eAAe,aAAf,GAA+B,EAA/B;;AAEA,OAAO,OAAP,GAAiB,cAAjB","file":"contextmanager.js","sourcesContent":["let continuationLocalStorage = require('continuation-local-storage')\nlet context = continuationLocalStorage.createNamespace('openorange-async-session-context');\n\nclass ContextManager {\n\n    static expressMiddleware() {\n\n        return function(req, res, next) {\n            context.bindEmitter(req);\n            context.bindEmitter(res);\n            //console.log(\"en middleware\")\n            context.run(function() {\n                //console.log(\"en middleware 2\", req.session)\n                //console.log(\"req.sessionID: \", req.sessionID, \"   session.id: \" + req.session.id)\n                context.set('request-session', req.session);\n                next();\n            });\n\n        };\n    }\n\n    static getRequestSession() {\n        return context.get('request-session') || {id: 'local-session'};\n    }\n\n    static async getDBConnection() {\n        let session = this.getRequestSession();\n        console.log(\"SID: \" + session.id)\n        if (!this.dbconnections[session.id]) this.dbconnections[session.id] = []\n        let connections = this.dbconnections[session.id];\n        for (let i in connections) {\n            let conn = connections[i];\n            if (!conn.busy) {\n                //console.log(\"returing existing: \", conn)\n                return conn;\n            }\n        }\n        let conn = await require(\"./db\").getConnection();\n        this.dbconnections[session.id].push(conn)\n        return conn;\n    }\n\n    static async beginTransaction() {\n        let conn = await this.getDBConnection();\n        return conn.beginTransaction();\n    }\n\n    static async commit() {\n        let conn = await this.getDBConnection();\n        return conn.commit();\n    }\n\n    static async rollback() {\n        let conn = await this.getDBConnection();\n        return conn.rollback();\n    }\n\n    static currentUser() {\n        let session = this.getRequestSession()\n        return session.user;\n    }\n\n\n}\nContextManager.dbconnections = {}\n\nmodule.exports = ContextManager"]}