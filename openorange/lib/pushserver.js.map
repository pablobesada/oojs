{"version":3,"sources":["pushserver.es6"],"names":[],"mappings":"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","file":"pushserver.js","sourcesContent":["\"use strict\"\nlet oo = require('openorange')\nlet Promise = require(\"bluebird\")\n\nclass PushServer {\n    constructor(socketIO) {\n        let self = this;\n        this.io = socketIO\n        this.clientconnections = []; //ver cuando y como se limpia este array!!!\n        this.io.on('connection', function (socket) {\n            if (!(socket.request.session.id in self.clientconnections)) {\n                self.clientconnections[socket.request.session.id] = {socket: socket, msg_queue: []}\n            } else {\n                self.clientconnections[socket.request.session.id].socket = socket;\n            }\n            let client = self.getClientConnection();\n            while (client.msg_queue.length) {\n                let msg = client.msg_queue.shift();\n                switch (msg.type) {\n                    case 'emit':\n                        self.emit(msg.eventName, msg.data);\n                        break;\n                    case 'broadcast':\n                        self.broadcast(msg.eventName, msg.data);\n                        break;\n                    case 'ask':\n                        self.ask(msg.eventName, msg.data, msg.promise);\n                        break;\n                }\n            }\n\n            socket.on('BROADCAST_REQUEST', function (data) {\n                socket.broadcast.emit(\"BROADCAST\", `${socket.request.session.user}: ${data}`)\n            })\n        });\n    };\n\n    getClientConnection() {\n        let session = oo.contextmanager.getRequestSession();\n        if (!(session.id in this.clientconnections)) this.clientconnections[session.id] = {socket: null, msg_queue: []}\n        return this.clientconnections[session.id];\n    }\n\n    emit(eventName, data) {\n        let client = this.getClientConnection();\n        if (client.socket) {\n            client.socket.emit(eventName, data);\n        } else {\n            client.msg_queue.push({eventName: eventName, data: data, type: 'emit'})\n        }\n    }\n\n    async ask(eventName, data, resolveToThisPromise) {\n        let promise = resolveToThisPromise || Promise.pending()\n        let client = this.getClientConnection();\n        if (client.socket) {\n            let context = oo.contextmanager.getContext()\n            let responseListener = function (response) {\n                promise.resolve(response)\n            }\n            client.socket.emit(eventName, data, context.bind(responseListener));\n        } else {\n            client.msg_queue.push({eventName: eventName, data: data, type: 'ask', promise: promise})\n        }\n        return promise.promise;\n    }\n\n    broadcast(eventName, data) {\n        let client = this.getClientConnection();\n        if (client.socket) {\n            client.socket.broadcast.emit(eventName, data);\n        } else {\n            client.msg_queue.push({eventName: eventName, data: data, type: 'broadcast'})\n        }\n    }\n\n}\n\n\nmodule.exports = function (httpServer) {\n    return new PushServer(httpServer)\n}"]}