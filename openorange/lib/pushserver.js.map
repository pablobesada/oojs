{"version":3,"sources":["pushserver.es6"],"names":[],"mappings":"AAAA;;;;;;;;AACA,IAAI,KAAK,QAAQ,YAAR,CAAT;AACA,IAAI,UAAU,QAAQ,UAAR,CAAd;;IAEM,U;AACF,wBAAY,QAAZ,EAAsB;AAAA;;AAClB,YAAI,OAAO,IAAX;AACA,aAAK,EAAL,GAAU,QAAV;AACA,aAAK,iBAAL,GAAyB,EAAzB;AACA,aAAK,EAAL,CAAQ,EAAR,CAAW,YAAX,EAAyB,UAAU,MAAV,EAAkB;AACvC,iBAAK,iBAAL,CAAuB,OAAO,OAAP,CAAe,OAAf,CAAuB,EAA9C,IAAoD,MAApD;AACH,SAFD;AAGH;;;;8CAGqB;AAClB,gBAAI,UAAU,GAAG,cAAH,CAAkB,iBAAlB,EAAd;AACA,mBAAO,KAAK,iBAAL,CAAuB,QAAQ,EAA/B,CAAP;AACH;;;6BAEI,S,EAAW,I,EAAM;AAClB,gBAAI,SAAS,KAAK,mBAAL,EAAb;AACA,mBAAO,IAAP,CAAY,SAAZ,EAAuB,IAAvB;AACH;;;;iFAES,S,EAAW,I;oBACb,O,EACA,M,EACA,O,EACA,gB;;;;;AAHA,uC,GAAU,QAAQ,OAAR,E;AACV,sC,GAAS,KAAK,mBAAL,E;AACT,uC,GAAU,GAAG,cAAH,CAAkB,UAAlB,E;;AACV,gD,GAAmB,SAAnB,gBAAmB,CAAU,QAAV,EAAoB;AACvC,4CAAQ,OAAR,CAAgB,QAAhB;AACH,iC;;AACD,uCAAO,IAAP,CAAY,SAAZ,EAAuB,IAAvB,EAA6B,QAAQ,IAAR,CAAa,gBAAb,CAA7B;iEACO,QAAQ,O;;;;;;;;;;;;;;;;;;kCAGT,S,EAAW,I,EAAM;AACvB,gBAAI,SAAS,KAAK,mBAAL,EAAb;AACA,gBAAI,MAAJ,EAAY,OAAO,SAAP,CAAiB,IAAjB,CAAsB,SAAtB,EAAiC,IAAjC;AAEf;;;;;;AAKL,OAAO,OAAP,GAAiB,UAAU,UAAV,EAAsB;AACnC,WAAO,IAAI,UAAJ,CAAe,UAAf,CAAP;AACH,CAFD","file":"pushserver.js","sourcesContent":["\"use strict\"\nlet oo = require('openorange')\nlet Promise = require(\"bluebird\")\n\nclass PushServer {\n    constructor(socketIO) {\n        let self = this;\n        this.io = socketIO\n        this.clientconnections = [];\n        this.io.on('connection', function (client) {\n            self.clientconnections[client.request.session.id] = client\n        });\n    };\n\n\n    getClientConnection() {\n        let session = oo.contextmanager.getRequestSession();\n        return this.clientconnections[session.id];\n    }\n\n    emit(eventName, data) {\n        let client = this.getClientConnection();\n        client.emit(eventName, data);\n    }\n\n    async ask(eventName, data) {\n        let promise = Promise.pending()\n        let client = this.getClientConnection();\n        let context = oo.contextmanager.getContext()\n        let responseListener = function (response) {\n            promise.resolve(response)\n        }\n        client.emit(eventName, data, context.bind(responseListener));\n        return promise.promise;\n    }\n\n    broadcast(eventName, data) {\n        let client = this.getClientConnection();\n        if (client) client.broadcast.emit(eventName, data);\n\n    }\n\n}\n\n\nmodule.exports = function (httpServer) {\n    return new PushServer(httpServer)\n}"]}