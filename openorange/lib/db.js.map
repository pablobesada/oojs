{"version":3,"sources":["../../node_modules/openorange/lib/db.es6"],"names":[],"mappings":"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","file":"db.js","sourcesContent":["\"use strict\";\n//require('source-map-support').install();\nvar Promise = require(\"bluebird\")\n/*Promise.config({\n    longStackTraces: true\n})*/\nvar mysql = require('mysql');\n// Note that the library's classes are not properties of the main export\n// so we require and promisifyAll them manually\n//Promise.promisifyAll(require(\"mysql/lib/Connection\").prototype);\n//var mysql_pool = Promise.promisifyAll(require(\"mysql/lib/Pool\").prototype);\n//var mysql     =    require('mysql');\nvar db = {}\n\ndb.pool     =    mysql.createPool({\n    connectionLimit : 100, //important\n    host     : 'localhost',\n    user     : 'root',\n    password : 'rootXy',\n    database : 'oo',\n    debug    :  false\n});\nfunction handle_database(req,res) {\n\n    pool.getConnection(function(err,connection){\n        if (err) {\n            connection.release();\n            res.json({\"code\" : 100, \"status\" : \"Error in connection database\"});\n            return;\n        }\n\n        console.log('connected as id ' + connection.threadId);\n\n        connection.query(\"select * from user\",function(err,rows){\n            connection.release();\n            if(!err) {\n                res.json(rows);\n            }\n        });\n\n        connection.on('error', function(err) {\n            res.json({\"code\" : 100, \"status\" : \"Error in connection database\"});\n            return;\n        });\n    });\n}\n\nvar Connection = Object.create(null);\n\nConnection.init = function init(conn) {\n    this.__conn__ = conn\n    this.beginTransaction = this.beginTransaction.bind(this)\n    this.commit = this.commit.bind(this)\n    this.rollback = this.rollback.bind(this)\n    return this;\n}\n\nConnection.beginTransaction = async function beginTransaction () {\n    var self = this;\n    return new Promise(function (resolve, reject) {\n        self.__conn__.beginTransaction(function (err) {\n            if (err) {\n                reject(err);\n                return;\n            }\n            resolve();\n        })\n    })\n}\n\nConnection.query = async function query (sql, values) {\n    var self = this;\n    return new Promise(function (resolve, reject) {\n        //console.log(sql, values)\n        self.__conn__.query(sql, values, function (err, result, fields) {\n            if (err) {\n                console.log(err)\n                console.log(sql)\n                console.log(values)\n                reject(err);\n                return;\n            }\n            if (fields != null) {//SELECTS por ejemplo\n                resolve([result, fields]);\n            } else { //UPDATES POR EJEMPLO\n                resolve(result)\n            }\n        })\n    })\n}\n\nConnection.commit = async function commit() {\n    var self = this;\n    return new Promise(function (resolve, reject) {\n        self.__conn__.commit(function (err) {\n            if (err) {\n                reject(err)\n                return;\n            }\n            resolve();\n        })\n    })\n}\n\nConnection.rollback = async function rollback() {\n    var self = this;\n    return new Promise(function (resolve, reject) {\n        self.__conn__.rollback(function (err) {\n            if (err) {\n                reject(err)\n                return;\n            }\n            resolve();\n        })\n    })\n}\n\nConnection.release = function release() {\n    var self = this;\n    self.__conn__.release();\n    self.__conn__ = null;\n    //console.log(\"releasing connection\");\n}\n\ndb.getConnection = async function getConnection() {\n    return new Promise(function (resolve, reject) {\n        db.pool.getConnection(function(err, connection) {\n            if (err) {\n                if (connection) {\n                    connnection.release();\n                }\n                reject(err);\n                return;\n            }\n            //console.log(\"returning new connection\");\n            resolve(Object.create(Connection).init(connection));\n        })\n    })\n}\n\n\n\nmodule.exports = db;\n\n"]}