{"version":3,"sources":["db.es6"],"names":[],"mappings":"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","file":"db.js","sourcesContent":["\"use strict\";\n//require('source-map-support').install();\nvar Promise = require(\"bluebird\")\n/*Promise.config({\n longStackTraces: true\n })*/\nvar mysql = require('mysql');\n// Note that the library's classes are not properties of the main export\n// so we require and promisifyAll them manually\n//Promise.promisifyAll(require(\"mysql/lib/Connection\").prototype);\n//var mysql_pool = Promise.promisifyAll(require(\"mysql/lib/Pool\").prototype);\n//var mysql     =    require('mysql');\nvar db = {}\n\ndb.pool = mysql.createPool({\n    connectionLimit: 100, //important\n    host: 'localhost',\n    user: 'root',\n    password: 'rootXy',\n    database: 'oo',\n    debug: false\n});\n\nfunction handle_database(req, res) {\n\n    pool.getConnection(function (err, connection) {\n        if (err) {\n            connection.release();\n            res.json({\"code\": 100, \"status\": \"Error in connection database\"});\n            return;\n        }\n\n        console.log('connected as id ' + connection.threadId);\n\n        connection.query(\"select * from user\", function (err, rows) {\n            connection.release();\n            if (!err) {\n                res.json(rows);\n            }\n        });\n\n        connection.on('error', function (err) {\n            res.json({\"code\": 100, \"status\": \"Error in connection database\"});\n            return;\n        });\n    });\n}\n\nclass Connection {\n\n    constructor(conn) {\n        this.id = Connection.__nextid__++;\n        this.log_queries = false;\n        this.log_query_values = false;\n        this.__conn__ = conn\n        this.busy = false;\n        if (this.log_queries) console.log(`(${this.id}) NEW connnection`)\n        return this;\n    }\n\n    async beginTransaction() {\n        var self = this;\n        return new Promise(function (resolve, reject) {\n            if (self.log_queries) console.log(`(${self.id}) BEGIN TRANSACTION`)\n            self.busy = true;\n            self.__conn__.beginTransaction(function (err) {\n                self.busy = false;\n                if (err) {\n                    reject(err);\n                    return;\n                }\n                resolve();\n            })\n        })\n    }\n\n    async query(sql, values) {\n        var self = this;\n        return new Promise(function (resolve, reject) {\n            if (self.log_queries) console.log(`(${self.id}) ${sql}`)\n            if (self.log_query_values) console.log(values)\n            self.busy = true;\n            self.__conn__.query(sql, values, function (err, result, fields) {\n                self.busy = false;\n                if (err) {\n                    console.log(err)\n                    console.log(sql)\n                    console.log(values)\n                    reject(err);\n                    return;\n                }\n                if (fields != null) {//SELECTS por ejemplo\n                    resolve([result, fields]);\n                } else { //UPDATES POR EJEMPLO\n                    resolve(result)\n                }\n            })\n        })\n    }\n\n    async commit() {\n        var self = this;\n        return new Promise(function (resolve, reject) {\n            if (self.log_queries) console.log(`(${self.id}) COMMIT`)\n            self.busy = true;\n            self.__conn__.commit(function (err) {\n                self.busy = false;\n                if (err) {\n                    reject(err)\n                    return;\n                }\n                resolve();\n            })\n        })\n    }\n\n    async rollback() {\n        var self = this;\n        return new Promise(function (resolve, reject) {\n            if (self.log_queries) console.log(`(${self.id}) ROLLBACK`)\n            self.busy = true;\n            self.__conn__.rollback(function (err) {\n                self.busy = false;\n                if (err) {\n                    reject(err)\n                    return;\n                }\n                resolve();\n            })\n        })\n    }\n\n    release() {\n        var self = this;\n        if (self.log_queries)  console.log(`(${self.id}) RELEASING connnection`)\n        self.__conn__.release();\n        self.__conn__ = null;\n        //console.log(\"releasing connection\");\n    }\n}\nConnection.__nextid__ = 1;\n\ndb.getConnection = async function getConnection() {\n    var self = this;\n    return new Promise(function (resolve, reject) {\n        db.pool.getConnection(function (err, connection) {\n            if (err) {\n                if (connection) {\n                    connnection.release();\n                }\n                reject(err);\n                return;\n            }\n            let res = new Connection(connection);\n            if (!connection.reusing) {\n                connection.reusing = true;\n                res.query(\"SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ\")\n                    .then(function () {return res.query(\"SET AUTOCOMMIT=0;\")})\n                    .then(function () {resolve(res)})\n            } else {\n                resolve(res)\n            }\n\n        })\n    })\n}\n\n\nmodule.exports = db;\n\n"]}