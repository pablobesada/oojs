{"version":3,"sources":["tdd.js"],"names":[],"mappings":";;;;AAIA,IAAI,QAAQ,QAAQ,UAAR,CAAZ;AACA,IAAI,OAAO,QAAQ,SAAR,CAAX;AACA,IAAI,WAAW,QAAQ,sBAAR,CAAf;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,OAAO,OAAP,GAAiB,UAAS,KAAT,EAAgB;AAC/B,MAAI,SAAS,CAAC,KAAD,CAAb;;AAEA,QAAM,EAAN,CAAS,aAAT,EAAwB,UAAS,OAAT,EAAkB,IAAlB,EAAwB,KAAxB,EAA+B;AACrD,QAAI,SAAS,QAAQ,UAAR,EAAoB,MAApB,EAA4B,OAA5B,CAAb;;AAEA,YAAQ,KAAR,GAAgB,OAAO,UAAvB;AACA,YAAQ,QAAR,GAAmB,OAAO,SAA1B;AACA,YAAQ,UAAR,GAAqB,OAAO,MAA5B;AACA,YAAQ,aAAR,GAAwB,OAAO,KAA/B;AACA,YAAQ,GAAR,GAAc,MAAM,OAAN,CAAc,KAAd,IAAuB,OAAO,YAAP,CAAoB,KAApB,CAArC;;;;;;AAMA,YAAQ,KAAR,GAAgB,UAAS,KAAT,EAAgB,EAAhB,EAAoB;AAClC,UAAI,QAAQ,MAAM,MAAN,CAAa,OAAO,CAAP,CAAb,EAAwB,KAAxB,CAAZ;AACA,YAAM,IAAN,GAAa,IAAb;AACA,aAAO,OAAP,CAAe,KAAf;AACA,SAAG,IAAH,CAAQ,KAAR;AACA,aAAO,KAAP;AACA,aAAO,KAAP;AACD,KAPD;;;;;AAYA,YAAQ,KAAR,CAAc,IAAd,GAAqB,UAAS,KAAT,EAAgB,EAAhB,EAAoB;AACvC,UAAI,QAAQ,MAAM,MAAN,CAAa,OAAO,CAAP,CAAb,EAAwB,KAAxB,CAAZ;AACA,YAAM,OAAN,GAAgB,IAAhB;AACA,aAAO,OAAP,CAAe,KAAf;AACA,SAAG,IAAH,CAAQ,KAAR;AACA,aAAO,KAAP;AACD,KAND;;;;;AAWA,YAAQ,KAAR,CAAc,IAAd,GAAqB,UAAS,KAAT,EAAgB,EAAhB,EAAoB;AACvC,UAAI,QAAQ,QAAQ,KAAR,CAAc,KAAd,EAAqB,EAArB,CAAZ;AACA,YAAM,IAAN,CAAW,MAAM,SAAN,EAAX;AACD,KAHD;;;;;;AASA,YAAQ,IAAR,GAAe,UAAS,KAAT,EAAgB,EAAhB,EAAoB;AACjC,UAAI,QAAQ,OAAO,CAAP,CAAZ;AACA,UAAI,MAAM,OAAV,EAAmB;AACjB,aAAK,IAAL;AACD;AACD,UAAI,OAAO,IAAI,IAAJ,CAAS,KAAT,EAAgB,EAAhB,CAAX;AACA,WAAK,IAAL,GAAY,IAAZ;AACA,YAAM,OAAN,CAAc,IAAd;AACA,aAAO,IAAP;AACD,KATD;;;;;;AAeA,YAAQ,IAAR,CAAa,IAAb,GAAoB,UAAS,KAAT,EAAgB,EAAhB,EAAoB;AACtC,UAAI,OAAO,QAAQ,IAAR,CAAa,KAAb,EAAoB,EAApB,CAAX;AACA,UAAI,WAAW,MAAM,SAAS,KAAK,SAAL,EAAT,CAAN,GAAmC,GAAlD;AACA,YAAM,IAAN,CAAW,IAAI,MAAJ,CAAW,QAAX,CAAX;AACD,KAJD;;AAMA,YAAQ,IAAR,CAAa,IAAb,GAAoB,OAAO,IAAP,CAAY,IAAhC;AACA,YAAQ,IAAR,CAAa,OAAb,GAAuB,OAAO,IAAP,CAAY,OAAnC;AACD,GApED;AAqED,CAxED","file":"tdd-compiled.js","sourcesContent":["/**\n * Module dependencies.\n */\n\nvar Suite = require('../suite');\nvar Test = require('../test');\nvar escapeRe = require('escape-string-regexp');\n\n/**\n * TDD-style interface:\n *\n *      suite('Array', function() {\n *        suite('#indexOf()', function() {\n *          suiteSetup(function() {\n *\n *          });\n *\n *          test('should return -1 when not present', function() {\n *\n *          });\n *\n *          test('should return the index when present', function() {\n *\n *          });\n *\n *          suiteTeardown(function() {\n *\n *          });\n *        });\n *      });\n *\n * @param {Suite} suite Root suite.\n */\nmodule.exports = function(suite) {\n  var suites = [suite];\n\n  suite.on('pre-require', function(context, file, mocha) {\n    var common = require('./common')(suites, context);\n\n    context.setup = common.beforeEach;\n    context.teardown = common.afterEach;\n    context.suiteSetup = common.before;\n    context.suiteTeardown = common.after;\n    context.run = mocha.options.delay && common.runWithSuite(suite);\n\n    /**\n     * Describe a \"suite\" with the given `title` and callback `fn` containing\n     * nested suites and/or tests.\n     */\n    context.suite = function(title, fn) {\n      var suite = Suite.create(suites[0], title);\n      suite.file = file;\n      suites.unshift(suite);\n      fn.call(suite);\n      suites.shift();\n      return suite;\n    };\n\n    /**\n     * Pending suite.\n     */\n    context.suite.skip = function(title, fn) {\n      var suite = Suite.create(suites[0], title);\n      suite.pending = true;\n      suites.unshift(suite);\n      fn.call(suite);\n      suites.shift();\n    };\n\n    /**\n     * Exclusive test-case.\n     */\n    context.suite.only = function(title, fn) {\n      var suite = context.suite(title, fn);\n      mocha.grep(suite.fullTitle());\n    };\n\n    /**\n     * Describe a specification or test-case with the given `title` and\n     * callback `fn` acting as a thunk.\n     */\n    context.test = function(title, fn) {\n      var suite = suites[0];\n      if (suite.pending) {\n        fn = null;\n      }\n      var test = new Test(title, fn);\n      test.file = file;\n      suite.addTest(test);\n      return test;\n    };\n\n    /**\n     * Exclusive test-case.\n     */\n\n    context.test.only = function(title, fn) {\n      var test = context.test(title, fn);\n      var reString = '^' + escapeRe(test.fullTitle()) + '$';\n      mocha.grep(new RegExp(reString));\n    };\n\n    context.test.skip = common.test.skip;\n    context.test.retries = common.test.retries;\n  });\n};\n"]}