{"version":3,"sources":["qunit.js"],"names":[],"mappings":";;;;AAIA,IAAI,QAAQ,QAAQ,UAAR,CAAZ;AACA,IAAI,OAAO,QAAQ,SAAR,CAAX;AACA,IAAI,WAAW,QAAQ,sBAAR,CAAf;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,OAAO,OAAP,GAAiB,UAAS,KAAT,EAAgB;AAC/B,MAAI,SAAS,CAAC,KAAD,CAAb;;AAEA,QAAM,EAAN,CAAS,aAAT,EAAwB,UAAS,OAAT,EAAkB,IAAlB,EAAwB,KAAxB,EAA+B;AACrD,QAAI,SAAS,QAAQ,UAAR,EAAoB,MAApB,EAA4B,OAA5B,CAAb;;AAEA,YAAQ,MAAR,GAAiB,OAAO,MAAxB;AACA,YAAQ,KAAR,GAAgB,OAAO,KAAvB;AACA,YAAQ,UAAR,GAAqB,OAAO,UAA5B;AACA,YAAQ,SAAR,GAAoB,OAAO,SAA3B;AACA,YAAQ,GAAR,GAAc,MAAM,OAAN,CAAc,KAAd,IAAuB,OAAO,YAAP,CAAoB,KAApB,CAArC;;;;;AAKA,YAAQ,KAAR,GAAgB,UAAS,KAAT,EAAgB;AAC9B,UAAI,OAAO,MAAP,GAAgB,CAApB,EAAuB;AACrB,eAAO,KAAP;AACD;AACD,UAAI,QAAQ,MAAM,MAAN,CAAa,OAAO,CAAP,CAAb,EAAwB,KAAxB,CAAZ;AACA,YAAM,IAAN,GAAa,IAAb;AACA,aAAO,OAAP,CAAe,KAAf;AACA,aAAO,KAAP;AACD,KARD;;;;;;AAcA,YAAQ,KAAR,CAAc,IAAd,GAAqB,UAAS,KAAT,EAAgB,EAAhB,EAAoB;AACvC,UAAI,QAAQ,QAAQ,KAAR,CAAc,KAAd,EAAqB,EAArB,CAAZ;AACA,YAAM,IAAN,CAAW,MAAM,SAAN,EAAX;AACD,KAHD;;;;;;;;AAWA,YAAQ,IAAR,GAAe,UAAS,KAAT,EAAgB,EAAhB,EAAoB;AACjC,UAAI,OAAO,IAAI,IAAJ,CAAS,KAAT,EAAgB,EAAhB,CAAX;AACA,WAAK,IAAL,GAAY,IAAZ;AACA,aAAO,CAAP,EAAU,OAAV,CAAkB,IAAlB;AACA,aAAO,IAAP;AACD,KALD;;;;;;AAWA,YAAQ,IAAR,CAAa,IAAb,GAAoB,UAAS,KAAT,EAAgB,EAAhB,EAAoB;AACtC,UAAI,OAAO,QAAQ,IAAR,CAAa,KAAb,EAAoB,EAApB,CAAX;AACA,UAAI,WAAW,MAAM,SAAS,KAAK,SAAL,EAAT,CAAN,GAAmC,GAAlD;AACA,YAAM,IAAN,CAAW,IAAI,MAAJ,CAAW,QAAX,CAAX;AACD,KAJD;;AAMA,YAAQ,IAAR,CAAa,IAAb,GAAoB,OAAO,IAAP,CAAY,IAAhC;AACA,YAAQ,IAAR,CAAa,OAAb,GAAuB,OAAO,IAAP,CAAY,OAAnC;AACD,GAxDD;AAyDD,CA5DD","file":"qunit-compiled.js","sourcesContent":["/**\n * Module dependencies.\n */\n\nvar Suite = require('../suite');\nvar Test = require('../test');\nvar escapeRe = require('escape-string-regexp');\n\n/**\n * QUnit-style interface:\n *\n *     suite('Array');\n *\n *     test('#length', function() {\n *       var arr = [1,2,3];\n *       ok(arr.length == 3);\n *     });\n *\n *     test('#indexOf()', function() {\n *       var arr = [1,2,3];\n *       ok(arr.indexOf(1) == 0);\n *       ok(arr.indexOf(2) == 1);\n *       ok(arr.indexOf(3) == 2);\n *     });\n *\n *     suite('String');\n *\n *     test('#length', function() {\n *       ok('foo'.length == 3);\n *     });\n *\n * @param {Suite} suite Root suite.\n */\nmodule.exports = function(suite) {\n  var suites = [suite];\n\n  suite.on('pre-require', function(context, file, mocha) {\n    var common = require('./common')(suites, context);\n\n    context.before = common.before;\n    context.after = common.after;\n    context.beforeEach = common.beforeEach;\n    context.afterEach = common.afterEach;\n    context.run = mocha.options.delay && common.runWithSuite(suite);\n    /**\n     * Describe a \"suite\" with the given `title`.\n     */\n\n    context.suite = function(title) {\n      if (suites.length > 1) {\n        suites.shift();\n      }\n      var suite = Suite.create(suites[0], title);\n      suite.file = file;\n      suites.unshift(suite);\n      return suite;\n    };\n\n    /**\n     * Exclusive test-case.\n     */\n\n    context.suite.only = function(title, fn) {\n      var suite = context.suite(title, fn);\n      mocha.grep(suite.fullTitle());\n    };\n\n    /**\n     * Describe a specification or test-case\n     * with the given `title` and callback `fn`\n     * acting as a thunk.\n     */\n\n    context.test = function(title, fn) {\n      var test = new Test(title, fn);\n      test.file = file;\n      suites[0].addTest(test);\n      return test;\n    };\n\n    /**\n     * Exclusive test-case.\n     */\n\n    context.test.only = function(title, fn) {\n      var test = context.test(title, fn);\n      var reString = '^' + escapeRe(test.fullTitle()) + '$';\n      mocha.grep(new RegExp(reString));\n    };\n\n    context.test.skip = common.test.skip;\n    context.test.retries = common.test.retries;\n  });\n};\n"]}