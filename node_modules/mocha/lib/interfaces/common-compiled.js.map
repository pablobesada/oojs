{"version":3,"sources":["common.js"],"names":[],"mappings":"AAAA;;;;;;;;;;AASA,OAAO,OAAP,GAAiB,UAAS,MAAT,EAAiB,OAAjB,EAA0B;AACzC,SAAO;;;;;;;;AAQL,kBAAc,SAAS,YAAT,CAAsB,KAAtB,EAA6B;AACzC,aAAO,SAAS,GAAT,GAAe;AACpB,cAAM,GAAN;AACD,OAFD;AAGD,KAZI;;;;;;;;AAoBL,YAAQ,UAAS,IAAT,EAAe,EAAf,EAAmB;AACzB,aAAO,CAAP,EAAU,SAAV,CAAoB,IAApB,EAA0B,EAA1B;AACD,KAtBI;;;;;;;;AA8BL,WAAO,UAAS,IAAT,EAAe,EAAf,EAAmB;AACxB,aAAO,CAAP,EAAU,QAAV,CAAmB,IAAnB,EAAyB,EAAzB;AACD,KAhCI;;;;;;;;AAwCL,gBAAY,UAAS,IAAT,EAAe,EAAf,EAAmB;AAC7B,aAAO,CAAP,EAAU,UAAV,CAAqB,IAArB,EAA2B,EAA3B;AACD,KA1CI;;;;;;;;AAkDL,eAAW,UAAS,IAAT,EAAe,EAAf,EAAmB;AAC5B,aAAO,CAAP,EAAU,SAAV,CAAoB,IAApB,EAA0B,EAA1B;AACD,KApDI;;AAsDL,UAAM;;;;;;AAMJ,YAAM,UAAS,KAAT,EAAgB;AACpB,gBAAQ,IAAR,CAAa,KAAb;AACD,OARG;;;;;;;AAeJ,eAAS,UAAS,CAAT,EAAY;AACnB,gBAAQ,OAAR,CAAgB,CAAhB;AACD;AAjBG;AAtDD,GAAP;AA0ED,CA3ED","file":"common-compiled.js","sourcesContent":["'use strict';\n\n/**\n * Functions common to more than one interface.\n *\n * @param {Suite[]} suites\n * @param {Context} context\n * @return {Object} An object containing common functions.\n */\nmodule.exports = function(suites, context) {\n  return {\n    /**\n     * This is only present if flag --delay is passed into Mocha. It triggers\n     * root suite execution.\n     *\n     * @param {Suite} suite The root wuite.\n     * @return {Function} A function which runs the root suite\n     */\n    runWithSuite: function runWithSuite(suite) {\n      return function run() {\n        suite.run();\n      };\n    },\n\n    /**\n     * Execute before running tests.\n     *\n     * @param {string} name\n     * @param {Function} fn\n     */\n    before: function(name, fn) {\n      suites[0].beforeAll(name, fn);\n    },\n\n    /**\n     * Execute after running tests.\n     *\n     * @param {string} name\n     * @param {Function} fn\n     */\n    after: function(name, fn) {\n      suites[0].afterAll(name, fn);\n    },\n\n    /**\n     * Execute before each test case.\n     *\n     * @param {string} name\n     * @param {Function} fn\n     */\n    beforeEach: function(name, fn) {\n      suites[0].beforeEach(name, fn);\n    },\n\n    /**\n     * Execute after each test case.\n     *\n     * @param {string} name\n     * @param {Function} fn\n     */\n    afterEach: function(name, fn) {\n      suites[0].afterEach(name, fn);\n    },\n\n    test: {\n      /**\n       * Pending test case.\n       *\n       * @param {string} title\n       */\n      skip: function(title) {\n        context.test(title);\n      },\n\n      /**\n       * Number of retry attempts\n       *\n       * @param {string} n\n       */\n      retries: function(n) {\n        context.retries(n);\n      }\n    }\n  };\n};\n"]}