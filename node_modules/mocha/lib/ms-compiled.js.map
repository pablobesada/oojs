{"version":3,"sources":["ms.js"],"names":[],"mappings":";;;;AAIA,IAAI,IAAI,IAAR;AACA,IAAI,IAAI,IAAI,EAAZ;AACA,IAAI,IAAI,IAAI,EAAZ;AACA,IAAI,IAAI,IAAI,EAAZ;AACA,IAAI,IAAI,IAAI,MAAZ;;;;;;;;;;;;;;AAcA,OAAO,OAAP,GAAiB,UAAS,GAAT,EAAc,OAAd,EAAuB;AACtC,YAAU,WAAW,EAArB;AACA,MAAI,OAAO,GAAP,KAAe,QAAnB,EAA6B;AAC3B,WAAO,MAAM,GAAN,CAAP;AACD;;AAED,SAAO,QAAQ,MAAR,IAAkB,WAAW,GAAX,CAAlB,GAAoC,YAAY,GAAZ,CAA3C;AACD,CAPD;;;;;;;;;AAgBA,SAAS,KAAT,CAAe,GAAf,EAAoB;AAClB,MAAI,QAAS,4EAAD,CAA+E,IAA/E,CAAoF,GAApF,CAAZ;AACA,MAAI,CAAC,KAAL,EAAY;AACV;AACD;AACD,MAAI,IAAI,WAAW,MAAM,CAAN,CAAX,CAAR;AACA,MAAI,OAAO,CAAC,MAAM,CAAN,KAAY,IAAb,EAAmB,WAAnB,EAAX;AACA,UAAQ,IAAR;AACE,SAAK,OAAL;AACA,SAAK,MAAL;AACA,SAAK,GAAL;AACE,aAAO,IAAI,CAAX;AACF,SAAK,MAAL;AACA,SAAK,KAAL;AACA,SAAK,GAAL;AACE,aAAO,IAAI,CAAX;AACF,SAAK,OAAL;AACA,SAAK,MAAL;AACA,SAAK,GAAL;AACE,aAAO,IAAI,CAAX;AACF,SAAK,SAAL;AACA,SAAK,QAAL;AACA,SAAK,GAAL;AACE,aAAO,IAAI,CAAX;AACF,SAAK,SAAL;AACA,SAAK,QAAL;AACA,SAAK,GAAL;AACE,aAAO,IAAI,CAAX;AACF,SAAK,IAAL;AACE,aAAO,CAAP;AACF;;AAvBF;AA0BD;;;;;;;;;AASD,SAAS,WAAT,CAAqB,EAArB,EAAyB;AACvB,MAAI,MAAM,CAAV,EAAa;AACX,WAAO,KAAK,KAAL,CAAW,KAAK,CAAhB,IAAqB,GAA5B;AACD;AACD,MAAI,MAAM,CAAV,EAAa;AACX,WAAO,KAAK,KAAL,CAAW,KAAK,CAAhB,IAAqB,GAA5B;AACD;AACD,MAAI,MAAM,CAAV,EAAa;AACX,WAAO,KAAK,KAAL,CAAW,KAAK,CAAhB,IAAqB,GAA5B;AACD;AACD,MAAI,MAAM,CAAV,EAAa;AACX,WAAO,KAAK,KAAL,CAAW,KAAK,CAAhB,IAAqB,GAA5B;AACD;AACD,SAAO,KAAK,IAAZ;AACD;;;;;;;;;AASD,SAAS,UAAT,CAAoB,EAApB,EAAwB;AACtB,SAAO,OAAO,EAAP,EAAW,CAAX,EAAc,KAAd,KACF,OAAO,EAAP,EAAW,CAAX,EAAc,MAAd,CADE,IAEF,OAAO,EAAP,EAAW,CAAX,EAAc,QAAd,CAFE,IAGF,OAAO,EAAP,EAAW,CAAX,EAAc,QAAd,CAHE,IAIF,KAAK,KAJV;AAKD;;;;;;;;;;AAUD,SAAS,MAAT,CAAgB,EAAhB,EAAoB,CAApB,EAAuB,IAAvB,EAA6B;AAC3B,MAAI,KAAK,CAAT,EAAY;AACV;AACD;AACD,MAAI,KAAK,IAAI,GAAb,EAAkB;AAChB,WAAO,KAAK,KAAL,CAAW,KAAK,CAAhB,IAAqB,GAArB,GAA2B,IAAlC;AACD;AACD,SAAO,KAAK,IAAL,CAAU,KAAK,CAAf,IAAoB,GAApB,GAA0B,IAA1B,GAAiC,GAAxC;AACD","file":"ms-compiled.js","sourcesContent":["/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @api public\n * @param {string|number} val\n * @param {Object} options\n * @return {string|number}\n */\nmodule.exports = function(val, options) {\n  options = options || {};\n  if (typeof val === 'string') {\n    return parse(val);\n  }\n  // https://github.com/mochajs/mocha/pull/1035\n  return options['long'] ? longFormat(val) : shortFormat(val);\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @api private\n * @param {string} str\n * @return {number}\n */\nfunction parse(str) {\n  var match = (/^((?:\\d+)?\\.?\\d+) *(ms|seconds?|s|minutes?|m|hours?|h|days?|d|years?|y)?$/i).exec(str);\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 's':\n      return n * s;\n    case 'ms':\n      return n;\n    default:\n      // No default case\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @api private\n * @param {number} ms\n * @return {string}\n */\nfunction shortFormat(ms) {\n  if (ms >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (ms >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (ms >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (ms >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @api private\n * @param {number} ms\n * @return {string}\n */\nfunction longFormat(ms) {\n  return plural(ms, d, 'day')\n    || plural(ms, h, 'hour')\n    || plural(ms, m, 'minute')\n    || plural(ms, s, 'second')\n    || ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n *\n * @api private\n * @param {number} ms\n * @param {number} n\n * @param {string} name\n */\nfunction plural(ms, n, name) {\n  if (ms < n) {\n    return;\n  }\n  if (ms < n * 1.5) {\n    return Math.floor(ms / n) + ' ' + name;\n  }\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n"]}