{"version":3,"sources":["json-cov.js"],"names":[],"mappings":"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","file":"json-cov-compiled.js","sourcesContent":["/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\n\n/**\n * Expose `JSONCov`.\n */\n\nexports = module.exports = JSONCov;\n\n/**\n * Initialize a new `JsCoverage` reporter.\n *\n * @api public\n * @param {Runner} runner\n * @param {boolean} output\n */\nfunction JSONCov(runner, output) {\n  Base.call(this, runner);\n\n  output = arguments.length === 1 || output;\n  var self = this;\n  var tests = [];\n  var failures = [];\n  var passes = [];\n\n  runner.on('test end', function(test) {\n    tests.push(test);\n  });\n\n  runner.on('pass', function(test) {\n    passes.push(test);\n  });\n\n  runner.on('fail', function(test) {\n    failures.push(test);\n  });\n\n  runner.on('end', function() {\n    var cov = global._$jscoverage || {};\n    var result = self.cov = map(cov);\n    result.stats = self.stats;\n    result.tests = tests.map(clean);\n    result.failures = failures.map(clean);\n    result.passes = passes.map(clean);\n    if (!output) {\n      return;\n    }\n    process.stdout.write(JSON.stringify(result, null, 2));\n  });\n}\n\n/**\n * Map jscoverage data to a JSON structure\n * suitable for reporting.\n *\n * @api private\n * @param {Object} cov\n * @return {Object}\n */\n\nfunction map(cov) {\n  var ret = {\n    instrumentation: 'node-jscoverage',\n    sloc: 0,\n    hits: 0,\n    misses: 0,\n    coverage: 0,\n    files: []\n  };\n\n  for (var filename in cov) {\n    if (Object.prototype.hasOwnProperty.call(cov, filename)) {\n      var data = coverage(filename, cov[filename]);\n      ret.files.push(data);\n      ret.hits += data.hits;\n      ret.misses += data.misses;\n      ret.sloc += data.sloc;\n    }\n  }\n\n  ret.files.sort(function(a, b) {\n    return a.filename.localeCompare(b.filename);\n  });\n\n  if (ret.sloc > 0) {\n    ret.coverage = (ret.hits / ret.sloc) * 100;\n  }\n\n  return ret;\n}\n\n/**\n * Map jscoverage data for a single source file\n * to a JSON structure suitable for reporting.\n *\n * @api private\n * @param {string} filename name of the source file\n * @param {Object} data jscoverage coverage data\n * @return {Object}\n */\nfunction coverage(filename, data) {\n  var ret = {\n    filename: filename,\n    coverage: 0,\n    hits: 0,\n    misses: 0,\n    sloc: 0,\n    source: {}\n  };\n\n  data.source.forEach(function(line, num) {\n    num++;\n\n    if (data[num] === 0) {\n      ret.misses++;\n      ret.sloc++;\n    } else if (data[num] !== undefined) {\n      ret.hits++;\n      ret.sloc++;\n    }\n\n    ret.source[num] = {\n      source: line,\n      coverage: data[num] === undefined ? '' : data[num]\n    };\n  });\n\n  ret.coverage = ret.hits / ret.sloc * 100;\n\n  return ret;\n}\n\n/**\n * Return a plain-object representation of `test`\n * free of cyclic properties etc.\n *\n * @api private\n * @param {Object} test\n * @return {Object}\n */\nfunction clean(test) {\n  return {\n    duration: test.duration,\n    currentRetry: test.currentRetry(),\n    fullTitle: test.fullTitle(),\n    title: test.title\n  };\n}\n"]}