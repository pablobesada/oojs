{"version":3,"sources":["memory-leak.js"],"names":[],"mappings":";;AAGA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,OAAO,QAAQ,KAAR,EAAe,IAA1B;AACA,IAAI,MAAM,QAAQ,KAAR,CAAV;AACA,IAAI,IAAI,IAAI,GAAJ,CAAQ,EAAE,KAAK,EAAP,EAAR,CAAR;AACA,IAAI,OAAO,CAAX;AACA,SAAS,CAAT,GAAa;AACX;AACA,OAAK,IAAL,EAAW,KAAX;AACD;;AAED,SAAS,KAAT,GAAiB;AACf;AACD;;AAED,KAAK,UAAL,EAAiB,UAAU,CAAV,EAAa;;AAE5B,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,GAApB,EAAyB,GAAzB,EAA8B;AAC5B,MAAE,GAAF,CAAM,CAAN,EAAS,IAAI,CAAJ,EAAT;;AAEA,QAAI,IAAI,CAAJ,KAAU,CAAd,EACE,EAAE,GAAF,CAAM,IAAI,CAAV;AACH;;AAED;;AAEA,MAAI,QAAQ,QAAQ,WAAR,EAAZ;;;AAGA,MAAI,YAAY,IAAhB;;;AAGA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAApB,EAA2B,GAA3B,EAAgC;AAC9B,MAAE,GAAF,CAAM,CAAN,EAAS,IAAI,CAAJ,EAAT;;AAEA,QAAI,IAAI,CAAJ,KAAU,CAAd,EACE,EAAE,GAAF,CAAM,IAAI,CAAV;AACH;;AAED;;AAEA,MAAI,MAAM,QAAQ,WAAR,EAAV;AACA,IAAE,KAAF,CAAQ,IAAR,EAAc,SAAd,EAAyB,eAAzB;;AAEA,UAAQ,KAAR,CAAc,gBACA,WADd,EAC2B,KAD3B,EACkC,GADlC;AAEA,IAAE,IAAF;AACA,IAAE,GAAF;AACD,CAjCD","file":"memory-leak-compiled.js","sourcesContent":["#!/usr/bin/env node --expose_gc\n\n\nvar weak = require('weak');\nvar test = require('tap').test\nvar LRU = require('../')\nvar l = new LRU({ max: 10 })\nvar refs = 0\nfunction X() {\n  refs ++\n  weak(this, deref)\n}\n\nfunction deref() {\n  refs --\n}\n\ntest('no leaks', function (t) {\n  // fill up the cache\n  for (var i = 0; i < 100; i++) {\n    l.set(i, new X);\n    // throw some gets in there, too.\n    if (i % 2 === 0)\n      l.get(i / 2)\n  }\n\n  gc()\n\n  var start = process.memoryUsage()\n\n  // capture the memory\n  var startRefs = refs\n\n  // do it again, but more\n  for (var i = 0; i < 10000; i++) {\n    l.set(i, new X);\n    // throw some gets in there, too.\n    if (i % 2 === 0)\n      l.get(i / 2)\n  }\n\n  gc()\n\n  var end = process.memoryUsage()\n  t.equal(refs, startRefs, 'no leaky refs')\n\n  console.error('start: %j\\n' +\n                'end:   %j', start, end);\n  t.pass();\n  t.end();\n})\n"]}