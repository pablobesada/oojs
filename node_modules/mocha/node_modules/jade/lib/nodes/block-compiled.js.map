{"version":3,"sources":["block.js"],"names":[],"mappings":";;;;;;;;;;;AAWA,IAAI,OAAO,QAAQ,QAAR,CAAX;;;;;;;;;AASA,IAAI,QAAQ,OAAO,OAAP,GAAiB,SAAS,KAAT,CAAe,IAAf,EAAoB;AAC/C,OAAK,KAAL,GAAa,EAAb;AACA,MAAI,IAAJ,EAAU,KAAK,IAAL,CAAU,IAAV;AACX,CAHD;;;;;;AASA,MAAM,SAAN,CAAgB,SAAhB,GAA4B,KAAK,SAAjC;;;;;;AAMA,MAAM,SAAN,CAAgB,OAAhB,GAA0B,IAA1B;;;;;;;;;;AAUA,MAAM,SAAN,CAAgB,OAAhB,GAA0B,UAAS,KAAT,EAAe;AACvC,QAAM,KAAN,GAAc,KAAK,KAAnB;AACD,CAFD;;;;;;;;;;AAYA,MAAM,SAAN,CAAgB,IAAhB,GAAuB,UAAS,IAAT,EAAc;AACnC,SAAO,KAAK,KAAL,CAAW,IAAX,CAAgB,IAAhB,CAAP;AACD,CAFD;;;;;;;;;AAWA,MAAM,SAAN,CAAgB,OAAhB,GAA0B,YAAU;AAClC,SAAO,KAAK,KAAK,KAAL,CAAW,MAAvB;AACD,CAFD;;;;;;;;;;AAYA,MAAM,SAAN,CAAgB,OAAhB,GAA0B,UAAS,IAAT,EAAc;AACtC,SAAO,KAAK,KAAL,CAAW,OAAX,CAAmB,IAAnB,CAAP;AACD,CAFD;;;;;;;;;AAWA,MAAM,SAAN,CAAgB,YAAhB,GAA+B,YAAU;AACvC,MAAI,MAAM,IAAV;MACI,IADJ;;AAGA,OAAK,IAAI,IAAI,CAAR,EAAW,MAAM,KAAK,KAAL,CAAW,MAAjC,EAAyC,IAAI,GAA7C,EAAkD,EAAE,CAApD,EAAuD;AACrD,WAAO,KAAK,KAAL,CAAW,CAAX,CAAP;AACA,QAAI,KAAK,KAAT,EAAgB,OAAO,IAAP,CAAhB,KACK,IAAI,KAAK,QAAT,EAAmB,SAAnB,KACA,IAAI,KAAK,YAAT,EAAuB,MAAM,KAAK,YAAL,EAAN,CAAvB,KACA,IAAI,KAAK,KAAL,IAAc,CAAC,KAAK,KAAL,CAAW,OAAX,EAAnB,EAAyC,MAAM,KAAK,KAAL,CAAW,YAAX,EAAN;AAC/C;;AAED,SAAO,GAAP;AACD,CAbD;;;;;;;;;AAsBA,MAAM,SAAN,CAAgB,KAAhB,GAAwB,YAAU;AAChC,MAAI,QAAQ,IAAI,KAAJ,EAAZ;AACA,OAAK,IAAI,IAAI,CAAR,EAAW,MAAM,KAAK,KAAL,CAAW,MAAjC,EAAyC,IAAI,GAA7C,EAAkD,EAAE,CAApD,EAAuD;AACrD,UAAM,IAAN,CAAW,KAAK,KAAL,CAAW,CAAX,EAAc,KAAd,EAAX;AACD;AACD,SAAO,KAAP;AACD,CAND","file":"block-compiled.js","sourcesContent":["\n/*!\n * Jade - nodes - Block\n * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar Node = require('./node');\n\n/**\n * Initialize a new `Block` with an optional `node`.\n *\n * @param {Node} node\n * @api public\n */\n\nvar Block = module.exports = function Block(node){\n  this.nodes = [];\n  if (node) this.push(node);\n};\n\n/**\n * Inherit from `Node`.\n */\n\nBlock.prototype.__proto__ = Node.prototype;\n\n/**\n * Block flag.\n */\n\nBlock.prototype.isBlock = true;\n\n/**\n * Replace the nodes in `other` with the nodes\n * in `this` block.\n *\n * @param {Block} other\n * @api private\n */\n\nBlock.prototype.replace = function(other){\n  other.nodes = this.nodes;\n};\n\n/**\n * Pust the given `node`.\n *\n * @param {Node} node\n * @return {Number}\n * @api public\n */\n\nBlock.prototype.push = function(node){\n  return this.nodes.push(node);\n};\n\n/**\n * Check if this block is empty.\n *\n * @return {Boolean}\n * @api public\n */\n\nBlock.prototype.isEmpty = function(){\n  return 0 == this.nodes.length;\n};\n\n/**\n * Unshift the given `node`.\n *\n * @param {Node} node\n * @return {Number}\n * @api public\n */\n\nBlock.prototype.unshift = function(node){\n  return this.nodes.unshift(node);\n};\n\n/**\n * Return the \"last\" block, or the first `yield` node.\n *\n * @return {Block}\n * @api private\n */\n\nBlock.prototype.includeBlock = function(){\n  var ret = this\n    , node;\n\n  for (var i = 0, len = this.nodes.length; i < len; ++i) {\n    node = this.nodes[i];\n    if (node.yield) return node;\n    else if (node.textOnly) continue;\n    else if (node.includeBlock) ret = node.includeBlock();\n    else if (node.block && !node.block.isEmpty()) ret = node.block.includeBlock();\n  }\n\n  return ret;\n};\n\n/**\n * Return a clone of this block.\n *\n * @return {Block}\n * @api private\n */\n\nBlock.prototype.clone = function(){\n  var clone = new Block;\n  for (var i = 0, len = this.nodes.length; i < len; ++i) {\n    clone.push(this.nodes[i].clone());\n  }\n  return clone;\n};\n\n"]}