{"version":3,"sources":["tag.js"],"names":[],"mappings":";;;;;;;;;;;AAWA,IAAI,QAAQ,QAAQ,SAAR,CAAZ;IACI,QAAQ,QAAQ,SAAR,CADZ;IAEI,aAAa,QAAQ,gBAAR,CAFjB;;;;;;;;;;AAYA,IAAI,MAAM,OAAO,OAAP,GAAiB,SAAS,GAAT,CAAa,IAAb,EAAmB,KAAnB,EAA0B;AACnD,OAAK,IAAL,GAAY,IAAZ;AACA,OAAK,KAAL,GAAa,EAAb;AACA,OAAK,KAAL,GAAa,SAAS,IAAI,KAAJ,EAAtB;AACD,CAJD;;;;;;AAUA,IAAI,SAAJ,CAAc,SAAd,GAA0B,MAAM,SAAhC;;;;;;;;;AASA,IAAI,SAAJ,CAAc,KAAd,GAAsB,YAAU;AAC9B,MAAI,QAAQ,IAAI,GAAJ,CAAQ,KAAK,IAAb,EAAmB,KAAK,KAAL,CAAW,KAAX,EAAnB,CAAZ;AACA,QAAM,IAAN,GAAa,KAAK,IAAlB;AACA,QAAM,KAAN,GAAc,KAAK,KAAnB;AACA,QAAM,QAAN,GAAiB,KAAK,QAAtB;AACA,SAAO,KAAP;AACD,CAND;;;;;;;;;AAeA,IAAI,SAAJ,CAAc,QAAd,GAAyB,YAAU;AACjC,SAAO,CAAC,WAAW,OAAX,CAAmB,KAAK,IAAxB,CAAR;AACD,CAFD;;;;;;;;;AAWA,IAAI,SAAJ,CAAc,SAAd,GAA0B,YAAU;AAClC,MAAI,QAAQ,KAAK,KAAL,CAAW,KAAvB;;AAEA,WAAS,QAAT,CAAkB,IAAlB,EAAuB;;AAErB,QAAI,KAAK,OAAT,EAAkB,OAAO,KAAK,KAAL,CAAW,KAAX,CAAiB,QAAjB,CAAP;AAClB,WAAO,KAAK,MAAL,IAAgB,KAAK,QAAL,IAAiB,KAAK,QAAL,EAAxC;AACD;;;AAGD,MAAI,CAAC,MAAM,MAAX,EAAmB,OAAO,IAAP;;;AAGnB,MAAI,KAAK,MAAM,MAAf,EAAuB,OAAO,SAAS,MAAM,CAAN,CAAT,CAAP;;;AAGvB,MAAI,KAAK,KAAL,CAAW,KAAX,CAAiB,KAAjB,CAAuB,QAAvB,CAAJ,EAAsC;AACpC,SAAK,IAAI,IAAI,CAAR,EAAW,MAAM,MAAM,MAA5B,EAAoC,IAAI,GAAxC,EAA6C,EAAE,CAA/C,EAAkD;AAChD,UAAI,MAAM,IAAE,CAAR,EAAW,MAAX,IAAqB,MAAM,CAAN,EAAS,MAAlC,EACE,OAAO,KAAP;AACH;AACD,WAAO,IAAP;AACD;;;AAGD,SAAO,KAAP;AACD,CA1BD","file":"tag-compiled.js","sourcesContent":["\n/*!\n * Jade - nodes - Tag\n * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar Attrs = require('./attrs'),\n    Block = require('./block'),\n    inlineTags = require('../inline-tags');\n\n/**\n * Initialize a `Tag` node with the given tag `name` and optional `block`.\n *\n * @param {String} name\n * @param {Block} block\n * @api public\n */\n\nvar Tag = module.exports = function Tag(name, block) {\n  this.name = name;\n  this.attrs = [];\n  this.block = block || new Block;\n};\n\n/**\n * Inherit from `Attrs`.\n */\n\nTag.prototype.__proto__ = Attrs.prototype;\n\n/**\n * Clone this tag.\n *\n * @return {Tag}\n * @api private\n */\n\nTag.prototype.clone = function(){\n  var clone = new Tag(this.name, this.block.clone());\n  clone.line = this.line;\n  clone.attrs = this.attrs;\n  clone.textOnly = this.textOnly;\n  return clone;\n};\n\n/**\n * Check if this tag is an inline tag.\n *\n * @return {Boolean}\n * @api private\n */\n\nTag.prototype.isInline = function(){\n  return ~inlineTags.indexOf(this.name);\n};\n\n/**\n * Check if this tag's contents can be inlined.  Used for pretty printing.\n *\n * @return {Boolean}\n * @api private\n */\n\nTag.prototype.canInline = function(){\n  var nodes = this.block.nodes;\n\n  function isInline(node){\n    // Recurse if the node is a block\n    if (node.isBlock) return node.nodes.every(isInline);\n    return node.isText || (node.isInline && node.isInline());\n  }\n  \n  // Empty tag\n  if (!nodes.length) return true;\n  \n  // Text-only or inline-only tag\n  if (1 == nodes.length) return isInline(nodes[0]);\n  \n  // Multi-line inline-only tag\n  if (this.block.nodes.every(isInline)) {\n    for (var i = 1, len = nodes.length; i < len; ++i) {\n      if (nodes[i-1].isText && nodes[i].isText)\n        return false;\n    }\n    return true;\n  }\n  \n  // Mixed tag\n  return false;\n};"]}