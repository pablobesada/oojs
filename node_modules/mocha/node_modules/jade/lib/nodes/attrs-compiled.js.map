{"version":3,"sources":["attrs.js"],"names":[],"mappings":";;;;;;;;;;;AAWA,IAAI,OAAO,QAAQ,QAAR,CAAX;IACI,QAAQ,QAAQ,SAAR,CADZ;;;;;;;;AASA,IAAI,QAAQ,OAAO,OAAP,GAAiB,SAAS,KAAT,GAAiB;AAC5C,OAAK,KAAL,GAAa,EAAb;AACD,CAFD;;;;;;AAQA,MAAM,SAAN,CAAgB,SAAhB,GAA4B,KAAK,SAAjC;;;;;;;;;;;;;;AAcA,MAAM,SAAN,CAAgB,YAAhB,GAA+B,UAAS,IAAT,EAAe,GAAf,EAAoB,OAApB,EAA4B;AACzD,OAAK,KAAL,CAAW,IAAX,CAAgB,EAAE,MAAM,IAAR,EAAc,KAAK,GAAnB,EAAwB,SAAS,OAAjC,EAAhB;AACA,SAAO,IAAP;AACD,CAHD;;;;;;;;;AAYA,MAAM,SAAN,CAAgB,eAAhB,GAAkC,UAAS,IAAT,EAAc;AAC9C,OAAK,IAAI,IAAI,CAAR,EAAW,MAAM,KAAK,KAAL,CAAW,MAAjC,EAAyC,IAAI,GAA7C,EAAkD,EAAE,CAApD,EAAuD;AACrD,QAAI,KAAK,KAAL,CAAW,CAAX,KAAiB,KAAK,KAAL,CAAW,CAAX,EAAc,IAAd,IAAsB,IAA3C,EAAiD;AAC/C,aAAO,KAAK,KAAL,CAAW,CAAX,CAAP;AACD;AACF;AACF,CAND;;;;;;;;;;AAgBA,MAAM,SAAN,CAAgB,YAAhB,GAA+B,UAAS,IAAT,EAAc;AAC3C,OAAK,IAAI,IAAI,CAAR,EAAW,MAAM,KAAK,KAAL,CAAW,MAAjC,EAAyC,IAAI,GAA7C,EAAkD,EAAE,CAApD,EAAuD;AACrD,QAAI,KAAK,KAAL,CAAW,CAAX,KAAiB,KAAK,KAAL,CAAW,CAAX,EAAc,IAAd,IAAsB,IAA3C,EAAiD;AAC/C,aAAO,KAAK,KAAL,CAAW,CAAX,EAAc,GAArB;AACD;AACF;AACF,CAND","file":"attrs-compiled.js","sourcesContent":["\n/*!\n * Jade - nodes - Attrs\n * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar Node = require('./node'),\n    Block = require('./block');\n\n/**\n * Initialize a `Attrs` node.\n *\n * @api public\n */\n\nvar Attrs = module.exports = function Attrs() {\n  this.attrs = [];\n};\n\n/**\n * Inherit from `Node`.\n */\n\nAttrs.prototype.__proto__ = Node.prototype;\n\n/**\n * Set attribute `name` to `val`, keep in mind these become\n * part of a raw js object literal, so to quote a value you must\n * '\"quote me\"', otherwise or example 'user.name' is literal JavaScript.\n *\n * @param {String} name\n * @param {String} val\n * @param {Boolean} escaped\n * @return {Tag} for chaining\n * @api public\n */\n\nAttrs.prototype.setAttribute = function(name, val, escaped){\n  this.attrs.push({ name: name, val: val, escaped: escaped });\n  return this;\n};\n\n/**\n * Remove attribute `name` when present.\n *\n * @param {String} name\n * @api public\n */\n\nAttrs.prototype.removeAttribute = function(name){\n  for (var i = 0, len = this.attrs.length; i < len; ++i) {\n    if (this.attrs[i] && this.attrs[i].name == name) {\n      delete this.attrs[i];\n    }\n  }\n};\n\n/**\n * Get attribute value by `name`.\n *\n * @param {String} name\n * @return {String}\n * @api public\n */\n\nAttrs.prototype.getAttribute = function(name){\n  for (var i = 0, len = this.attrs.length; i < len; ++i) {\n    if (this.attrs[i] && this.attrs[i].name == name) {\n      return this.attrs[i].val;\n    }\n  }\n};\n"]}