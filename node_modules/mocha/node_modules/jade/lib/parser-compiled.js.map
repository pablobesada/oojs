{"version":3,"sources":["parser.js"],"names":[],"mappings":"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","file":"parser-compiled.js","sourcesContent":["\n/*!\n * Jade - Parser\n * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar Lexer = require('./lexer')\n  , nodes = require('./nodes');\n\n/**\n * Initialize `Parser` with the given input `str` and `filename`.\n *\n * @param {String} str\n * @param {String} filename\n * @param {Object} options\n * @api public\n */\n\nvar Parser = exports = module.exports = function Parser(str, filename, options){\n  this.input = str;\n  this.lexer = new Lexer(str, options);\n  this.filename = filename;\n  this.blocks = {};\n  this.mixins = {};\n  this.options = options;\n  this.contexts = [this];\n};\n\n/**\n * Tags that may not contain tags.\n */\n\nvar textOnly = exports.textOnly = ['script', 'style'];\n\n/**\n * Parser prototype.\n */\n\nParser.prototype = {\n\n  /**\n   * Push `parser` onto the context stack,\n   * or pop and return a `Parser`.\n   */\n\n  context: function(parser){\n    if (parser) {\n      this.contexts.push(parser);\n    } else {\n      return this.contexts.pop();\n    }\n  },\n\n  /**\n   * Return the next token object.\n   *\n   * @return {Object}\n   * @api private\n   */\n\n  advance: function(){\n    return this.lexer.advance();\n  },\n\n  /**\n   * Skip `n` tokens.\n   *\n   * @param {Number} n\n   * @api private\n   */\n\n  skip: function(n){\n    while (n--) this.advance();\n  },\n  \n  /**\n   * Single token lookahead.\n   *\n   * @return {Object}\n   * @api private\n   */\n  \n  peek: function() {\n    return this.lookahead(1);\n  },\n  \n  /**\n   * Return lexer lineno.\n   *\n   * @return {Number}\n   * @api private\n   */\n  \n  line: function() {\n    return this.lexer.lineno;\n  },\n  \n  /**\n   * `n` token lookahead.\n   *\n   * @param {Number} n\n   * @return {Object}\n   * @api private\n   */\n  \n  lookahead: function(n){\n    return this.lexer.lookahead(n);\n  },\n  \n  /**\n   * Parse input returning a string of js for evaluation.\n   *\n   * @return {String}\n   * @api public\n   */\n  \n  parse: function(){\n    var block = new nodes.Block, parser;\n    block.line = this.line();\n\n    while ('eos' != this.peek().type) {\n      if ('newline' == this.peek().type) {\n        this.advance();\n      } else {\n        block.push(this.parseExpr());\n      }\n    }\n\n    if (parser = this.extending) {\n      this.context(parser);\n      var ast = parser.parse();\n      this.context();\n      // hoist mixins\n      for (var name in this.mixins)\n        ast.unshift(this.mixins[name]);\n      return ast;\n    }\n\n    return block;\n  },\n  \n  /**\n   * Expect the given type, or throw an exception.\n   *\n   * @param {String} type\n   * @api private\n   */\n  \n  expect: function(type){\n    if (this.peek().type === type) {\n      return this.advance();\n    } else {\n      throw new Error('expected \"' + type + '\", but got \"' + this.peek().type + '\"');\n    }\n  },\n  \n  /**\n   * Accept the given `type`.\n   *\n   * @param {String} type\n   * @api private\n   */\n  \n  accept: function(type){\n    if (this.peek().type === type) {\n      return this.advance();\n    }\n  },\n  \n  /**\n   *   tag\n   * | doctype\n   * | mixin\n   * | include\n   * | filter\n   * | comment\n   * | text\n   * | each\n   * | code\n   * | yield\n   * | id\n   * | class\n   * | interpolation\n   */\n  \n  parseExpr: function(){\n    switch (this.peek().type) {\n      case 'tag':\n        return this.parseTag();\n      case 'mixin':\n        return this.parseMixin();\n      case 'block':\n        return this.parseBlock();\n      case 'case':\n        return this.parseCase();\n      case 'when':\n        return this.parseWhen();\n      case 'default':\n        return this.parseDefault();\n      case 'extends':\n        return this.parseExtends();\n      case 'include':\n        return this.parseInclude();\n      case 'doctype':\n        return this.parseDoctype();\n      case 'filter':\n        return this.parseFilter();\n      case 'comment':\n        return this.parseComment();\n      case 'text':\n        return this.parseText();\n      case 'each':\n        return this.parseEach();\n      case 'code':\n        return this.parseCode();\n      case 'call':\n        return this.parseCall();\n      case 'interpolation':\n        return this.parseInterpolation();\n      case 'yield':\n        this.advance();\n        var block = new nodes.Block;\n        block.yield = true;\n        return block;\n      case 'id':\n      case 'class':\n        var tok = this.advance();\n        this.lexer.defer(this.lexer.tok('tag', 'div'));\n        this.lexer.defer(tok);\n        return this.parseExpr();\n      default:\n        throw new Error('unexpected token \"' + this.peek().type + '\"');\n    }\n  },\n  \n  /**\n   * Text\n   */\n  \n  parseText: function(){\n    var tok = this.expect('text')\n      , node = new nodes.Text(tok.val);\n    node.line = this.line();\n    return node;\n  },\n\n  /**\n   *   ':' expr\n   * | block\n   */\n\n  parseBlockExpansion: function(){\n    if (':' == this.peek().type) {\n      this.advance();\n      return new nodes.Block(this.parseExpr());\n    } else {\n      return this.block();\n    }\n  },\n\n  /**\n   * case\n   */\n\n  parseCase: function(){\n    var val = this.expect('case').val\n      , node = new nodes.Case(val);\n    node.line = this.line();\n    node.block = this.block();\n    return node;\n  },\n\n  /**\n   * when\n   */\n\n  parseWhen: function(){\n    var val = this.expect('when').val\n    return new nodes.Case.When(val, this.parseBlockExpansion());\n  },\n  \n  /**\n   * default\n   */\n\n  parseDefault: function(){\n    this.expect('default');\n    return new nodes.Case.When('default', this.parseBlockExpansion());\n  },\n\n  /**\n   * code\n   */\n  \n  parseCode: function(){\n    var tok = this.expect('code')\n      , node = new nodes.Code(tok.val, tok.buffer, tok.escape)\n      , block\n      , i = 1;\n    node.line = this.line();\n    while (this.lookahead(i) && 'newline' == this.lookahead(i).type) ++i;\n    block = 'indent' == this.lookahead(i).type;\n    if (block) {\n      this.skip(i-1);\n      node.block = this.block();\n    }\n    return node;\n  },\n  \n  /**\n   * comment\n   */\n  \n  parseComment: function(){\n    var tok = this.expect('comment')\n      , node;\n\n    if ('indent' == this.peek().type) {\n      node = new nodes.BlockComment(tok.val, this.block(), tok.buffer);\n    } else {\n      node = new nodes.Comment(tok.val, tok.buffer);\n    }\n\n    node.line = this.line();\n    return node;\n  },\n  \n  /**\n   * doctype\n   */\n  \n  parseDoctype: function(){\n    var tok = this.expect('doctype')\n      , node = new nodes.Doctype(tok.val);\n    node.line = this.line();\n    return node;\n  },\n  \n  /**\n   * filter attrs? text-block\n   */\n  \n  parseFilter: function(){\n    var block\n      , tok = this.expect('filter')\n      , attrs = this.accept('attrs');\n\n    this.lexer.pipeless = true;\n    block = this.parseTextBlock();\n    this.lexer.pipeless = false;\n\n    var node = new nodes.Filter(tok.val, block, attrs && attrs.attrs);\n    node.line = this.line();\n    return node;\n  },\n  \n  /**\n   * tag ':' attrs? block\n   */\n  \n  parseASTFilter: function(){\n    var block\n      , tok = this.expect('tag')\n      , attrs = this.accept('attrs');\n\n    this.expect(':');\n    block = this.block();\n\n    var node = new nodes.Filter(tok.val, block, attrs && attrs.attrs);\n    node.line = this.line();\n    return node;\n  },\n  \n  /**\n   * each block\n   */\n  \n  parseEach: function(){\n    var tok = this.expect('each')\n      , node = new nodes.Each(tok.code, tok.val, tok.key);\n    node.line = this.line();\n    node.block = this.block();\n    return node;\n  },\n\n  /**\n   * 'extends' name\n   */\n\n  parseExtends: function(){\n    var path = require('path')\n      , fs = require('fs')\n      , dirname = path.dirname\n      , basename = path.basename\n      , join = path.join;\n\n    if (!this.filename)\n      throw new Error('the \"filename\" option is required to extend templates');\n\n    var path = this.expect('extends').val.trim()\n      , dir = dirname(this.filename);\n\n    var path = join(dir, path + '.jade')\n      , str = fs.readFileSync(path, 'utf8')\n      , parser = new Parser(str, path, this.options);\n\n    parser.blocks = this.blocks;\n    parser.contexts = this.contexts;\n    this.extending = parser;\n\n    // TODO: null node\n    return new nodes.Literal('');\n  },\n\n  /**\n   * 'block' name block\n   */\n\n  parseBlock: function(){\n    var block = this.expect('block')\n      , mode = block.mode\n      , name = block.val.trim();\n\n    block = 'indent' == this.peek().type\n      ? this.block()\n      : new nodes.Block(new nodes.Literal(''));\n\n    var prev = this.blocks[name];\n\n    if (prev) {\n      switch (prev.mode) {\n        case 'append':\n          block.nodes = block.nodes.concat(prev.nodes);\n          prev = block;\n          break;\n        case 'prepend':\n          block.nodes = prev.nodes.concat(block.nodes);\n          prev = block;\n          break;\n      }\n    }\n\n    block.mode = mode;\n    return this.blocks[name] = prev || block;\n  },\n\n  /**\n   * include block?\n   */\n\n  parseInclude: function(){\n    var path = require('path')\n      , fs = require('fs')\n      , dirname = path.dirname\n      , basename = path.basename\n      , join = path.join;\n\n    var path = this.expect('include').val.trim()\n      , dir = dirname(this.filename);\n\n    if (!this.filename)\n      throw new Error('the \"filename\" option is required to use includes');\n\n    // no extension\n    if (!~basename(path).indexOf('.')) {\n      path += '.jade';\n    }\n\n    // non-jade\n    if ('.jade' != path.substr(-5)) {\n      var path = join(dir, path)\n        , str = fs.readFileSync(path, 'utf8');\n      return new nodes.Literal(str);\n    }\n\n    var path = join(dir, path)\n      , str = fs.readFileSync(path, 'utf8')\n     , parser = new Parser(str, path, this.options);\n    parser.blocks = this.blocks;\n    parser.mixins = this.mixins;\n\n    this.context(parser);\n    var ast = parser.parse();\n    this.context();\n    ast.filename = path;\n\n    if ('indent' == this.peek().type) {\n      ast.includeBlock().push(this.block());\n    }\n\n    return ast;\n  },\n\n  /**\n   * call ident block\n   */\n\n  parseCall: function(){\n    var tok = this.expect('call')\n      , name = tok.val\n      , args = tok.args\n      , mixin = new nodes.Mixin(name, args, new nodes.Block, true);\n\n    this.tag(mixin);\n    if (mixin.block.isEmpty()) mixin.block = null;\n    return mixin;\n  },\n\n  /**\n   * mixin block\n   */\n\n  parseMixin: function(){\n    var tok = this.expect('mixin')\n      , name = tok.val\n      , args = tok.args\n      , mixin;\n\n    // definition\n    if ('indent' == this.peek().type) {\n      mixin = new nodes.Mixin(name, args, this.block(), false);\n      this.mixins[name] = mixin;\n      return mixin;\n    // call\n    } else {\n      return new nodes.Mixin(name, args, null, true);\n    }\n  },\n\n  /**\n   * indent (text | newline)* outdent\n   */\n\n  parseTextBlock: function(){\n    var block = new nodes.Block;\n    block.line = this.line();\n    var spaces = this.expect('indent').val;\n    if (null == this._spaces) this._spaces = spaces;\n    var indent = Array(spaces - this._spaces + 1).join(' ');\n    while ('outdent' != this.peek().type) {\n      switch (this.peek().type) {\n        case 'newline':\n          this.advance();\n          break;\n        case 'indent':\n          this.parseTextBlock().nodes.forEach(function(node){\n            block.push(node);\n          });\n          break;\n        default:\n          var text = new nodes.Text(indent + this.advance().val);\n          text.line = this.line();\n          block.push(text);\n      }\n    }\n\n    if (spaces == this._spaces) this._spaces = null;\n    this.expect('outdent');\n    return block;\n  },\n\n  /**\n   * indent expr* outdent\n   */\n  \n  block: function(){\n    var block = new nodes.Block;\n    block.line = this.line();\n    this.expect('indent');\n    while ('outdent' != this.peek().type) {\n      if ('newline' == this.peek().type) {\n        this.advance();\n      } else {\n        block.push(this.parseExpr());\n      }\n    }\n    this.expect('outdent');\n    return block;\n  },\n\n  /**\n   * interpolation (attrs | class | id)* (text | code | ':')? newline* block?\n   */\n  \n  parseInterpolation: function(){\n    var tok = this.advance();\n    var tag = new nodes.Tag(tok.val);\n    tag.buffer = true;\n    return this.tag(tag);\n  },\n\n  /**\n   * tag (attrs | class | id)* (text | code | ':')? newline* block?\n   */\n  \n  parseTag: function(){\n    // ast-filter look-ahead\n    var i = 2;\n    if ('attrs' == this.lookahead(i).type) ++i;\n    if (':' == this.lookahead(i).type) {\n      if ('indent' == this.lookahead(++i).type) {\n        return this.parseASTFilter();\n      }\n    }\n\n    var tok = this.advance()\n      , tag = new nodes.Tag(tok.val);\n\n    tag.selfClosing = tok.selfClosing;\n\n    return this.tag(tag);\n  },\n\n  /**\n   * Parse tag.\n   */\n\n  tag: function(tag){\n    var dot;\n\n    tag.line = this.line();\n\n    // (attrs | class | id)*\n    out:\n      while (true) {\n        switch (this.peek().type) {\n          case 'id':\n          case 'class':\n            var tok = this.advance();\n            tag.setAttribute(tok.type, \"'\" + tok.val + \"'\");\n            continue;\n          case 'attrs':\n            var tok = this.advance()\n              , obj = tok.attrs\n              , escaped = tok.escaped\n              , names = Object.keys(obj);\n\n            if (tok.selfClosing) tag.selfClosing = true;\n\n            for (var i = 0, len = names.length; i < len; ++i) {\n              var name = names[i]\n                , val = obj[name];\n              tag.setAttribute(name, val, escaped[name]);\n            }\n            continue;\n          default:\n            break out;\n        }\n      }\n\n    // check immediate '.'\n    if ('.' == this.peek().val) {\n      dot = tag.textOnly = true;\n      this.advance();\n    }\n\n    // (text | code | ':')?\n    switch (this.peek().type) {\n      case 'text':\n        tag.block.push(this.parseText());\n        break;\n      case 'code':\n        tag.code = this.parseCode();\n        break;\n      case ':':\n        this.advance();\n        tag.block = new nodes.Block;\n        tag.block.push(this.parseExpr());\n        break;\n    }\n\n    // newline*\n    while ('newline' == this.peek().type) this.advance();\n\n    tag.textOnly = tag.textOnly || ~textOnly.indexOf(tag.name);\n\n    // script special-case\n    if ('script' == tag.name) {\n      var type = tag.getAttribute('type');\n      if (!dot && type && 'text/javascript' != type.replace(/^['\"]|['\"]$/g, '')) {\n        tag.textOnly = false;\n      }\n    }\n\n    // block?\n    if ('indent' == this.peek().type) {\n      if (tag.textOnly) {\n        this.lexer.pipeless = true;\n        tag.block = this.parseTextBlock();\n        this.lexer.pipeless = false;\n      } else {\n        var block = this.block();\n        if (tag.block) {\n          for (var i = 0, len = block.nodes.length; i < len; ++i) {\n            tag.block.push(block.nodes[i]);\n          }\n        } else {\n          tag.block = block;\n        }\n      }\n    }\n    \n    return tag;\n  }\n};\n"]}