{"version":3,"sources":["test.js"],"names":[],"mappings":";;AAEA,IAAI,SAAS,QAAQ,QAAR,CAAb;;AAEA,IAAI,SAAS,QAAQ,KAAR,CAAb;;AAEA,GAAG,uBAAH,EAA4B,YAAW;AACrC,SAAO,KAAP,CAAa,OAAO,EAAP,CAAb,EAAyB,IAAzB;AACA,SAAO,KAAP,CAAa,OAAO,MAAP,CAAb,EAA6B,UAA7B;AACA,SAAO,KAAP,CAAa,OAAO,CAAC,CAAR,CAAb,EAAyB,IAAzB;AACA,SAAO,KAAP,CAAa,OAAO,QAAP,CAAb,EAA+B,UAA/B;AACA,SAAO,KAAP,CAAa,OAAO,CAAC,QAAR,CAAb,EAAgC,WAAhC;AACA,SAAO,KAAP,CAAa,OAAO,GAAP,CAAb,EAA0B,KAA1B;AACD,CAPD;;AASA,GAAG,yBAAH,EAA8B,YAAW;AACvC,SAAO,KAAP,CAAa,OAAO,SAAP,CAAb,EAAgC,WAAhC;AACA,SAAO,KAAP,CAAa,OAAO,KAAK,CAAZ,CAAb,EAA6B,WAA7B;AACD,CAHD;;AAKA,GAAG,oBAAH,EAAyB,YAAW;AAClC,SAAO,KAAP,CAAa,OAAO,IAAP,CAAb,EAA2B,MAA3B;AACD,CAFD;;AAIA,GAAG,sBAAH,EAA2B,YAAW;AACpC,SAAO,KAAP,CAAa,OAAO,KAAP,CAAb,EAA4B,OAA5B;AACA,SAAO,KAAP,CAAa,OAAO,UAAP,CAAb,EAAiC,cAAjC;AACD,CAHD;;AAKA,GAAG,uBAAH,EAA4B,YAAW;AACrC,SAAO,KAAP,CAAa,OAAO,IAAP,CAAb,EAA2B,MAA3B;AACA,SAAO,KAAP,CAAa,OAAO,KAAP,CAAb,EAA4B,OAA5B;AACD,CAHD;;AAKA,GAAG,uBAAH,EAA4B,YAAW;AACrC,MAAG,OAAO,MAAP,IAAiB,WAAjB,IAAgC,OAAO,GAA1C,EAA+C;AAC7C,WAAO,KAAP,CAAa,OAAO,OAAO,GAAP,CAAW,eAAX,CAAP,CAAb,EAAkD,uBAAlD;AACD;AACF,CAJD;;AAMA,GAAG,kCAAH,EAAuC,YAAW;AAChD,SAAO,KAAP,CAAa,OAAO,IAAI,MAAJ,CAAW,EAAX,CAAP,CAAb,EAAqC,mCAArC;AACA,SAAO,KAAP,CAAa,OAAO,IAAI,OAAJ,CAAY,IAAZ,CAAP,CAAb,EAAwC,sCAAxC;AACA,SAAO,KAAP,CAAa,OAAO,IAAI,MAAJ,CAAW,KAAX,CAAP,CAAb,EAAwC,wCAAxC;AACD,CAJD;;AAMA,GAAG,4CAAH,EAAiD,YAAW;AAC1D,MAAI,IAAI,IAAI,OAAJ,CAAY,IAAZ,CAAR;AACA,IAAE,GAAF,GAAQ,EAAR;AACA,SAAO,KAAP,CAAa,OAAO,CAAP,CAAb,EAAwB,+CAAxB;;AAEA,MAAI,IAAI,IAAI,MAAJ,CAAW,KAAX,CAAR;AACA,IAAE,GAAF,GAAQ,EAAR;AACA,SAAO,KAAP,CAAa,OAAO,CAAP,CAAb,EAAwB,iDAAxB;AACD,CARD;;AAUA,GAAG,qBAAH,EAA0B,YAAW;AACnC,SAAO,KAAP,CAAa,OAAO,OAAP,CAAb,EAA8B,SAA9B;AACA,SAAO,KAAP,CAAa,OAAO,IAAI,MAAJ,CAAW,KAAX,EAAkB,IAAlB,CAAP,CAAb,EAA8C,SAA9C;AACD,CAHD;;AAKA,GAAG,+BAAH,EAAoC,YAAW;AAC7C,MAAI,IAAI,OAAR;AACA,IAAE,GAAF,GAAQ,EAAR;AACA,SAAO,KAAP,CAAa,OAAO,CAAP,CAAb,EAAwB,4BAAxB;AACD,CAJD;;AAMA,SAAS,GAAT,GAAe,CACd;;AAED,GAAG,wBAAH,EAA6B,YAAW;AACtC,MAAI,IAAI,YAAW,CAClB,CADD;AAEA,SAAO,KAAP,CAAa,OAAO,CAAP,CAAb,EAAwB,yBAAxB;;AAEA,SAAO,KAAP,CAAa,OAAO,GAAP,CAAb,EAA0B,4BAA1B;;;AAGD,CARD;;AAUA,IAAI,SAAS,OAAO,MAAP,CAAc,IAAd,EAAoB;AAC/B,KAAG;AACD,SAAK,YAAW;AACd,aAAO,KAAP;AACD;AAHA;AAD4B,CAApB,CAAb;AAOA,IAAI,SAAS,OAAO,MAAP,CAAc,IAAd,EAAoB;AAC/B,KAAG;AACD,SAAK,YAAW,CACf;AAFA;AAD4B,CAApB,CAAb;AAMA,IAAI,kBAAkB,OAAO,MAAP,CAAc,IAAd,EAAoB;AACxC,KAAG;AACD,SAAK,YAAW;AACd,aAAO,KAAP;AACD,KAHA;AAID,SAAK,YAAW,CACf;AALA;AADqC,CAApB,CAAtB;;AAUA,GAAG,sBAAH,EAA2B,YAAW;AACpC,SAAO,KAAP,CAAa,OAAO,EAAC,GAAG,EAAJ,EAAQ,GAAG,IAAX,EAAiB,OAAO,KAAxB,EAAP,CAAb,EAAqD,yCAArD;;AAEA,SAAO,KAAP,CAAa,OAAO,MAAP,EAAe,EAAC,MAAM,KAAP,EAAf,CAAb,EAA4C,iBAA5C;AACA,SAAO,KAAP,CAAa,OAAO,MAAP,EAAe,EAAC,MAAM,KAAP,EAAf,CAAb,EAA4C,iBAA5C;AACA,SAAO,KAAP,CAAa,OAAO,eAAP,EAAwB,EAAC,MAAM,KAAP,EAAxB,CAAb,EAAqD,wBAArD;;AAEA,MAAI,MAAM,EAAC,GAAG,EAAJ,EAAV;AACA,MAAI,CAAJ,GAAQ,GAAR;AACA,SAAO,KAAP,CAAa,OAAO,GAAP,CAAb,EAA0B,iCAA1B;;AAEA,MAAI,IAAI;AACN,UAAM,CADA;AAEN,YAAQ,CAFF;AAGN,cAAU,CAHJ;AAIN,gBAAY;AAJN,GAAR;;AAOA,MAAI,IAAI,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAR;AACA,IAAE,QAAF,IAAc,GAAd;;AAEA,SAAO,EAAP,CAAU,OAAO,CAAP,CAAV,EACE,mEADF;AAEA,SAAO,EAAP,CAAU,OAAO,CAAP,CAAV,EAAqB,4CAArB;AACD,CAxBD;;AA0BA,GAAG,yBAAH,EAA8B,YAAW;AACvC,MAAI,IAAI,YAAW;AACjB,WAAO,SAAP;AACD,GAFD;AAGA,SAAO,KAAP,CAAa,OAAO,EAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,CAAP,CAAb,EAAiC,uBAAjC;AACD,CALD;;AAOA,GAAG,sBAAH,EAA2B,YAAW;AACpC,SAAO,KAAP,CAAa,OAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,KAAP,CAAP,CAAb,EAAoC,yBAApC;AACD,CAFD;;AAIA,GAAG,2BAAH,EAAgC,YAAW;AACzC,MAAG,OAAO,MAAP,KAAkB,WAArB,EAAkC;AAChC,QAAI,IAAI,IAAI,MAAJ,CAAW,KAAX,CAAR;AACA,WAAO,KAAP,CAAa,OAAO,CAAP,CAAb,EAAwB,uBAAxB;AACD;AACF,CALD;;AAOA,GAAG,4BAAH,EAAiC,YAAW;AAC1C,MAAG,OAAO,WAAP,IAAsB,WAAzB,EAAsC;AACpC,QAAI,SAAS,IAAI,WAAJ,CAAgB,CAAhB,CAAb;AACA,SAAI,IAAI,IAAI,CAAZ,EAAe,IAAI,OAAO,UAA1B,EAAsC,GAAtC,EAA2C,OAAO,CAAP,IAAY,IAAZ;AAC3C,WAAO,CAAP,IAAY,IAAZ;AACA,WAAO,CAAP,IAAY,GAAZ;AACA,WAAO,KAAP,CAAa,OAAO,MAAP,CAAb,EAA6B,gDAA7B;;AAEA,QAAI,OAAO,IAAI,SAAJ,CAAc,CAAd,CAAX;AACA,SAAK,CAAL,IAAU,IAAV;AACA,SAAK,CAAL,IAAU,GAAV;AACA,WAAO,KAAP,CAAa,OAAO,IAAP,CAAb,EAA2B,0BAA3B;;AAEA,QAAI,QAAQ,IAAI,UAAJ,CAAe,CAAf,CAAZ;AACA,UAAM,CAAN,IAAW,KAAX;AACA,UAAM,CAAN,IAAW,GAAX;AACA,WAAO,KAAP,CAAa,OAAO,KAAP,CAAb,EAA4B,iCAA5B;;;;AAID;AACF,CArBD;;AAuBA,GAAG,6BAAH,EAAkC,YAAW;AAC3C,MAAG,OAAO,MAAP,IAAiB,WAAjB,IAAgC,OAAO,QAAP,IAAmB,WAAtD,EAAmE;AACjE,QAAI,MAAM,SAAS,aAAT,CAAuB,QAAvB,CAAV;AACA,QAAI,IAAI,SAAS,cAAT,CAAwB,UAAxB,CAAR;AACA,QAAI,WAAJ,CAAgB,CAAhB;;AAEA,WAAO,KAAP,CAAa,OAAO,GAAP,CAAb,EAA0B,2BAA1B;;AAEA,WAAO,KAAP,CAAa,OAAO,CAAP,CAAb,EAAwB,UAAxB;AACD;AACF,CAVD;;AAYA,GAAG,yBAAH,EAA8B,YAAW;AACvC,SAAO,KAAP,CAAa,OAAO,EAAE,GAAG,EAAE,GAAG,KAAL,EAAL,EAAmB,GAAG,KAAtB,EAAP,EAAqC,EAAE,eAAe,CAAjB,EAArC,CAAb,EAAyE,gEAAzE;AACD,CAFD;;AAIA,GAAG,mBAAH,EAAwB,YAAW;AACjC,MAAG,OAAO,GAAP,KAAe,WAAlB,EAA+B;AAC7B,WAAO,KAAP,CAAa,OAAO,IAAI,GAAJ,CAAQ,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAE,GAAG,EAAL,EAAP,EAAiB,KAAjB,CAAR,CAAP,CAAb,EACE,yCADF;AAEA,WAAO,KAAP,CAAa,OAAO,IAAI,GAAJ,CAAQ,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAE,GAAG,EAAL,EAAP,EAAiB,KAAjB,CAAR,CAAP,EAAyC,EAAE,eAAe,CAAjB,EAAzC,CAAb,EACE,8DADF;AAED;AACF,CAPD;;AASA,GAAG,mBAAH,EAAwB,YAAW;AACjC,MAAG,OAAO,GAAP,KAAe,WAAlB,EAA+B;AAC7B,WAAO,KAAP,CAAa,OAAO,IAAI,GAAJ,CAAQ,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAAS,CAAC,CAAD,EAAI,KAAJ,CAAT,EAAqB,CAAC,EAAE,GAAG,EAAL,EAAD,EAAW,IAAI,GAAJ,EAAX,CAArB,EAA4C,CAAC,KAAD,EAAQ,IAAR,CAA5C,CAAR,CAAP,CAAb,EACE,2EADF;AAEA,WAAO,KAAP,CAAa,OAAO,IAAI,GAAJ,CAAQ,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAAS,CAAC,CAAD,EAAI,KAAJ,CAAT,EAAqB,CAAC,EAAE,GAAG,EAAL,EAAD,EAAW,IAAI,GAAJ,EAAX,CAArB,EAA4C,CAAC,KAAD,EAAQ,IAAR,CAA5C,CAAR,CAAP,EAA4E,EAAE,eAAe,EAAjB,EAA5E,CAAb,EACE,8FADF;AAED;AACF,CAPD","file":"test-compiled.js","sourcesContent":["/*eslint-env mocha*/\n\nvar assert = require('assert');\n\nvar format = require('../');\n\nit('should format numbers', function() {\n  assert.equal(format(10), '10');\n  assert.equal(format(0.1e-5), '0.000001');\n  assert.equal(format(-0), '-0');\n  assert.equal(format(Infinity), 'Infinity');\n  assert.equal(format(-Infinity), '-Infinity');\n  assert.equal(format(NaN), 'NaN');\n});\n\nit('should format undefined', function() {\n  assert.equal(format(undefined), 'undefined');\n  assert.equal(format(void 0), 'undefined');\n});\n\nit('should format null', function() {\n  assert.equal(format(null), 'null');\n});\n\nit('should format string', function() {\n  assert.equal(format('abc'), \"'abc'\");\n  assert.equal(format('abc\" \\' '), \"'abc\\\" \\\\' '\");\n});\n\nit('should format boolean', function() {\n  assert.equal(format(true), 'true');\n  assert.equal(format(false), 'false');\n});\n\nit('should format Symbols', function() {\n  if(typeof Symbol != 'undefined' && Symbol.for) {\n    assert.equal(format(Symbol.for('react.element')), 'Symbol(react.element)')\n  }\n})\n\nit('should format primitive wrappers', function() {\n  assert.equal(format(new Number(10)), 'Number { [[PrimitiveValue]]: 10 }');\n  assert.equal(format(new Boolean(true)), 'Boolean { [[PrimitiveValue]]: true }');\n  assert.equal(format(new String('abc')), 'String { [[PrimitiveValue]]: \\'abc\\' }');\n});\n\nit('should format primitive wrappers with keys', function() {\n  var b = new Boolean(true);\n  b.abc = 10;\n  assert.equal(format(b), 'Boolean { abc: 10, [[PrimitiveValue]]: true }');\n\n  var s = new String('abc');\n  s.abc = 10;\n  assert.equal(format(s), 'String { abc: 10, [[PrimitiveValue]]: \\'abc\\' }');\n});\n\nit('should format regex', function() {\n  assert.equal(format(/abc/gi), '/abc/gi');\n  assert.equal(format(new RegExp('abc', 'gi')), '/abc/gi');\n});\n\nit('should format regex with keys', function() {\n  var r = /abc/gi;\n  r.abc = 10;\n  assert.equal(format(r), 'RegExp { /abc/gi abc: 10 }');\n});\n\nfunction fff() {\n}\n\nit('should format function', function() {\n  var f = function() {\n  };\n  assert.equal(format(f), 'Function { name: \\'\\' }');\n\n  assert.equal(format(fff), 'Function { name: \\'fff\\' }');\n\n  //TODO add test for arrow function\n});\n\nvar getter = Object.create(null, {\n  a: {\n    get: function() {\n      return 'aaa';\n    }\n  }\n});\nvar setter = Object.create(null, {\n  b: {\n    set: function() {\n    }\n  }\n});\nvar getterAndSetter = Object.create(null, {\n  c: {\n    get: function() {\n      return 'ccc';\n    },\n    set: function() {\n    }\n  }\n});\n\nit('should format object', function() {\n  assert.equal(format({a: 10, b: '10', '123': 'asd'}), \"Object { '123': 'asd', a: 10, b: '10' }\");\n\n  assert.equal(format(getter, {keys: false}), '{ a: [Getter] }');\n  assert.equal(format(setter, {keys: false}), '{ b: [Setter] }');\n  assert.equal(format(getterAndSetter, {keys: false}), '{ c: [Getter/Setter] }');\n\n  var obj = {a: 10};\n  obj.b = obj;\n  assert.equal(format(obj), 'Object { a: 10, b: [Circular] }');\n\n  var w = {\n    '\\\\': 1,\n    '\\\\\\\\': 2,\n    '\\\\\\\\\\\\': 3,\n    '\\\\\\\\\\\\\\\\': 4\n  };\n\n  var y = ['a', 'b', 'c'];\n  y['\\\\\\\\\\\\'] = 'd';\n\n  assert.ok(format(w),\n    'Object { \\'\\\\\\': 1, \\'\\\\\\\\\\': 2, \\'\\\\\\\\\\\\\\': 3, \\'\\\\\\\\\\\\\\\\\\': 4 }');\n  assert.ok(format(y), '[ \\'a\\', \\'b\\', \\'c\\', \\'\\\\\\\\\\\\\\': \\'d\\' ]');\n});\n\nit('should format arguments', function() {\n  var f = function() {\n    return arguments;\n  };\n  assert.equal(format(f(1, 2, 3)), 'Arguments [ 1, 2, 3 ]');\n});\n\nit('should format arrays', function() {\n  assert.equal(format([1, 2, 'abc']), 'Array [ 1, 2, \\'abc\\' ]');\n});\n\nit('should format node buffer', function() {\n  if(typeof Buffer !== 'undefined') {\n    var b = new Buffer('abc');\n    assert.equal(format(b), 'Buffer [ 61, 62, 63 ]');\n  }\n});\n\nit('should format typed arrays', function() {\n  if(typeof ArrayBuffer != 'undefined') {\n    var buffer = new ArrayBuffer(8);\n    for(var i = 0; i < buffer.byteLength; i++) buffer[i] = 0x00;\n    buffer[1] = 0x20;\n    buffer[2] = 0x2;\n    assert.equal(format(buffer), 'ArrayBuffer [ 00, 20, 02, 00, 00, 00, 00, 00 ]');\n\n    var int8 = new Int8Array(3);\n    int8[0] = 0x20;\n    int8[1] = 0x2;\n    assert.equal(format(int8), 'Int8Array [ 20, 02, 00 ]');\n\n    var int16 = new Int16Array(3);\n    int16[0] = 0x201;\n    int16[1] = 0x2;\n    assert.equal(format(int16), 'Int16Array [ 0201, 0002, 0000 ]');\n\n    //var dataView = new DataView(buffer);\n    //assert.equal(format(dataView), '[DataView: 00 20 02 00 00 00 00 00]');\n  }\n});\n\nit('should format html elements', function() {\n  if(typeof window != 'undefined' && typeof document != 'undefined') {\n    var btn = document.createElement(\"BUTTON\");\n    var t = document.createTextNode(\"CLICK ME\");\n    btn.appendChild(t);\n\n    assert.equal(format(btn), '<button>CLICK ME</button>');\n\n    assert.equal(format(t), 'CLICK ME');\n  }\n});\n\nit('should correctly indent', function() {\n  assert.equal(format({ a: { b: 'abc' }, d: 'abc'}, { maxLineLength: 0 }), 'Object {\\n  a: Object {\\n    b: \\'abc\\'\\n  },\\n  d: \\'abc\\'\\n}');\n});\n\nit('should format set', function() {\n  if(typeof Set !== 'undefined') {\n    assert.equal(format(new Set([1, 2, { a: 10}, 'abc'])),\n      'Set { 1, 2, Object { a: 10 }, \\'abc\\' }');\n    assert.equal(format(new Set([1, 2, { a: 10}, 'abc']), { maxLineLength: 0 }),\n      'Set {\\n  1,\\n  2,\\n  Object {\\n    a: 10\\n  },\\n  \\'abc\\'\\n}');\n  }\n});\n\nit('should format map', function() {\n  if(typeof Map !== 'undefined') {\n    assert.equal(format(new Map([[1, 2], [2, 'abc'], [{ a: 10}, new Set()], ['abc', null]])),\n      'Map { 1 => 2, 2 => \\'abc\\', Object { a: 10 } => Set {}, \\'abc\\' => null }');\n    assert.equal(format(new Map([[1, 2], [2, 'abc'], [{ a: 10}, new Set()], ['abc', null]]), { maxLineLength: 10 }),\n      'Map {\\n  1 => 2,\\n  2 => \\'abc\\',\\n  Object { a: 10 } =>\\n  Set {},\\n  \\'abc\\' =>\\n  null\\n}');\n  }\n});\n"]}