{"version":3,"sources":["should.js"],"names":[],"mappings":";;;;;;;AAQA,IAAI,OAAO,QAAQ,QAAR,CAAX;;;;;;;;;;;;AAYA,SAAS,MAAT,CAAgB,GAAhB,EAAqB;AACnB,SAAQ,IAAI,OAAO,SAAX,CAAqB,GAArB,CAAR;AACD;;AAED,OAAO,cAAP,GAAwB,QAAQ,mBAAR,CAAxB;AACA,OAAO,SAAP,GAAmB,QAAQ,aAAR,CAAnB;;AAEA,OAAO,MAAP,GAAgB,KAAK,MAArB;AACA,OAAO,IAAP,GAAc,QAAQ,aAAR,CAAd;AACA,OAAO,IAAP,GAAc,IAAd;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,OAAO,MAAP,GAAgB,QAAQ,UAAR,CAAhB;;;AAGA,UAAU,OAAO,OAAP,GAAiB,MAA3B;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAO,MAAP,GAAgB,UAAS,YAAT,EAAuB,KAAvB,EAA8B;AAC5C,iBAAe,gBAAgB,QAA/B;AACA,UAAQ,SAAS,OAAO,SAAxB;;AAEA,MAAI,iBAAiB,OAAO,wBAAP,CAAgC,KAAhC,EAAuC,YAAvC,CAArB;;AAEA,SAAO,cAAP,CAAsB,KAAtB,EAA6B,YAA7B,EAA2C;AACzC,SAAK,YAAW,CACf,CAFwC;AAGzC,SAAK,YAAW;AACd,aAAO,OAAO,KAAK,aAAL,CAAmB,IAAnB,IAA2B,KAAK,OAAL,EAA3B,GAA4C,IAAnD,CAAP;AACD,KALwC;AAMzC,kBAAc;AAN2B,GAA3C;;AASA,SAAO,EAAE,MAAM,YAAR,EAAsB,YAAY,cAAlC,EAAkD,OAAO,KAAzD,EAAP;AACD,CAhBD;;;;;;;;;;;;;;;;;;;;;AAqCA,OAAO,UAAP,GAAoB,UAAS,IAAT,EAAe;AACjC,SAAO,QAAQ,OAAO,WAAtB;;AAEA,MAAI,IAAJ,EAAU;AACR,WAAO,KAAK,KAAL,CAAW,KAAK,IAAhB,CAAP;;AAEA,QAAI,KAAK,UAAT,EAAqB;AACnB,aAAO,cAAP,CAAsB,KAAK,KAA3B,EAAkC,KAAK,IAAvC,EAA6C,KAAK,UAAlD;AACD;AACF;AACD,SAAO,MAAP;AACD,CAXD;;;;;;;;;;;;;;;;;;;AA8BA,OAAO,GAAP,GAAa,UAAS,CAAT,EAAY;AACvB,IAAE,MAAF,EAAU,OAAO,SAAjB;AACA,SAAO,IAAP;AACD,CAHD;;AAKA,OACG,GADH,CACO,QAAQ,cAAR,CADP,EAEG,GAFH,CAEO,QAAQ,aAAR,CAFP,EAGG,GAHH,CAGO,QAAQ,YAAR,CAHP,EAIG,GAJH,CAIO,QAAQ,cAAR,CAJP,EAKG,GALH,CAKO,QAAQ,WAAR,CALP,EAMG,GANH,CAMO,QAAQ,YAAR,CANP,EAOG,GAPH,CAOO,QAAQ,cAAR,CAPP,EAQG,GARH,CAQO,QAAQ,gBAAR,CARP,EASG,GATH,CASO,QAAQ,aAAR,CATP,EAUG,GAVH,CAUO,QAAQ,aAAR,CAVP,EAWG,GAXH,CAWO,QAAQ,eAAR,CAXP,EAYG,GAZH,CAYO,QAAQ,eAAR,CAZP","file":"should-compiled.js","sourcesContent":["/*\n * should.js - assertion library\n * Copyright(c) 2010-2013 TJ Holowaychuk <tj@vision-media.ca>\n * Copyright(c) 2013-2016 Denis Bardadym <bardadymchik@gmail.com>\n * MIT Licensed\n */\n\n\nvar util = require('./util');\n\n/**\n * Our function should\n *\n * @param {*} obj Object to assert\n * @returns {should.Assertion} Returns new Assertion for beginning assertion chain\n * @example\n *\n * var should = require('should');\n * should('abc').be.a.String();\n */\nfunction should(obj) {\n  return (new should.Assertion(obj));\n}\n\nshould.AssertionError = require('./assertion-error');\nshould.Assertion = require('./assertion');\n\nshould.format = util.format;\nshould.type = require('should-type');\nshould.util = util;\n\n/**\n * Object with configuration.\n * It contains such properties:\n * * `checkProtoEql` boolean - Affect if `.eql` will check objects prototypes\n * * `plusZeroAndMinusZeroEqual` boolean - Affect if `.eql` will treat +0 and -0 as equal\n * Also it can contain options for should-format.\n *\n * @type {Object}\n * @memberOf should\n * @static\n * @example\n *\n * var a = { a: 10 }, b = Object.create(null);\n * b.a = 10;\n *\n * a.should.be.eql(b);\n * //not throws\n *\n * should.config.checkProtoEql = true;\n * a.should.be.eql(b);\n * //throws AssertionError: expected { a: 10 } to equal { a: 10 } (because A and B have different prototypes)\n */\nshould.config = require('./config');\n\n// Expose should to external world.\nexports = module.exports = should;\n\n/**\n * Allow to extend given prototype with should property using given name. This getter will **unwrap** all standard wrappers like `Number`, `Boolean`, `String`.\n * Using `should(obj)` is the equivalent of using `obj.should` with known issues (like nulls and method calls etc).\n *\n * To add new assertions, need to use Assertion.add method.\n *\n * @param {string} [propertyName] Name of property to add. Default is `'should'`.\n * @param {Object} [proto] Prototype to extend with. Default is `Object.prototype`.\n * @memberOf should\n * @returns {{ name: string, descriptor: Object, proto: Object }} Descriptor enough to return all back\n * @static\n * @example\n *\n * var prev = should.extend('must', Object.prototype);\n *\n * 'abc'.must.startWith('a');\n *\n * var should = should.noConflict(prev);\n * should.not.exist(Object.prototype.must);\n */\nshould.extend = function(propertyName, proto) {\n  propertyName = propertyName || 'should';\n  proto = proto || Object.prototype;\n\n  var prevDescriptor = Object.getOwnPropertyDescriptor(proto, propertyName);\n\n  Object.defineProperty(proto, propertyName, {\n    set: function() {\n    },\n    get: function() {\n      return should(util.isWrapperType(this) ? this.valueOf() : this);\n    },\n    configurable: true\n  });\n\n  return { name: propertyName, descriptor: prevDescriptor, proto: proto };\n};\n\n/**\n * Delete previous extension. If `desc` missing it will remove default extension.\n *\n * @param {{ name: string, descriptor: Object, proto: Object }} [desc] Returned from `should.extend` object\n * @memberOf should\n * @returns {Function} Returns should function\n * @static\n * @example\n *\n * var should = require('should').noConflict();\n *\n * should(Object.prototype).not.have.property('should');\n *\n * var prev = should.extend('must', Object.prototype);\n * 'abc'.must.startWith('a');\n * should.noConflict(prev);\n *\n * should(Object.prototype).not.have.property('must');\n */\nshould.noConflict = function(desc) {\n  desc = desc || should._prevShould;\n\n  if (desc) {\n    delete desc.proto[desc.name];\n\n    if (desc.descriptor) {\n      Object.defineProperty(desc.proto, desc.name, desc.descriptor);\n    }\n  }\n  return should;\n};\n\n/**\n * Simple utility function for a bit more easier should assertion extension\n * @param {Function} f So called plugin function. It should accept 2 arguments: `should` function and `Assertion` constructor\n * @memberOf should\n * @returns {Function} Returns `should` function\n * @static\n * @example\n *\n * should.use(function(should, Assertion) {\n *   Assertion.add('asset', function() {\n *      this.params = { operator: 'to be asset' };\n *\n *      this.obj.should.have.property('id').which.is.a.Number();\n *      this.obj.should.have.property('path');\n *  })\n * })\n */\nshould.use = function(f) {\n  f(should, should.Assertion);\n  return this;\n};\n\nshould\n  .use(require('./ext/assert'))\n  .use(require('./ext/chain'))\n  .use(require('./ext/bool'))\n  .use(require('./ext/number'))\n  .use(require('./ext/eql'))\n  .use(require('./ext/type'))\n  .use(require('./ext/string'))\n  .use(require('./ext/property'))\n  .use(require('./ext/error'))\n  .use(require('./ext/match'))\n  .use(require('./ext/contain'))\n  .use(require('./ext/promise'));\n"]}