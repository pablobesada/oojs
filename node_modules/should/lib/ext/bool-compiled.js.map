{"version":3,"sources":["bool.js"],"names":[],"mappings":";;;;;;;AAOA,OAAO,OAAP,GAAiB,UAAS,MAAT,EAAiB,SAAjB,EAA4B;;;;;;;;;;;;;;;;AAgB3C,YAAU,GAAV,CAAc,MAAd,EAAsB,UAAS,OAAT,EAAkB;AACtC,SAAK,EAAL,CAAQ,OAAR,CAAgB,IAAhB,EAAsB,OAAtB;AACD,GAFD;;AAIA,YAAU,KAAV,CAAgB,MAAhB,EAAwB,MAAxB;;;;;;;;;;;;;;;AAeA,YAAU,GAAV,CAAc,OAAd,EAAuB,UAAS,OAAT,EAAkB;AACvC,SAAK,EAAL,CAAQ,OAAR,CAAgB,KAAhB,EAAuB,OAAvB;AACD,GAFD;;AAIA,YAAU,KAAV,CAAgB,OAAhB,EAAyB,OAAzB;;;;;;;;;;;;;;;;;;AAkBA,YAAU,GAAV,CAAc,IAAd,EAAoB,YAAW;AAC7B,SAAK,MAAL,GAAc,EAAE,UAAU,cAAZ,EAAd;;AAEA,SAAK,MAAL,CAAY,KAAK,GAAjB;AACD,GAJD;AAKD,CA9DD","file":"bool-compiled.js","sourcesContent":["/*\n * should.js - assertion library\n * Copyright(c) 2010-2013 TJ Holowaychuk <tj@vision-media.ca>\n * Copyright(c) 2013-2016 Denis Bardadym <bardadymchik@gmail.com>\n * MIT Licensed\n */\n\nmodule.exports = function(should, Assertion) {\n  /**\n   * Assert given object is exactly `true`.\n   *\n   * @name true\n   * @memberOf Assertion\n   * @category assertion bool\n   * @alias Assertion#True\n   * @param {string} [message] Optional message\n   * @example\n   *\n   * (true).should.be.true();\n   * false.should.not.be.true();\n   *\n   * ({ a: 10}).should.not.be.true();\n   */\n  Assertion.add('true', function(message) {\n    this.is.exactly(true, message);\n  });\n\n  Assertion.alias('true', 'True');\n\n  /**\n   * Assert given object is exactly `false`.\n   *\n   * @name false\n   * @memberOf Assertion\n   * @category assertion bool\n   * @alias Assertion#False\n   * @param {string} [message] Optional message\n   * @example\n   *\n   * (true).should.not.be.false();\n   * false.should.be.false();\n   */\n  Assertion.add('false', function(message) {\n    this.is.exactly(false, message);\n  });\n\n  Assertion.alias('false', 'False');\n\n  /**\n   * Assert given object is thuthy according javascript type conversions.\n   *\n   * @name ok\n   * @memberOf Assertion\n   * @category assertion bool\n   * @example\n   *\n   * (true).should.be.ok();\n   * ''.should.not.be.ok();\n   * should(null).not.be.ok();\n   * should(void 0).not.be.ok();\n   *\n   * (10).should.be.ok();\n   * (0).should.not.be.ok();\n   */\n  Assertion.add('ok', function() {\n    this.params = { operator: 'to be truthy' };\n\n    this.assert(this.obj);\n  });\n};\n"]}