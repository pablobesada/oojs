{"version":3,"sources":["type.js"],"names":[],"mappings":"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","file":"type-compiled.js","sourcesContent":["/*\n * should.js - assertion library\n * Copyright(c) 2010-2013 TJ Holowaychuk <tj@vision-media.ca>\n * Copyright(c) 2013-2016 Denis Bardadym <bardadymchik@gmail.com>\n * MIT Licensed\n */\n\nvar util = require('../util');\n\nmodule.exports = function(should, Assertion) {\n  /**\n   * Assert given object is number\n   * @name Number\n   * @memberOf Assertion\n   * @category assertion types\n   */\n  Assertion.add('Number', function() {\n    this.params = {operator: 'to be a number'};\n\n    this.have.type('number');\n  });\n\n  /**\n   * Assert given object is arguments\n   * @name arguments\n   * @alias Assertion#Arguments\n   * @memberOf Assertion\n   * @category assertion types\n   */\n  Assertion.add('arguments', function() {\n    this.params = {operator: 'to be arguments'};\n\n    this.have.class('Arguments');\n  });\n\n  Assertion.alias('arguments', 'Arguments');\n\n  /**\n   * Assert given object has some type using `typeof`\n   * @name type\n   * @memberOf Assertion\n   * @param {string} type Type name\n   * @param {string} [description] Optional message\n   * @category assertion types\n   */\n  Assertion.add('type', function(type, description) {\n    this.params = {operator: 'to have type ' + type, message: description};\n\n    should(typeof this.obj).be.exactly(type);\n  });\n\n  /**\n   * Assert given object is instance of `constructor`\n   * @name instanceof\n   * @alias Assertion#instanceOf\n   * @memberOf Assertion\n   * @param {Function} constructor Constructor function\n   * @param {string} [description] Optional message\n   * @category assertion types\n   */\n  Assertion.add('instanceof', function(constructor, description) {\n    this.params = {operator: 'to be an instance of ' + util.functionName(constructor), message: description};\n\n    this.assert(Object(this.obj) instanceof constructor);\n  });\n\n  Assertion.alias('instanceof', 'instanceOf');\n\n  /**\n   * Assert given object is function\n   * @name Function\n   * @memberOf Assertion\n   * @category assertion types\n   */\n  Assertion.add('Function', function() {\n    this.params = {operator: 'to be a function'};\n\n    this.have.type('function');\n  });\n\n  /**\n   * Assert given object is object\n   * @name Object\n   * @memberOf Assertion\n   * @category assertion types\n   */\n  Assertion.add('Object', function() {\n    this.params = {operator: 'to be an object'};\n\n    this.is.not.null().and.have.type('object');\n  });\n\n  /**\n   * Assert given object is string\n   * @name String\n   * @memberOf Assertion\n   * @category assertion types\n   */\n  Assertion.add('String', function() {\n    this.params = {operator: 'to be a string'};\n\n    this.have.type('string');\n  });\n\n  /**\n   * Assert given object is array\n   * @name Array\n   * @memberOf Assertion\n   * @category assertion types\n   */\n  Assertion.add('Array', function() {\n    this.params = {operator: 'to be an array'};\n\n    this.have.class('Array');\n  });\n\n  /**\n   * Assert given object is boolean\n   * @name Boolean\n   * @memberOf Assertion\n   * @category assertion types\n   */\n  Assertion.add('Boolean', function() {\n    this.params = {operator: 'to be a boolean'};\n\n    this.have.type('boolean');\n  });\n\n  /**\n   * Assert given object is error\n   * @name Error\n   * @memberOf Assertion\n   * @category assertion types\n   */\n  Assertion.add('Error', function() {\n    this.params = {operator: 'to be an error'};\n\n    this.have.instanceOf(Error);\n  });\n\n  /**\n   * Assert given object is a date\n   * @name Date\n   * @memberOf Assertion\n   * @category assertion types\n   */\n  Assertion.add('Date', function() {\n    this.params = {operator: 'to be a date'};\n\n    this.have.instanceOf(Date);\n  });\n\n  /**\n   * Assert given object is null\n   * @name null\n   * @alias Assertion#Null\n   * @memberOf Assertion\n   * @category assertion types\n   */\n  Assertion.add('null', function() {\n    this.params = {operator: 'to be null'};\n\n    this.assert(this.obj === null);\n  });\n\n  Assertion.alias('null', 'Null');\n\n  /**\n   * Assert given object has some internal [[Class]], via Object.prototype.toString call\n   * @name class\n   * @alias Assertion#Class\n   * @memberOf Assertion\n   * @category assertion types\n   */\n  Assertion.add('class', function(cls) {\n    this.params = {operator: 'to have [[Class]] ' + cls};\n\n    this.assert(Object.prototype.toString.call(this.obj) === '[object ' + cls + ']');\n  });\n\n  Assertion.alias('class', 'Class');\n\n  /**\n   * Assert given object is undefined\n   * @name undefined\n   * @alias Assertion#Undefined\n   * @memberOf Assertion\n   * @category assertion types\n   */\n  Assertion.add('undefined', function() {\n    this.params = {operator: 'to be undefined'};\n\n    this.assert(this.obj === void 0);\n  });\n\n  Assertion.alias('undefined', 'Undefined');\n\n  /**\n   * Assert given object supports es6 iterable protocol (just check\n   * that object has property Symbol.iterator, which is a function)\n   * @name iterable\n   * @memberOf Assertion\n   * @category assertion es6\n   */\n  Assertion.add('iterable', function() {\n    this.params = {operator: 'to be iterable'};\n\n    should(this.obj).have.property(Symbol.iterator).which.is.a.Function();\n  });\n\n  /**\n   * Assert given object supports es6 iterator protocol (just check\n   * that object has property next, which is a function)\n   * @name iterator\n   * @memberOf Assertion\n   * @category assertion es6\n   */\n  Assertion.add('iterator', function() {\n    this.params = {operator: 'to be iterator'};\n\n    should(this.obj).have.property('next').which.is.a.Function();\n  });\n\n  /**\n   * Assert given object is a generator object\n   * @name generator\n   * @memberOf Assertion\n   * @category assertion es6\n   */\n  Assertion.add('generator', function() {\n    this.params = {operator: 'to be generator'};\n\n    should(this.obj).be.iterable\n      .and.iterator\n      .and.it.is.equal(this.obj[Symbol.iterator]());\n  });\n};\n"]}