{"version":3,"sources":["error.js"],"names":[],"mappings":";;;;;;AAMA,IAAI,OAAO,QAAQ,SAAR,CAAX;;AAEA,OAAO,OAAP,GAAiB,UAAS,MAAT,EAAiB,SAAjB,EAA4B;AAC3C,MAAI,IAAI,OAAO,MAAf;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,YAAU,GAAV,CAAc,OAAd,EAAuB,UAAS,OAAT,EAAkB,UAAlB,EAA8B;AACnD,QAAI,KAAK,KAAK,GAAd;AACA,QAAI,MAAM,EAAV;AACA,QAAI,YAAY,EAAhB;AACA,QAAI,SAAS,KAAb;;AAEA,QAAI,KAAK,mBAAL,CAAyB,EAAzB,CAAJ,EAAkC;AAChC,aAAO,OAAO,IAAP,EAAa,KAAb,CAAmB,OAAnB,EAA4B,UAA5B,CAAP;AACD,KAFD,MAEO,IAAI,KAAK,iBAAL,CAAuB,EAAvB,CAAJ,EAAgC;AACrC,aAAO,OAAO,GAAG,IAAH,CAAQ,IAAR,CAAa,EAAb,CAAP,EAAyB,KAAzB,CAA+B,OAA/B,EAAwC,UAAxC,CAAP;AACD;;AAED,SAAK,EAAL,CAAQ,CAAR,CAAU,QAAV;;AAEA,QAAI,eAAe,IAAnB;;AAEA,QAAI;AACF;AACD,KAFD,CAEE,OAAO,CAAP,EAAU;AACV,eAAS,IAAT;AACA,YAAM,CAAN;AACD;;AAED,QAAI,MAAJ,EAAY;AACV,UAAI,OAAJ,EAAa;AACX,YAAI,YAAY,OAAO,OAAvB,EAAgC;AAC9B,yBAAe,WAAW,IAAI,OAA9B;AACD,SAFD,MAEO,IAAI,mBAAmB,MAAvB,EAA+B;AACpC,yBAAe,QAAQ,IAAR,CAAa,IAAI,OAAjB,CAAf;AACD,SAFM,MAEA,IAAI,cAAc,OAAO,OAAzB,EAAkC;AACvC,yBAAe,eAAe,OAA9B;AACD,SAFM,MAEA,IAAI,QAAQ,OAAZ,EAAqB;AAC1B,cAAI;AACF,mBAAO,GAAP,EAAY,KAAZ,CAAkB,OAAlB;AACD,WAFD,CAEE,OAAO,CAAP,EAAU;AACV,gBAAI,aAAa,OAAO,cAAxB,EAAwC;AACtC,0BAAY,OAAO,EAAE,OAArB;AACA,6BAAe,KAAf;AACD,aAHD,MAGO;AACL,oBAAM,CAAN;AACD;AACF;AACF;;AAED,YAAI,CAAC,YAAL,EAAmB;AACjB,cAAI,YAAY,OAAO,OAAnB,IAA8B,mBAAmB,MAArD,EAA6D;AAC3D,wBAAY,8BAA8B,EAAE,OAAF,CAA9B,GAA2C,aAA3C,GAA2D,IAAI,OAA/D,GAAyE,GAArF;AACD,WAFD,MAEO,IAAI,cAAc,OAAO,OAAzB,EAAkC;AACvC,wBAAY,cAAc,KAAK,YAAL,CAAkB,OAAlB,CAAd,GAA2C,YAA3C,GAA0D,KAAK,YAAL,CAAkB,IAAI,WAAtB,CAAtE;AACD;AACF,SAND,MAMO,IAAI,cAAc,OAAO,OAArB,IAAgC,UAApC,EAAgD;AACrD,cAAI;AACF,mBAAO,GAAP,EAAY,KAAZ,CAAkB,UAAlB;AACD,WAFD,CAEE,OAAO,CAAP,EAAU;AACV,gBAAI,aAAa,OAAO,cAAxB,EAAwC;AACtC,0BAAY,OAAO,EAAE,OAArB;AACA,6BAAe,KAAf;AACD,aAHD,MAGO;AACL,oBAAM,CAAN;AACD;AACF;AACF;AACF,OAtCD,MAsCO;AACL,oBAAY,WAAW,EAAE,GAAF,CAAX,GAAoB,GAAhC;AACD;AACF;;AAED,SAAK,MAAL,GAAc,EAAE,UAAU,uBAAuB,SAAnC,EAAd;;AAEA,SAAK,MAAL,CAAY,MAAZ;AACA,SAAK,MAAL,CAAY,YAAZ;AACD,GAvED;;AAyEA,YAAU,KAAV,CAAgB,OAAhB,EAAyB,YAAzB;AACD,CArGD","file":"error-compiled.js","sourcesContent":["/*\n * should.js - assertion library\n * Copyright(c) 2010-2013 TJ Holowaychuk <tj@vision-media.ca>\n * Copyright(c) 2013-2016 Denis Bardadym <bardadymchik@gmail.com>\n * MIT Licensed\n */\nvar util = require('../util');\n\nmodule.exports = function(should, Assertion) {\n  var i = should.format;\n\n  /**\n   * Assert given function throws error with such message.\n   *\n   * @name throw\n   * @memberOf Assertion\n   * @category assertion errors\n   * @alias Assertion#throwError\n   * @param {string|RegExp|Function|Object|GeneratorFunction|GeneratorObject} [message] Message to match or properties\n   * @param {Object} [properties] Optional properties that will be matched to thrown error\n   * @example\n   *\n   * (function(){ throw new Error('fail') }).should.throw();\n   * (function(){ throw new Error('fail') }).should.throw('fail');\n   * (function(){ throw new Error('fail') }).should.throw(/fail/);\n   *\n   * (function(){ throw new Error('fail') }).should.throw(Error);\n   * var error = new Error();\n   * error.a = 10;\n   * (function(){ throw error; }).should.throw(Error, { a: 10 });\n   * (function(){ throw error; }).should.throw({ a: 10 });\n   * (function*() {\n   *   yield throwError();\n   * }).should.throw();\n   */\n  Assertion.add('throw', function(message, properties) {\n    var fn = this.obj;\n    var err = {};\n    var errorInfo = '';\n    var thrown = false;\n\n    if (util.isGeneratorFunction(fn)) {\n      return should(fn()).throw(message, properties);\n    } else if (util.isGeneratorObject(fn)) {\n      return should(fn.next.bind(fn)).throw(message, properties);\n    }\n\n    this.is.a.Function();\n\n    var errorMatched = true;\n\n    try {\n      fn();\n    } catch (e) {\n      thrown = true;\n      err = e;\n    }\n\n    if (thrown) {\n      if (message) {\n        if ('string' == typeof message) {\n          errorMatched = message == err.message;\n        } else if (message instanceof RegExp) {\n          errorMatched = message.test(err.message);\n        } else if ('function' == typeof message) {\n          errorMatched = err instanceof message;\n        } else if (null != message) {\n          try {\n            should(err).match(message);\n          } catch (e) {\n            if (e instanceof should.AssertionError) {\n              errorInfo = \": \" + e.message;\n              errorMatched = false;\n            } else {\n              throw e;\n            }\n          }\n        }\n\n        if (!errorMatched) {\n          if ('string' == typeof message || message instanceof RegExp) {\n            errorInfo = \" with a message matching \" + i(message) + \", but got '\" + err.message + \"'\";\n          } else if ('function' == typeof message) {\n            errorInfo = \" of type \" + util.functionName(message) + \", but got \" + util.functionName(err.constructor);\n          }\n        } else if ('function' == typeof message && properties) {\n          try {\n            should(err).match(properties);\n          } catch (e) {\n            if (e instanceof should.AssertionError) {\n              errorInfo = \": \" + e.message;\n              errorMatched = false;\n            } else {\n              throw e;\n            }\n          }\n        }\n      } else {\n        errorInfo = \" (got \" + i(err) + \")\";\n      }\n    }\n\n    this.params = { operator: 'to throw exception' + errorInfo };\n\n    this.assert(thrown);\n    this.assert(errorMatched);\n  });\n\n  Assertion.alias('throw', 'throwError');\n};\n"]}