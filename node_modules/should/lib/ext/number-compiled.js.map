{"version":3,"sources":["number.js"],"names":[],"mappings":";;;;;;;AAOA,OAAO,OAAP,GAAiB,UAAS,MAAT,EAAiB,SAAjB,EAA4B;;;;;;;;;;;;AAY3C,YAAU,GAAV,CAAc,KAAd,EAAqB,YAAW;AAC9B,SAAK,MAAL,GAAc,EAAE,UAAU,WAAZ,EAAd;;AAEA,SAAK,MAAL,CAAY,KAAK,GAAL,KAAa,KAAK,GAA9B;AACD,GAJD;;;;;;;;;;;;;AAiBA,YAAU,GAAV,CAAc,UAAd,EAA0B,YAAW;AACnC,SAAK,MAAL,GAAc,EAAE,UAAU,gBAAZ,EAAd;;AAEA,SAAK,EAAL,CAAQ,CAAR,CAAU,MAAV,GACG,GADH,CACO,GADP,CACW,CADX,CACa,GADb,GAEG,GAFH,CAEO,MAFP,CAEc,CAAC,SAAS,KAAK,GAAd,CAFf;AAGD,GAND;;;;;;;;;;;;;;;AAqBA,YAAU,GAAV,CAAc,QAAd,EAAwB,UAAS,KAAT,EAAgB,MAAhB,EAAwB,WAAxB,EAAqC;AAC3D,SAAK,MAAL,GAAc,EAAE,UAAU,kBAAkB,KAAlB,GAA0B,IAA1B,GAAiC,MAA7C,EAAqD,SAAS,WAA9D,EAAd;;AAEA,SAAK,MAAL,CAAY,KAAK,GAAL,IAAY,KAAZ,IAAqB,KAAK,GAAL,IAAY,MAA7C;AACD,GAJD;;;;;;;;;;;;;;;AAmBA,YAAU,GAAV,CAAc,eAAd,EAA+B,UAAS,KAAT,EAAgB,KAAhB,EAAuB,WAAvB,EAAoC;AACjE,SAAK,MAAL,GAAc,EAAE,UAAU,yBAAyB,KAAzB,GAAiC,IAAjC,GAAwC,KAApD,EAA2D,SAAS,WAApE,EAAd;;AAEA,SAAK,MAAL,CAAY,KAAK,GAAL,CAAS,KAAK,GAAL,GAAW,KAApB,KAA8B,KAA1C;AACD,GAJD;;;;;;;;;;;;;;;AAmBA,YAAU,GAAV,CAAc,OAAd,EAAuB,UAAS,CAAT,EAAY,WAAZ,EAAyB;AAC9C,SAAK,MAAL,GAAc,EAAE,UAAU,iBAAiB,CAA7B,EAAgC,SAAS,WAAzC,EAAd;;AAEA,SAAK,MAAL,CAAY,KAAK,GAAL,GAAW,CAAvB;AACD,GAJD;;;;;;;;;;;;;;;AAmBA,YAAU,GAAV,CAAc,OAAd,EAAuB,UAAS,CAAT,EAAY,WAAZ,EAAyB;AAC9C,SAAK,MAAL,GAAc,EAAE,UAAU,iBAAiB,CAA7B,EAAgC,SAAS,WAAzC,EAAd;;AAEA,SAAK,MAAL,CAAY,KAAK,GAAL,GAAW,CAAvB;AACD,GAJD;;AAMA,YAAU,KAAV,CAAgB,OAAhB,EAAyB,aAAzB;AACA,YAAU,KAAV,CAAgB,OAAhB,EAAyB,UAAzB;;;;;;;;;;;;;;;;AAgBA,YAAU,GAAV,CAAc,cAAd,EAA8B,UAAS,CAAT,EAAY,WAAZ,EAAyB;AACrD,SAAK,MAAL,GAAc,EAAE,UAAU,yBAAyB,CAArC,EAAwC,SAAS,WAAjD,EAAd;;AAEA,SAAK,MAAL,CAAY,KAAK,GAAL,IAAY,CAAxB;AACD,GAJD;;;;;;;;;;;;;;;;AAoBA,YAAU,GAAV,CAAc,cAAd,EAA8B,UAAS,CAAT,EAAY,WAAZ,EAAyB;AACrD,SAAK,MAAL,GAAc,EAAE,UAAU,yBAAyB,CAArC,EAAwC,SAAS,WAAjD,EAAd;;AAEA,SAAK,MAAL,CAAY,KAAK,GAAL,IAAY,CAAxB;AACD,GAJD;;AAMA,YAAU,KAAV,CAAgB,cAAhB,EAAgC,oBAAhC;AACA,YAAU,KAAV,CAAgB,cAAhB,EAAgC,iBAAhC;AAED,CA/JD","file":"number-compiled.js","sourcesContent":["/*\n * should.js - assertion library\n * Copyright(c) 2010-2013 TJ Holowaychuk <tj@vision-media.ca>\n * Copyright(c) 2013-2016 Denis Bardadym <bardadymchik@gmail.com>\n * MIT Licensed\n */\n\nmodule.exports = function(should, Assertion) {\n\n  /**\n   * Assert given object is NaN\n   * @name NaN\n   * @memberOf Assertion\n   * @category assertion numbers\n   * @example\n   *\n   * (10).should.not.be.NaN();\n   * NaN.should.be.NaN();\n   */\n  Assertion.add('NaN', function() {\n    this.params = { operator: 'to be NaN' };\n\n    this.assert(this.obj !== this.obj);\n  });\n\n  /**\n   * Assert given object is not finite (positive or negative)\n   *\n   * @name Infinity\n   * @memberOf Assertion\n   * @category assertion numbers\n   * @example\n   *\n   * (10).should.not.be.Infinity();\n   * NaN.should.not.be.Infinity();\n   */\n  Assertion.add('Infinity', function() {\n    this.params = { operator: 'to be Infinity' };\n\n    this.is.a.Number()\n      .and.not.a.NaN()\n      .and.assert(!isFinite(this.obj));\n  });\n\n  /**\n   * Assert given number between `start` and `finish` or equal one of them.\n   *\n   * @name within\n   * @memberOf Assertion\n   * @category assertion numbers\n   * @param {number} start Start number\n   * @param {number} finish Finish number\n   * @param {string} [description] Optional message\n   * @example\n   *\n   * (10).should.be.within(0, 20);\n   */\n  Assertion.add('within', function(start, finish, description) {\n    this.params = { operator: 'to be within ' + start + '..' + finish, message: description };\n\n    this.assert(this.obj >= start && this.obj <= finish);\n  });\n\n  /**\n   * Assert given number near some other `value` within `delta`\n   *\n   * @name approximately\n   * @memberOf Assertion\n   * @category assertion numbers\n   * @param {number} value Center number\n   * @param {number} delta Radius\n   * @param {string} [description] Optional message\n   * @example\n   *\n   * (9.99).should.be.approximately(10, 0.1);\n   */\n  Assertion.add('approximately', function(value, delta, description) {\n    this.params = { operator: 'to be approximately ' + value + ' Â±' + delta, message: description };\n\n    this.assert(Math.abs(this.obj - value) <= delta);\n  });\n\n  /**\n   * Assert given number above `n`.\n   *\n   * @name above\n   * @alias Assertion#greaterThan\n   * @memberOf Assertion\n   * @category assertion numbers\n   * @param {number} n Margin number\n   * @param {string} [description] Optional message\n   * @example\n   *\n   * (10).should.be.above(0);\n   */\n  Assertion.add('above', function(n, description) {\n    this.params = { operator: 'to be above ' + n, message: description };\n\n    this.assert(this.obj > n);\n  });\n\n  /**\n   * Assert given number below `n`.\n   *\n   * @name below\n   * @alias Assertion#lessThan\n   * @memberOf Assertion\n   * @category assertion numbers\n   * @param {number} n Margin number\n   * @param {string} [description] Optional message\n   * @example\n   *\n   * (0).should.be.below(10);\n   */\n  Assertion.add('below', function(n, description) {\n    this.params = { operator: 'to be below ' + n, message: description };\n\n    this.assert(this.obj < n);\n  });\n\n  Assertion.alias('above', 'greaterThan');\n  Assertion.alias('below', 'lessThan');\n\n  /**\n   * Assert given number above `n`.\n   *\n   * @name aboveOrEqual\n   * @alias Assertion#greaterThanOrEqual\n   * @memberOf Assertion\n   * @category assertion numbers\n   * @param {number} n Margin number\n   * @param {string} [description] Optional message\n   * @example\n   *\n   * (10).should.be.aboveOrEqual(0);\n   * (10).should.be.aboveOrEqual(10);\n   */\n  Assertion.add('aboveOrEqual', function(n, description) {\n    this.params = { operator: 'to be above or equal' + n, message: description };\n\n    this.assert(this.obj >= n);\n  });\n\n  /**\n   * Assert given number below `n`.\n   *\n   * @name belowOrEqual\n   * @alias Assertion#lessThanOrEqual\n   * @memberOf Assertion\n   * @category assertion numbers\n   * @param {number} n Margin number\n   * @param {string} [description] Optional message\n   * @example\n   *\n   * (0).should.be.belowOrEqual(10);\n   * (0).should.be.belowOrEqual(0);\n   */\n  Assertion.add('belowOrEqual', function(n, description) {\n    this.params = { operator: 'to be below or equal' + n, message: description };\n\n    this.assert(this.obj <= n);\n  });\n\n  Assertion.alias('aboveOrEqual', 'greaterThanOrEqual');\n  Assertion.alias('belowOrEqual', 'lessThanOrEqual');\n\n};\n"]}