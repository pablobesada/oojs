{"version":3,"sources":["eql.js"],"names":[],"mappings":"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","file":"eql-compiled.js","sourcesContent":["/*\n * should.js - assertion library\n * Copyright(c) 2010-2013 TJ Holowaychuk <tj@vision-media.ca>\n * Copyright(c) 2013-2016 Denis Bardadym <bardadymchik@gmail.com>\n * MIT Licensed\n */\n\nvar eql = require('should-equal');\nvar type = require('should-type');\nvar util = require('../util');\n\nfunction formatEqlResult(r, a, b) {\n  return ((r.path.length > 0 ? 'at ' + r.path.map(util.formatProp).join(' -> ') : '') +\n  (r.a === a ? '' : ', A has ' + util.format(r.a)) +\n  (r.b === b ? '' : ' and B has ' + util.format(r.b)) +\n  (r.showReason ? ' because ' + r.reason : '')).trim();\n}\n\nmodule.exports = function(should, Assertion) {\n\n  /**\n   * Deep object equality comparison. For full spec see [`should-equal tests`](https://github.com/shouldjs/equal/blob/master/test.js).\n   *\n   * @name eql\n   * @memberOf Assertion\n   * @category assertion equality\n   * @alias Assertion#deepEqual\n   * @param {*} val Expected value\n   * @param {string} [description] Optional message\n   * @example\n   *\n   * (10).should.be.eql(10);\n   * ('10').should.not.be.eql(10);\n   * (-0).should.not.be.eql(+0);\n   *\n   * NaN.should.be.eql(NaN);\n   *\n   * ({ a: 10}).should.be.eql({ a: 10 });\n   * [ 'a' ].should.not.be.eql({ '0': 'a' });\n   */\n  Assertion.add('eql', function(val, description) {\n    this.params = {operator: 'to equal', expected: val, message: description};\n\n    var result = eql(this.obj, val, should.config);\n    this.params.details = result.result ? '' : formatEqlResult(result, this.obj, val);\n\n    this.params.showDiff = eql(type(this.obj), type(val)).result;\n\n    this.assert(result.result);\n  });\n\n  /**\n   * Exact comparison using ===.\n   *\n   * @name equal\n   * @memberOf Assertion\n   * @category assertion equality\n   * @alias Assertion#exactly\n   * @param {*} val Expected value\n   * @param {string} [description] Optional message\n   * @example\n   *\n   * 10.should.be.equal(10);\n   * 'a'.should.be.exactly('a');\n   *\n   * should(null).be.exactly(null);\n   */\n  Assertion.add('equal', function(val, description) {\n    this.params = {operator: 'to be', expected: val, message: description};\n\n    this.params.showDiff = eql(type(this.obj), type(val)).result;\n\n    this.assert(val === this.obj);\n  });\n\n  Assertion.alias('equal', 'exactly');\n  Assertion.alias('eql', 'deepEqual');\n\n  function addOneOf(name, message, method) {\n    Assertion.add(name, function(vals) {\n      if (arguments.length !== 1) {\n        vals = Array.prototype.slice.call(arguments);\n      } else {\n        should(vals).be.Array();\n      }\n\n      this.params = {operator: message, expected: vals};\n\n      var obj = this.obj;\n      var found = false;\n\n      util.forEach(vals, function(val) {\n        try {\n          should(val)[method](obj);\n          found = true;\n          return false;\n        } catch (e) {\n          if (e instanceof should.AssertionError) {\n            return;//do nothing\n          }\n          throw e;\n        }\n      });\n\n      this.assert(found);\n    });\n  }\n\n  /**\n   * Exact comparison using === to be one of supplied objects.\n   *\n   * @name equalOneOf\n   * @memberOf Assertion\n   * @category assertion equality\n   * @param {Array|*} vals Expected values\n   * @example\n   *\n   * 'ab'.should.be.equalOneOf('a', 10, 'ab');\n   * 'ab'.should.be.equalOneOf(['a', 10, 'ab']);\n   */\n  addOneOf('equalOneOf', 'to be equals one of', 'equal');\n\n  /**\n   * Exact comparison using .eql to be one of supplied objects.\n   *\n   * @name oneOf\n   * @memberOf Assertion\n   * @category assertion equality\n   * @param {Array|*} vals Expected values\n   * @example\n   *\n   * ({a: 10}).should.be.oneOf('a', 10, 'ab', {a: 10});\n   * ({a: 10}).should.be.oneOf(['a', 10, 'ab', {a: 10}]);\n   */\n  addOneOf('oneOf', 'to be one of', 'eql');\n\n};\n"]}