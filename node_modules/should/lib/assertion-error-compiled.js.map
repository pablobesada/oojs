{"version":3,"sources":["assertion-error.js"],"names":[],"mappings":";;;;;;;AAOA,IAAI,OAAO,QAAQ,QAAR,CAAX;;;;;;;;;AASA,IAAI,iBAAiB,SAAS,cAAT,CAAwB,OAAxB,EAAiC;AACpD,OAAK,KAAL,CAAW,IAAX,EAAiB,OAAjB;;AAEA,MAAI,CAAC,QAAQ,OAAb,EAAsB;AACpB,WAAO,cAAP,CAAsB,IAAtB,EAA4B,SAA5B,EAAuC;AACnC,WAAK,YAAW;AACd,YAAI,CAAC,KAAK,QAAV,EAAoB;AAClB,eAAK,QAAL,GAAgB,KAAK,eAAL,EAAhB;AACA,eAAK,gBAAL,GAAwB,IAAxB;AACD;AACD,eAAO,KAAK,QAAZ;AACD,OAPkC;AAQnC,oBAAc,IARqB;AASnC,kBAAY;AATuB,KAAvC;AAYD;;AAED,MAAI,MAAM,iBAAV,EAA6B;AAC3B,UAAM,iBAAN,CAAwB,IAAxB,EAA8B,KAAK,kBAAnC;AACD,GAFD,MAEO;;AAEL,QAAI,MAAM,IAAI,KAAJ,EAAV;AACA,QAAI,IAAI,KAAR,EAAe;AACb,UAAI,MAAM,IAAI,KAAd;;AAEA,UAAI,KAAK,kBAAT,EAA6B;;AAE3B,YAAI,UAAU,KAAK,YAAL,CAAkB,KAAK,kBAAvB,CAAd;AACA,YAAI,MAAM,IAAI,OAAJ,CAAY,OAAO,OAAnB,CAAV;AACA,YAAI,OAAO,CAAX,EAAc;;;AAGZ,cAAI,YAAY,IAAI,OAAJ,CAAY,IAAZ,EAAkB,MAAM,CAAxB,CAAhB;AACA,gBAAM,IAAI,SAAJ,CAAc,YAAY,CAA1B,CAAN;AACD;AACF;;AAED,WAAK,KAAL,GAAa,GAAb;AACD;AACF;AACF,CAzCD;;AA4CA,IAAI,SAAS,MAAb;AACA,SAAS,aAAT,CAAuB,IAAvB,EAA6B;AAC3B,SAAO,SAAS,IAAhB;AACD;;AAED,SAAS,WAAT,CAAqB,IAArB,EAA2B;AACzB,SAAO,KAAK,KAAL,CAAW,IAAX,EAAiB,GAAjB,CAAqB,aAArB,EAAoC,IAApC,CAAyC,IAAzC,CAAP;AACD;;;AAID,eAAe,SAAf,GAA2B,OAAO,MAAP,CAAc,MAAM,SAApB,EAA+B;AACxD,QAAM;AACJ,WAAO;AADH,GADkD;;AAKxD,mBAAiB;AACf,WAAO,YAAW;AAChB,UAAI,CAAC,KAAK,QAAN,IAAkB,KAAK,QAA3B,EAAqC;AACnC,eAAO,KAAK,QAAL,CAAc,OAArB;AACD;AACD,UAAI,SAAS,KAAK,MAAL,CAAY,KAAK,MAAjB,CAAb;AACA,UAAI,WAAW,cAAc,IAAd,GAAqB,MAAM,KAAK,MAAL,CAAY,KAAK,QAAjB,CAA3B,GAAwD,EAAvE;AACA,UAAI,UAAU,aAAa,IAAb,IAAqB,KAAK,OAA1B,GAAoC,OAAO,KAAK,OAAZ,GAAsB,GAA1D,GAAgE,EAA9E;;AAEA,UAAI,WAAW,KAAK,QAAL,GAAgB,OAAO,YAAY,KAAK,QAAL,CAAc,OAA1B,CAAvB,GAA4D,EAA3E;;AAEA,aAAO,cAAc,MAAd,IAAwB,KAAK,MAAL,GAAc,OAAd,GAAwB,GAAhD,IAAuD,KAAK,QAA5D,GAAuE,QAAvE,GAAkF,OAAlF,GAA4F,QAAnG;AACD;AAZc;AALuC,CAA/B,CAA3B;;AAqBA,OAAO,OAAP,GAAiB,cAAjB","file":"assertion-error-compiled.js","sourcesContent":["/*\n * should.js - assertion library\n * Copyright(c) 2010-2013 TJ Holowaychuk <tj@vision-media.ca>\n * Copyright(c) 2013-2016 Denis Bardadym <bardadymchik@gmail.com>\n * MIT Licensed\n */\n\nvar util = require('./util');\n\n/**\n * should AssertionError\n * @param {Object} options\n * @constructor\n * @memberOf should\n * @static\n */\nvar AssertionError = function AssertionError(options) {\n  util.merge(this, options);\n\n  if (!options.message) {\n    Object.defineProperty(this, 'message', {\n        get: function() {\n          if (!this._message) {\n            this._message = this.generateMessage();\n            this.generatedMessage = true;\n          }\n          return this._message;\n        },\n        configurable: true,\n        enumerable: false\n      }\n    );\n  }\n\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, this.stackStartFunction);\n  } else {\n    // non v8 browsers so we can have a stacktrace\n    var err = new Error();\n    if (err.stack) {\n      var out = err.stack;\n\n      if (this.stackStartFunction) {\n        // try to strip useless frames\n        var fn_name = util.functionName(this.stackStartFunction);\n        var idx = out.indexOf('\\n' + fn_name);\n        if (idx >= 0) {\n          // once we have located the function frame\n          // we need to strip out everything before it (and its line)\n          var next_line = out.indexOf('\\n', idx + 1);\n          out = out.substring(next_line + 1);\n        }\n      }\n\n      this.stack = out;\n    }\n  }\n};\n\n\nvar indent = '    ';\nfunction prependIndent(line) {\n  return indent + line;\n}\n\nfunction indentLines(text) {\n  return text.split('\\n').map(prependIndent).join('\\n');\n}\n\n\n// assert.AssertionError instanceof Error\nAssertionError.prototype = Object.create(Error.prototype, {\n  name: {\n    value: 'AssertionError'\n  },\n\n  generateMessage: {\n    value: function() {\n      if (!this.operator && this.previous) {\n        return this.previous.message;\n      }\n      var actual = util.format(this.actual);\n      var expected = 'expected' in this ? ' ' + util.format(this.expected) : '';\n      var details = 'details' in this && this.details ? ' (' + this.details + ')' : '';\n\n      var previous = this.previous ? '\\n' + indentLines(this.previous.message) : '';\n\n      return 'expected ' + actual + (this.negate ? ' not ' : ' ') + this.operator + expected + details + previous;\n    }\n  }\n});\n\nmodule.exports = AssertionError;\n"]}