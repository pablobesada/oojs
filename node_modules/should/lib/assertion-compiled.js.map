{"version":3,"sources":["assertion.js"],"names":[],"mappings":"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","file":"assertion-compiled.js","sourcesContent":["/*\n * should.js - assertion library\n * Copyright(c) 2010-2013 TJ Holowaychuk <tj@vision-media.ca>\n * Copyright(c) 2013-2016 Denis Bardadym <bardadymchik@gmail.com>\n * MIT Licensed\n */\n\nvar AssertionError = require('./assertion-error');\n\n/**\n * should Assertion\n * @param {*} obj Given object for assertion\n * @constructor\n * @memberOf should\n * @static\n */\nfunction Assertion(obj) {\n  this.obj = obj;\n\n  this.anyOne = false;\n  this.negate = false;\n\n  this.params = {actual: obj};\n}\n\nAssertion.prototype = {\n  constructor: Assertion,\n\n  /**\n   * Base method for assertions.\n   *\n   * Before calling this method need to fill Assertion#params object. This method usually called from other assertion methods.\n   * `Assertion#params` can contain such properties:\n   * * `operator` - required string containing description of this assertion\n   * * `obj` - optional replacement for this.obj, it usefull if you prepare more clear object then given\n   * * `message` - if this property filled with string any others will be ignored and this one used as assertion message\n   * * `expected` - any object used when you need to assert relation between given object and expected. Like given == expected (== is a relation)\n   * * `details` - additional string with details to generated message\n   *\n   * @memberOf Assertion\n   * @category assertion\n   * @param {*} expr Any expression that will be used as a condition for asserting.\n   * @example\n   *\n   * var a = new should.Assertion(42);\n   *\n   * a.params = {\n   *  operator: 'to be magic number',\n   * }\n   *\n   * a.assert(false);\n   * //throws AssertionError: expected 42 to be magic number\n   */\n  assert: function(expr) {\n    if (expr) {\n      return this;\n    }\n\n    var params = this.params;\n\n    if ('obj' in params && !('actual' in params)) {\n      params.actual = params.obj;\n    } else if (!('obj' in params) && !('actual' in params)) {\n      params.actual = this.obj;\n    }\n\n    params.stackStartFunction = params.stackStartFunction || this.assert;\n    params.negate = this.negate;\n\n    params.assertion = this;\n\n    throw new AssertionError(params);\n  },\n\n  /**\n   * Shortcut for `Assertion#assert(false)`.\n   *\n   * @memberOf Assertion\n   * @category assertion\n   * @example\n   *\n   * var a = new should.Assertion(42);\n   *\n   * a.params = {\n   *  operator: 'to be magic number',\n   * }\n   *\n   * a.fail();\n   * //throws AssertionError: expected 42 to be magic number\n   */\n  fail: function() {\n    return this.assert(false);\n  }\n};\n\n\n\n/**\n * Assertion used to delegate calls of Assertion methods inside of Promise.\n * It has almost all methods of Assertion.prototype\n *\n * @param {Promise} obj\n */\nfunction PromisedAssertion(/* obj */) {\n  Assertion.apply(this, arguments);\n}\n\n/**\n * Make PromisedAssertion to look like promise. Delegate resolve and reject to given promise.\n *\n * @private\n * @returns {Promise}\n */\nPromisedAssertion.prototype.then = function(resolve, reject) {\n  return this.obj.then(resolve, reject);\n};\n\n/**\n * Way to extend Assertion function. It uses some logic\n * to define only positive assertions and itself rule with negative assertion.\n *\n * All actions happen in subcontext and this method take care about negation.\n * Potentially we can add some more modifiers that does not depends from state of assertion.\n *\n * @memberOf Assertion\n * @static\n * @param {String} name Name of assertion. It will be used for defining method or getter on Assertion.prototype\n * @param {Function} func Function that will be called on executing assertion\n * @example\n *\n * Assertion.add('asset', function() {\n *      this.params = { operator: 'to be asset' }\n *\n *      this.obj.should.have.property('id').which.is.a.Number()\n *      this.obj.should.have.property('path')\n * })\n */\nAssertion.add = function(name, func) {\n  Object.defineProperty(Assertion.prototype, name, {\n    enumerable: true,\n    configurable: true,\n    value: function() {\n      var context = new Assertion(this.obj, this, name);\n      context.anyOne = this.anyOne;\n\n      try {\n        func.apply(context, arguments);\n      } catch (e) {\n        // check for fail\n        if (e instanceof AssertionError) {\n          // negative fail\n          if (this.negate) {\n            this.obj = context.obj;\n            this.negate = false;\n            return this;\n          }\n\n          if (context !== e.assertion) {\n            context.params.previous = e;\n          }\n\n          // positive fail\n          context.negate = false;\n          context.fail();\n        }\n        // throw if it is another exception\n        throw e;\n      }\n\n      // negative pass\n      if (this.negate) {\n        context.negate = true; // because .fail will set negate\n        context.params.details = 'false negative fail';\n        context.fail();\n      }\n\n      // positive pass\n      if (!this.params.operator) {\n        this.params = context.params; // shortcut\n      }\n      this.obj = context.obj;\n      this.negate = false;\n      return this;\n    }\n  });\n\n  Object.defineProperty(PromisedAssertion.prototype, name, {\n    enumerable: true,\n    configurable: true,\n    value: function() {\n      var args = arguments;\n      this.obj = this.obj.then(function(a) {\n        return a[name].apply(a, args);\n      });\n\n      return this;\n    }\n  });\n};\n\n/**\n * Add chaining getter to Assertion like .a, .which etc\n *\n * @memberOf Assertion\n * @static\n * @param  {string} name   name of getter\n * @param  {function} [onCall] optional function to call\n */\nAssertion.addChain = function(name, onCall) {\n  onCall = onCall || function() {};\n  Object.defineProperty(Assertion.prototype, name, {\n    get: function() {\n      onCall.call(this);\n      return this;\n    },\n    enumerable: true\n  });\n\n  Object.defineProperty(PromisedAssertion.prototype, name, {\n    enumerable: true,\n    configurable: true,\n    get: function() {\n      this.obj = this.obj.then(function(a) {\n        return a[name];\n      });\n\n      return this;\n    }\n  });\n};\n\n/**\n * Create alias for some `Assertion` property\n *\n * @memberOf Assertion\n * @static\n * @param {String} from Name of to map\n * @param {String} to Name of alias\n * @example\n *\n * Assertion.alias('true', 'True')\n */\nAssertion.alias = function(from, to) {\n  var desc = Object.getOwnPropertyDescriptor(Assertion.prototype, from);\n  if (!desc) throw new Error('Alias ' + from + ' -> ' + to + ' could not be created as ' + from + ' not defined');\n  Object.defineProperty(Assertion.prototype, to, desc);\n\n  var desc2 = Object.getOwnPropertyDescriptor(PromisedAssertion.prototype, from);\n  if (desc2) {\n    Object.defineProperty(PromisedAssertion.prototype, to, desc2);\n  }\n};\n/**\n * Negation modifier. Current assertion chain become negated. Each call invert negation on current assertion.\n *\n * @name not\n * @property\n * @memberOf Assertion\n * @category assertion\n */\nAssertion.addChain('not', function() {\n  this.negate = !this.negate;\n});\n\n/**\n * Any modifier - it affect on execution of sequenced assertion to do not `check all`, but `check any of`.\n *\n * @name any\n * @property\n * @memberOf Assertion\n * @category assertion\n */\nAssertion.addChain('any', function() {\n  this.anyOne = true;\n});\n\nmodule.exports = Assertion;\nmodule.exports.PromisedAssertion = PromisedAssertion;\n"]}