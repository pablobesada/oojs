{"version":3,"sources":["bignumber.js"],"names":[],"mappings":"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","file":"bignumber-compiled.js","sourcesContent":["/*! bignumber.js v2.1.3 https://github.com/MikeMcl/bignumber.js/LICENCE */\r\n\r\n;(function (globalObj) {\r\n    'use strict';\r\n\r\n    /*\r\n      bignumber.js v2.1.3\r\n      A JavaScript library for arbitrary-precision arithmetic.\r\n      https://github.com/MikeMcl/bignumber.js\r\n      Copyright (c) 2015 Michael Mclaughlin <M8ch88l@gmail.com>\r\n      MIT Expat Licence\r\n    */\r\n\r\n\r\n    var cryptoObj, parseNumeric,\r\n        isNumeric = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n        mathceil = Math.ceil,\r\n        mathfloor = Math.floor,\r\n        notBool = ' not a boolean or binary digit',\r\n        roundingMode = 'rounding mode',\r\n        tooManyDigits = 'number type has more than 15 significant digits',\r\n        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',\r\n        BASE = 1e14,\r\n        LOG_BASE = 14,\r\n        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n        SQRT_BASE = 1e7,\r\n\r\n        /*\r\n         * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n         * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an\r\n         * exception is thrown (if ERRORS is true).\r\n         */\r\n        MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n    if ( typeof crypto != 'undefined' ) cryptoObj = crypto;\r\n\r\n\r\n    /*\r\n     * Create and return a BigNumber constructor.\r\n     */\r\n    function constructorFactory(configObj) {\r\n        var div,\r\n\r\n            // id tracks the caller function, so its name can be included in error messages.\r\n            id = 0,\r\n            P = BigNumber.prototype,\r\n            ONE = new BigNumber(1),\r\n\r\n\r\n            /********************************* EDITABLE DEFAULTS **********************************/\r\n\r\n\r\n            /*\r\n             * The default values below must be integers within the inclusive ranges stated.\r\n             * The values can also be changed at run-time using BigNumber.config.\r\n             */\r\n\r\n            // The maximum number of decimal places for operations involving division.\r\n            DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n            /*\r\n             * The rounding mode used when rounding to the above decimal places, and when using\r\n             * toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n             * UP         0 Away from zero.\r\n             * DOWN       1 Towards zero.\r\n             * CEIL       2 Towards +Infinity.\r\n             * FLOOR      3 Towards -Infinity.\r\n             * HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n             * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n             * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n             * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n             * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n             */\r\n            ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n            // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n            // The exponent value at and beneath which toString returns exponential notation.\r\n            // Number type: -7\r\n            TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n            // The exponent value at and above which toString returns exponential notation.\r\n            // Number type: 21\r\n            TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n            // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n            // The minimum exponent value, beneath which underflow to zero occurs.\r\n            // Number type: -324  (5e-324)\r\n            MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n            // The maximum exponent value, above which overflow to Infinity occurs.\r\n            // Number type:  308  (1.7976931348623157e+308)\r\n            // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n            MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n            // Whether BigNumber Errors are ever thrown.\r\n            ERRORS = true,                           // true or false\r\n\r\n            // Change to intValidatorNoErrors if ERRORS is false.\r\n            isValidInt = intValidatorWithErrors,     // intValidatorWithErrors/intValidatorNoErrors\r\n\r\n            // Whether to use cryptographically-secure random number generation, if available.\r\n            CRYPTO = false,                          // true or false\r\n\r\n            /*\r\n             * The modulo mode used when calculating the modulus: a mod n.\r\n             * The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n             * The remainder (r) is calculated as: r = a - n * q.\r\n             *\r\n             * UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n             * DOWN      1 The remainder has the same sign as the dividend.\r\n             *             This modulo mode is commonly known as 'truncated division' and is\r\n             *             equivalent to (a % n) in JavaScript.\r\n             * FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n             * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n             * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n             *             The remainder is always positive.\r\n             *\r\n             * The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n             * modes are commonly used for the modulus operation.\r\n             * Although the other rounding modes can also be used, they may not give useful results.\r\n             */\r\n            MODULO_MODE = 1,                         // 0 to 9\r\n\r\n            // The maximum number of significant digits of the result of the toPower operation.\r\n            // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n            POW_PRECISION = 100,                     // 0 to MAX\r\n\r\n            // The format specification used by the BigNumber.prototype.toFormat method.\r\n            FORMAT = {\r\n                decimalSeparator: '.',\r\n                groupSeparator: ',',\r\n                groupSize: 3,\r\n                secondaryGroupSize: 0,\r\n                fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n                fractionGroupSize: 0\r\n            };\r\n\r\n\r\n        /******************************************************************************************/\r\n\r\n\r\n        // CONSTRUCTOR\r\n\r\n\r\n        /*\r\n         * The BigNumber constructor and exported function.\r\n         * Create and return a new instance of a BigNumber object.\r\n         *\r\n         * n {number|string|BigNumber} A numeric value.\r\n         * [b] {number} The base of n. Integer, 2 to 64 inclusive.\r\n         */\r\n        function BigNumber( n, b ) {\r\n            var c, e, i, num, len, str,\r\n                x = this;\r\n\r\n            // Enable constructor usage without new.\r\n            if ( !( x instanceof BigNumber ) ) {\r\n\r\n                // 'BigNumber() constructor call without new: {n}'\r\n                if (ERRORS) raise( 26, 'constructor call without new', n );\r\n                return new BigNumber( n, b );\r\n            }\r\n\r\n            // 'new BigNumber() base not an integer: {b}'\r\n            // 'new BigNumber() base out of range: {b}'\r\n            if ( b == null || !isValidInt( b, 2, 64, id, 'base' ) ) {\r\n\r\n                // Duplicate.\r\n                if ( n instanceof BigNumber ) {\r\n                    x.s = n.s;\r\n                    x.e = n.e;\r\n                    x.c = ( n = n.c ) ? n.slice() : n;\r\n                    id = 0;\r\n                    return;\r\n                }\r\n\r\n                if ( ( num = typeof n == 'number' ) && n * 0 == 0 ) {\r\n                    x.s = 1 / n < 0 ? ( n = -n, -1 ) : 1;\r\n\r\n                    // Fast path for integers.\r\n                    if ( n === ~~n ) {\r\n                        for ( e = 0, i = n; i >= 10; i /= 10, e++ );\r\n                        x.e = e;\r\n                        x.c = [n];\r\n                        id = 0;\r\n                        return;\r\n                    }\r\n\r\n                    str = n + '';\r\n                } else {\r\n                    if ( !isNumeric.test( str = n + '' ) ) return parseNumeric( x, str, num );\r\n                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;\r\n                }\r\n            } else {\r\n                b = b | 0;\r\n                str = n + '';\r\n\r\n                // Ensure return value is rounded to DECIMAL_PLACES as with other bases.\r\n                // Allow exponential notation to be used with base 10 argument.\r\n                if ( b == 10 ) {\r\n                    x = new BigNumber( n instanceof BigNumber ? n : str );\r\n                    return round( x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE );\r\n                }\r\n\r\n                // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n                // Any number in exponential form will fail due to the [Ee][+-].\r\n                if ( ( num = typeof n == 'number' ) && n * 0 != 0 ||\r\n                  !( new RegExp( '^-?' + ( c = '[' + ALPHABET.slice( 0, b ) + ']+' ) +\r\n                    '(?:\\\\.' + c + ')?$',b < 37 ? 'i' : '' ) ).test(str) ) {\r\n                    return parseNumeric( x, str, num, b );\r\n                }\r\n\r\n                if (num) {\r\n                    x.s = 1 / n < 0 ? ( str = str.slice(1), -1 ) : 1;\r\n\r\n                    if ( ERRORS && str.replace( /^0\\.0*|\\./, '' ).length > 15 ) {\r\n\r\n                        // 'new BigNumber() number type has more than 15 significant digits: {n}'\r\n                        raise( id, tooManyDigits, n );\r\n                    }\r\n\r\n                    // Prevent later check for length on converted number.\r\n                    num = false;\r\n                } else {\r\n                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;\r\n                }\r\n\r\n                str = convertBase( str, 10, b, x.s );\r\n            }\r\n\r\n            // Decimal point?\r\n            if ( ( e = str.indexOf('.') ) > -1 ) str = str.replace( '.', '' );\r\n\r\n            // Exponential form?\r\n            if ( ( i = str.search( /e/i ) ) > 0 ) {\r\n\r\n                // Determine exponent.\r\n                if ( e < 0 ) e = i;\r\n                e += +str.slice( i + 1 );\r\n                str = str.substring( 0, i );\r\n            } else if ( e < 0 ) {\r\n\r\n                // Integer.\r\n                e = str.length;\r\n            }\r\n\r\n            // Determine leading zeros.\r\n            for ( i = 0; str.charCodeAt(i) === 48; i++ );\r\n\r\n            // Determine trailing zeros.\r\n            for ( len = str.length; str.charCodeAt(--len) === 48; );\r\n            str = str.slice( i, len + 1 );\r\n\r\n            if (str) {\r\n                len = str.length;\r\n\r\n                // Disallow numbers with over 15 significant digits if number type.\r\n                // 'new BigNumber() number type has more than 15 significant digits: {n}'\r\n                if ( num && ERRORS && len > 15 ) raise( id, tooManyDigits, x.s * n );\r\n\r\n                e = e - i - 1;\r\n\r\n                 // Overflow?\r\n                if ( e > MAX_EXP ) {\r\n\r\n                    // Infinity.\r\n                    x.c = x.e = null;\r\n\r\n                // Underflow?\r\n                } else if ( e < MIN_EXP ) {\r\n\r\n                    // Zero.\r\n                    x.c = [ x.e = 0 ];\r\n                } else {\r\n                    x.e = e;\r\n                    x.c = [];\r\n\r\n                    // Transform base\r\n\r\n                    // e is the base 10 exponent.\r\n                    // i is where to slice str to get the first element of the coefficient array.\r\n                    i = ( e + 1 ) % LOG_BASE;\r\n                    if ( e < 0 ) i += LOG_BASE;\r\n\r\n                    if ( i < len ) {\r\n                        if (i) x.c.push( +str.slice( 0, i ) );\r\n\r\n                        for ( len -= LOG_BASE; i < len; ) {\r\n                            x.c.push( +str.slice( i, i += LOG_BASE ) );\r\n                        }\r\n\r\n                        str = str.slice(i);\r\n                        i = LOG_BASE - str.length;\r\n                    } else {\r\n                        i -= len;\r\n                    }\r\n\r\n                    for ( ; i--; str += '0' );\r\n                    x.c.push( +str );\r\n                }\r\n            } else {\r\n\r\n                // Zero.\r\n                x.c = [ x.e = 0 ];\r\n            }\r\n\r\n            id = 0;\r\n        }\r\n\r\n\r\n        // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n        BigNumber.another = constructorFactory;\r\n\r\n        BigNumber.ROUND_UP = 0;\r\n        BigNumber.ROUND_DOWN = 1;\r\n        BigNumber.ROUND_CEIL = 2;\r\n        BigNumber.ROUND_FLOOR = 3;\r\n        BigNumber.ROUND_HALF_UP = 4;\r\n        BigNumber.ROUND_HALF_DOWN = 5;\r\n        BigNumber.ROUND_HALF_EVEN = 6;\r\n        BigNumber.ROUND_HALF_CEIL = 7;\r\n        BigNumber.ROUND_HALF_FLOOR = 8;\r\n        BigNumber.EUCLID = 9;\r\n\r\n\r\n        /*\r\n         * Configure infrequently-changing library-wide settings.\r\n         *\r\n         * Accept an object or an argument list, with one or many of the following properties or\r\n         * parameters respectively:\r\n         *\r\n         *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive\r\n         *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive\r\n         *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or\r\n         *                                      [integer -MAX to 0 incl., 0 to MAX incl.]\r\n         *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or\r\n         *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]\r\n         *   ERRORS          {boolean|number}   true, false, 1 or 0\r\n         *   CRYPTO          {boolean|number}   true, false, 1 or 0\r\n         *   MODULO_MODE     {number}           0 to 9 inclusive\r\n         *   POW_PRECISION   {number}           0 to MAX inclusive\r\n         *   FORMAT          {object}           See BigNumber.prototype.toFormat\r\n         *      decimalSeparator       {string}\r\n         *      groupSeparator         {string}\r\n         *      groupSize              {number}\r\n         *      secondaryGroupSize     {number}\r\n         *      fractionGroupSeparator {string}\r\n         *      fractionGroupSize      {number}\r\n         *\r\n         * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n         *\r\n         * E.g.\r\n         * BigNumber.config(20, 4) is equivalent to\r\n         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n         *\r\n         * Ignore properties/parameters set to null or undefined.\r\n         * Return an object with the properties current values.\r\n         */\r\n        BigNumber.config = function () {\r\n            var v, p,\r\n                i = 0,\r\n                r = {},\r\n                a = arguments,\r\n                o = a[0],\r\n                has = o && typeof o == 'object'\r\n                  ? function () { if ( o.hasOwnProperty(p) ) return ( v = o[p] ) != null; }\r\n                  : function () { if ( a.length > i ) return ( v = a[i++] ) != null; };\r\n\r\n            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n            // 'config() DECIMAL_PLACES not an integer: {v}'\r\n            // 'config() DECIMAL_PLACES out of range: {v}'\r\n            if ( has( p = 'DECIMAL_PLACES' ) && isValidInt( v, 0, MAX, 2, p ) ) {\r\n                DECIMAL_PLACES = v | 0;\r\n            }\r\n            r[p] = DECIMAL_PLACES;\r\n\r\n            // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n            // 'config() ROUNDING_MODE not an integer: {v}'\r\n            // 'config() ROUNDING_MODE out of range: {v}'\r\n            if ( has( p = 'ROUNDING_MODE' ) && isValidInt( v, 0, 8, 2, p ) ) {\r\n                ROUNDING_MODE = v | 0;\r\n            }\r\n            r[p] = ROUNDING_MODE;\r\n\r\n            // EXPONENTIAL_AT {number|number[]}\r\n            // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n            // 'config() EXPONENTIAL_AT not an integer: {v}'\r\n            // 'config() EXPONENTIAL_AT out of range: {v}'\r\n            if ( has( p = 'EXPONENTIAL_AT' ) ) {\r\n\r\n                if ( isArray(v) ) {\r\n                    if ( isValidInt( v[0], -MAX, 0, 2, p ) && isValidInt( v[1], 0, MAX, 2, p ) ) {\r\n                        TO_EXP_NEG = v[0] | 0;\r\n                        TO_EXP_POS = v[1] | 0;\r\n                    }\r\n                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {\r\n                    TO_EXP_NEG = -( TO_EXP_POS = ( v < 0 ? -v : v ) | 0 );\r\n                }\r\n            }\r\n            r[p] = [ TO_EXP_NEG, TO_EXP_POS ];\r\n\r\n            // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n            // 'config() RANGE not an integer: {v}'\r\n            // 'config() RANGE cannot be zero: {v}'\r\n            // 'config() RANGE out of range: {v}'\r\n            if ( has( p = 'RANGE' ) ) {\r\n\r\n                if ( isArray(v) ) {\r\n                    if ( isValidInt( v[0], -MAX, -1, 2, p ) && isValidInt( v[1], 1, MAX, 2, p ) ) {\r\n                        MIN_EXP = v[0] | 0;\r\n                        MAX_EXP = v[1] | 0;\r\n                    }\r\n                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {\r\n                    if ( v | 0 ) MIN_EXP = -( MAX_EXP = ( v < 0 ? -v : v ) | 0 );\r\n                    else if (ERRORS) raise( 2, p + ' cannot be zero', v );\r\n                }\r\n            }\r\n            r[p] = [ MIN_EXP, MAX_EXP ];\r\n\r\n            // ERRORS {boolean|number} true, false, 1 or 0.\r\n            // 'config() ERRORS not a boolean or binary digit: {v}'\r\n            if ( has( p = 'ERRORS' ) ) {\r\n\r\n                if ( v === !!v || v === 1 || v === 0 ) {\r\n                    id = 0;\r\n                    isValidInt = ( ERRORS = !!v ) ? intValidatorWithErrors : intValidatorNoErrors;\r\n                } else if (ERRORS) {\r\n                    raise( 2, p + notBool, v );\r\n                }\r\n            }\r\n            r[p] = ERRORS;\r\n\r\n            // CRYPTO {boolean|number} true, false, 1 or 0.\r\n            // 'config() CRYPTO not a boolean or binary digit: {v}'\r\n            // 'config() crypto unavailable: {crypto}'\r\n            if ( has( p = 'CRYPTO' ) ) {\r\n\r\n                if ( v === !!v || v === 1 || v === 0 ) {\r\n                    CRYPTO = !!( v && cryptoObj );\r\n                    if ( v && !CRYPTO && ERRORS ) raise( 2, 'crypto unavailable', cryptoObj );\r\n                } else if (ERRORS) {\r\n                    raise( 2, p + notBool, v );\r\n                }\r\n            }\r\n            r[p] = CRYPTO;\r\n\r\n            // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n            // 'config() MODULO_MODE not an integer: {v}'\r\n            // 'config() MODULO_MODE out of range: {v}'\r\n            if ( has( p = 'MODULO_MODE' ) && isValidInt( v, 0, 9, 2, p ) ) {\r\n                MODULO_MODE = v | 0;\r\n            }\r\n            r[p] = MODULO_MODE;\r\n\r\n            // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n            // 'config() POW_PRECISION not an integer: {v}'\r\n            // 'config() POW_PRECISION out of range: {v}'\r\n            if ( has( p = 'POW_PRECISION' ) && isValidInt( v, 0, MAX, 2, p ) ) {\r\n                POW_PRECISION = v | 0;\r\n            }\r\n            r[p] = POW_PRECISION;\r\n\r\n            // FORMAT {object}\r\n            // 'config() FORMAT not an object: {v}'\r\n            if ( has( p = 'FORMAT' ) ) {\r\n\r\n                if ( typeof v == 'object' ) {\r\n                    FORMAT = v;\r\n                } else if (ERRORS) {\r\n                    raise( 2, p + ' not an object', v );\r\n                }\r\n            }\r\n            r[p] = FORMAT;\r\n\r\n            return r;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the maximum of the arguments.\r\n         *\r\n         * arguments {number|string|BigNumber}\r\n         */\r\n        BigNumber.max = function () { return maxOrMin( arguments, P.lt ); };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the minimum of the arguments.\r\n         *\r\n         * arguments {number|string|BigNumber}\r\n         */\r\n        BigNumber.min = function () { return maxOrMin( arguments, P.gt ); };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n         * zeros are produced).\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         *\r\n         * 'random() decimal places not an integer: {dp}'\r\n         * 'random() decimal places out of range: {dp}'\r\n         * 'random() crypto unavailable: {crypto}'\r\n         */\r\n        BigNumber.random = (function () {\r\n            var pow2_53 = 0x20000000000000;\r\n\r\n            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n            // Check if Math.random() produces more than 32 bits of randomness.\r\n            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n            var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n              ? function () { return mathfloor( Math.random() * pow2_53 ); }\r\n              : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n                  (Math.random() * 0x800000 | 0); };\r\n\r\n            return function (dp) {\r\n                var a, b, e, k, v,\r\n                    i = 0,\r\n                    c = [],\r\n                    rand = new BigNumber(ONE);\r\n\r\n                dp = dp == null || !isValidInt( dp, 0, MAX, 14 ) ? DECIMAL_PLACES : dp | 0;\r\n                k = mathceil( dp / LOG_BASE );\r\n\r\n                if (CRYPTO) {\r\n\r\n                    // Browsers supporting crypto.getRandomValues.\r\n                    if ( cryptoObj && cryptoObj.getRandomValues ) {\r\n\r\n                        a = cryptoObj.getRandomValues( new Uint32Array( k *= 2 ) );\r\n\r\n                        for ( ; i < k; ) {\r\n\r\n                            // 53 bits:\r\n                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n                            //                                     11111 11111111 11111111\r\n                            // 0x20000 is 2^21.\r\n                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n                            // Rejection sampling:\r\n                            // 0 <= v < 9007199254740992\r\n                            // Probability that v >= 9e15, is\r\n                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n                            if ( v >= 9e15 ) {\r\n                                b = cryptoObj.getRandomValues( new Uint32Array(2) );\r\n                                a[i] = b[0];\r\n                                a[i + 1] = b[1];\r\n                            } else {\r\n\r\n                                // 0 <= v <= 8999999999999999\r\n                                // 0 <= (v % 1e14) <= 99999999999999\r\n                                c.push( v % 1e14 );\r\n                                i += 2;\r\n                            }\r\n                        }\r\n                        i = k / 2;\r\n\r\n                    // Node.js supporting crypto.randomBytes.\r\n                    } else if ( cryptoObj && cryptoObj.randomBytes ) {\r\n\r\n                        // buffer\r\n                        a = cryptoObj.randomBytes( k *= 7 );\r\n\r\n                        for ( ; i < k; ) {\r\n\r\n                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n                            // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n                            // 0 <= v < 9007199254740992\r\n                            v = ( ( a[i] & 31 ) * 0x1000000000000 ) + ( a[i + 1] * 0x10000000000 ) +\r\n                                  ( a[i + 2] * 0x100000000 ) + ( a[i + 3] * 0x1000000 ) +\r\n                                  ( a[i + 4] << 16 ) + ( a[i + 5] << 8 ) + a[i + 6];\r\n\r\n                            if ( v >= 9e15 ) {\r\n                                cryptoObj.randomBytes(7).copy( a, i );\r\n                            } else {\r\n\r\n                                // 0 <= (v % 1e14) <= 99999999999999\r\n                                c.push( v % 1e14 );\r\n                                i += 7;\r\n                            }\r\n                        }\r\n                        i = k / 7;\r\n                    } else if (ERRORS) {\r\n                        raise( 14, 'crypto unavailable', cryptoObj );\r\n                    }\r\n                }\r\n\r\n                // Use Math.random: CRYPTO is false or crypto is unavailable and ERRORS is false.\r\n                if (!i) {\r\n\r\n                    for ( ; i < k; ) {\r\n                        v = random53bitInt();\r\n                        if ( v < 9e15 ) c[i++] = v % 1e14;\r\n                    }\r\n                }\r\n\r\n                k = c[--i];\r\n                dp %= LOG_BASE;\r\n\r\n                // Convert trailing digits to zeros according to dp.\r\n                if ( k && dp ) {\r\n                    v = POWS_TEN[LOG_BASE - dp];\r\n                    c[i] = mathfloor( k / v ) * v;\r\n                }\r\n\r\n                // Remove trailing elements which are zero.\r\n                for ( ; c[i] === 0; c.pop(), i-- );\r\n\r\n                // Zero?\r\n                if ( i < 0 ) {\r\n                    c = [ e = 0 ];\r\n                } else {\r\n\r\n                    // Remove leading elements which are zero and adjust exponent accordingly.\r\n                    for ( e = -1 ; c[0] === 0; c.shift(), e -= LOG_BASE);\r\n\r\n                    // Count the digits of the first element of c to determine leading zeros, and...\r\n                    for ( i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n                    // adjust the exponent accordingly.\r\n                    if ( i < LOG_BASE ) e -= LOG_BASE - i;\r\n                }\r\n\r\n                rand.e = e;\r\n                rand.c = c;\r\n                return rand;\r\n            };\r\n        })();\r\n\r\n\r\n        // PRIVATE FUNCTIONS\r\n\r\n\r\n        // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n        function convertBase( str, baseOut, baseIn, sign ) {\r\n            var d, e, k, r, x, xc, y,\r\n                i = str.indexOf( '.' ),\r\n                dp = DECIMAL_PLACES,\r\n                rm = ROUNDING_MODE;\r\n\r\n            if ( baseIn < 37 ) str = str.toLowerCase();\r\n\r\n            // Non-integer.\r\n            if ( i >= 0 ) {\r\n                k = POW_PRECISION;\r\n\r\n                // Unlimited precision.\r\n                POW_PRECISION = 0;\r\n                str = str.replace( '.', '' );\r\n                y = new BigNumber(baseIn);\r\n                x = y.pow( str.length - i );\r\n                POW_PRECISION = k;\r\n\r\n                // Convert str as if an integer, then restore the fraction part by dividing the\r\n                // result by its base raised to a power.\r\n                y.c = toBaseOut( toFixedPoint( coeffToString( x.c ), x.e ), 10, baseOut );\r\n                y.e = y.c.length;\r\n            }\r\n\r\n            // Convert the number as integer.\r\n            xc = toBaseOut( str, baseIn, baseOut );\r\n            e = k = xc.length;\r\n\r\n            // Remove trailing zeros.\r\n            for ( ; xc[--k] == 0; xc.pop() );\r\n            if ( !xc[0] ) return '0';\r\n\r\n            if ( i < 0 ) {\r\n                --e;\r\n            } else {\r\n                x.c = xc;\r\n                x.e = e;\r\n\r\n                // sign is needed for correct rounding.\r\n                x.s = sign;\r\n                x = div( x, y, dp, rm, baseOut );\r\n                xc = x.c;\r\n                r = x.r;\r\n                e = x.e;\r\n            }\r\n\r\n            d = e + dp + 1;\r\n\r\n            // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.\r\n            i = xc[d];\r\n            k = baseOut / 2;\r\n            r = r || d < 0 || xc[d + 1] != null;\r\n\r\n            r = rm < 4 ? ( i != null || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )\r\n                       : i > k || i == k &&( rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n                         rm == ( x.s < 0 ? 8 : 7 ) );\r\n\r\n            if ( d < 1 || !xc[0] ) {\r\n\r\n                // 1^-dp or 0.\r\n                str = r ? toFixedPoint( '1', -dp ) : '0';\r\n            } else {\r\n                xc.length = d;\r\n\r\n                if (r) {\r\n\r\n                    // Rounding up may mean the previous digit has to be rounded up and so on.\r\n                    for ( --baseOut; ++xc[--d] > baseOut; ) {\r\n                        xc[d] = 0;\r\n\r\n                        if ( !d ) {\r\n                            ++e;\r\n                            xc.unshift(1);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Determine trailing zeros.\r\n                for ( k = xc.length; !xc[--k]; );\r\n\r\n                // E.g. [4, 11, 15] becomes 4bf.\r\n                for ( i = 0, str = ''; i <= k; str += ALPHABET.charAt( xc[i++] ) );\r\n                str = toFixedPoint( str, e );\r\n            }\r\n\r\n            // The caller will add the sign.\r\n            return str;\r\n        }\r\n\r\n\r\n        // Perform division in the specified base. Called by div and convertBase.\r\n        div = (function () {\r\n\r\n            // Assume non-zero x and k.\r\n            function multiply( x, k, base ) {\r\n                var m, temp, xlo, xhi,\r\n                    carry = 0,\r\n                    i = x.length,\r\n                    klo = k % SQRT_BASE,\r\n                    khi = k / SQRT_BASE | 0;\r\n\r\n                for ( x = x.slice(); i--; ) {\r\n                    xlo = x[i] % SQRT_BASE;\r\n                    xhi = x[i] / SQRT_BASE | 0;\r\n                    m = khi * xlo + xhi * klo;\r\n                    temp = klo * xlo + ( ( m % SQRT_BASE ) * SQRT_BASE ) + carry;\r\n                    carry = ( temp / base | 0 ) + ( m / SQRT_BASE | 0 ) + khi * xhi;\r\n                    x[i] = temp % base;\r\n                }\r\n\r\n                if (carry) x.unshift(carry);\r\n\r\n                return x;\r\n            }\r\n\r\n            function compare( a, b, aL, bL ) {\r\n                var i, cmp;\r\n\r\n                if ( aL != bL ) {\r\n                    cmp = aL > bL ? 1 : -1;\r\n                } else {\r\n\r\n                    for ( i = cmp = 0; i < aL; i++ ) {\r\n\r\n                        if ( a[i] != b[i] ) {\r\n                            cmp = a[i] > b[i] ? 1 : -1;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                return cmp;\r\n            }\r\n\r\n            function subtract( a, b, aL, base ) {\r\n                var i = 0;\r\n\r\n                // Subtract b from a.\r\n                for ( ; aL--; ) {\r\n                    a[aL] -= i;\r\n                    i = a[aL] < b[aL] ? 1 : 0;\r\n                    a[aL] = i * base + a[aL] - b[aL];\r\n                }\r\n\r\n                // Remove leading zeros.\r\n                for ( ; !a[0] && a.length > 1; a.shift() );\r\n            }\r\n\r\n            // x: dividend, y: divisor.\r\n            return function ( x, y, dp, rm, base ) {\r\n                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n                    yL, yz,\r\n                    s = x.s == y.s ? 1 : -1,\r\n                    xc = x.c,\r\n                    yc = y.c;\r\n\r\n                // Either NaN, Infinity or 0?\r\n                if ( !xc || !xc[0] || !yc || !yc[0] ) {\r\n\r\n                    return new BigNumber(\r\n\r\n                      // Return NaN if either NaN, or both Infinity or 0.\r\n                      !x.s || !y.s || ( xc ? yc && xc[0] == yc[0] : !yc ) ? NaN :\r\n\r\n                        // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n                        xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n                    );\r\n                }\r\n\r\n                q = new BigNumber(s);\r\n                qc = q.c = [];\r\n                e = x.e - y.e;\r\n                s = dp + e + 1;\r\n\r\n                if ( !base ) {\r\n                    base = BASE;\r\n                    e = bitFloor( x.e / LOG_BASE ) - bitFloor( y.e / LOG_BASE );\r\n                    s = s / LOG_BASE | 0;\r\n                }\r\n\r\n                // Result exponent may be one less then the current value of e.\r\n                // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n                for ( i = 0; yc[i] == ( xc[i] || 0 ); i++ );\r\n                if ( yc[i] > ( xc[i] || 0 ) ) e--;\r\n\r\n                if ( s < 0 ) {\r\n                    qc.push(1);\r\n                    more = true;\r\n                } else {\r\n                    xL = xc.length;\r\n                    yL = yc.length;\r\n                    i = 0;\r\n                    s += 2;\r\n\r\n                    // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n                    n = mathfloor( base / ( yc[0] + 1 ) );\r\n\r\n                    // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.\r\n                    // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {\r\n                    if ( n > 1 ) {\r\n                        yc = multiply( yc, n, base );\r\n                        xc = multiply( xc, n, base );\r\n                        yL = yc.length;\r\n                        xL = xc.length;\r\n                    }\r\n\r\n                    xi = yL;\r\n                    rem = xc.slice( 0, yL );\r\n                    remL = rem.length;\r\n\r\n                    // Add zeros to make remainder as long as divisor.\r\n                    for ( ; remL < yL; rem[remL++] = 0 );\r\n                    yz = yc.slice();\r\n                    yz.unshift(0);\r\n                    yc0 = yc[0];\r\n                    if ( yc[1] >= base / 2 ) yc0++;\r\n                    // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n                    // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;\r\n\r\n                    do {\r\n                        n = 0;\r\n\r\n                        // Compare divisor and remainder.\r\n                        cmp = compare( yc, rem, yL, remL );\r\n\r\n                        // If divisor < remainder.\r\n                        if ( cmp < 0 ) {\r\n\r\n                            // Calculate trial digit, n.\r\n\r\n                            rem0 = rem[0];\r\n                            if ( yL != remL ) rem0 = rem0 * base + ( rem[1] || 0 );\r\n\r\n                            // n is how many times the divisor goes into the current remainder.\r\n                            n = mathfloor( rem0 / yc0 );\r\n\r\n                            //  Algorithm:\r\n                            //  1. product = divisor * trial digit (n)\r\n                            //  2. if product > remainder: product -= divisor, n--\r\n                            //  3. remainder -= product\r\n                            //  4. if product was < remainder at 2:\r\n                            //    5. compare new remainder and divisor\r\n                            //    6. If remainder > divisor: remainder -= divisor, n++\r\n\r\n                            if ( n > 1 ) {\r\n\r\n                                // n may be > base only when base is 3.\r\n                                if (n >= base) n = base - 1;\r\n\r\n                                // product = divisor * trial digit.\r\n                                prod = multiply( yc, n, base );\r\n                                prodL = prod.length;\r\n                                remL = rem.length;\r\n\r\n                                // Compare product and remainder.\r\n                                // If product > remainder.\r\n                                // Trial digit n too high.\r\n                                // n is 1 too high about 5% of the time, and is not known to have\r\n                                // ever been more than 1 too high.\r\n                                while ( compare( prod, rem, prodL, remL ) == 1 ) {\r\n                                    n--;\r\n\r\n                                    // Subtract divisor from product.\r\n                                    subtract( prod, yL < prodL ? yz : yc, prodL, base );\r\n                                    prodL = prod.length;\r\n                                    cmp = 1;\r\n                                }\r\n                            } else {\r\n\r\n                                // n is 0 or 1, cmp is -1.\r\n                                // If n is 0, there is no need to compare yc and rem again below,\r\n                                // so change cmp to 1 to avoid it.\r\n                                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                                if ( n == 0 ) {\r\n\r\n                                    // divisor < remainder, so n must be at least 1.\r\n                                    cmp = n = 1;\r\n                                }\r\n\r\n                                // product = divisor\r\n                                prod = yc.slice();\r\n                                prodL = prod.length;\r\n                            }\r\n\r\n                            if ( prodL < remL ) prod.unshift(0);\r\n\r\n                            // Subtract product from remainder.\r\n                            subtract( rem, prod, remL, base );\r\n                            remL = rem.length;\r\n\r\n                             // If product was < remainder.\r\n                            if ( cmp == -1 ) {\r\n\r\n                                // Compare divisor and new remainder.\r\n                                // If divisor < new remainder, subtract divisor from remainder.\r\n                                // Trial digit n too low.\r\n                                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                                while ( compare( yc, rem, yL, remL ) < 1 ) {\r\n                                    n++;\r\n\r\n                                    // Subtract divisor from remainder.\r\n                                    subtract( rem, yL < remL ? yz : yc, remL, base );\r\n                                    remL = rem.length;\r\n                                }\r\n                            }\r\n                        } else if ( cmp === 0 ) {\r\n                            n++;\r\n                            rem = [0];\r\n                        } // else cmp === 1 and n will be 0\r\n\r\n                        // Add the next digit, n, to the result array.\r\n                        qc[i++] = n;\r\n\r\n                        // Update the remainder.\r\n                        if ( rem[0] ) {\r\n                            rem[remL++] = xc[xi] || 0;\r\n                        } else {\r\n                            rem = [ xc[xi] ];\r\n                            remL = 1;\r\n                        }\r\n                    } while ( ( xi++ < xL || rem[0] != null ) && s-- );\r\n\r\n                    more = rem[0] != null;\r\n\r\n                    // Leading zero?\r\n                    if ( !qc[0] ) qc.shift();\r\n                }\r\n\r\n                if ( base == BASE ) {\r\n\r\n                    // To calculate q.e, first get the number of digits of qc[0].\r\n                    for ( i = 1, s = qc[0]; s >= 10; s /= 10, i++ );\r\n                    round( q, dp + ( q.e = i + e * LOG_BASE - 1 ) + 1, rm, more );\r\n\r\n                // Caller is convertBase.\r\n                } else {\r\n                    q.e = e;\r\n                    q.r = +more;\r\n                }\r\n\r\n                return q;\r\n            };\r\n        })();\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n         * notation rounded to the specified decimal places or significant digits.\r\n         *\r\n         * n is a BigNumber.\r\n         * i is the index of the last digit required (i.e. the digit that may be rounded up).\r\n         * rm is the rounding mode.\r\n         * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.\r\n         */\r\n        function format( n, i, rm, caller ) {\r\n            var c0, e, ne, len, str;\r\n\r\n            rm = rm != null && isValidInt( rm, 0, 8, caller, roundingMode )\r\n              ? rm | 0 : ROUNDING_MODE;\r\n\r\n            if ( !n.c ) return n.toString();\r\n            c0 = n.c[0];\r\n            ne = n.e;\r\n\r\n            if ( i == null ) {\r\n                str = coeffToString( n.c );\r\n                str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG\r\n                  ? toExponential( str, ne )\r\n                  : toFixedPoint( str, ne );\r\n            } else {\r\n                n = round( new BigNumber(n), i, rm );\r\n\r\n                // n.e may have changed if the value was rounded up.\r\n                e = n.e;\r\n\r\n                str = coeffToString( n.c );\r\n                len = str.length;\r\n\r\n                // toPrecision returns exponential notation if the number of significant digits\r\n                // specified is less than the number of digits necessary to represent the integer\r\n                // part of the value in fixed-point notation.\r\n\r\n                // Exponential notation.\r\n                if ( caller == 19 || caller == 24 && ( i <= e || e <= TO_EXP_NEG ) ) {\r\n\r\n                    // Append zeros?\r\n                    for ( ; len < i; str += '0', len++ );\r\n                    str = toExponential( str, e );\r\n\r\n                // Fixed-point notation.\r\n                } else {\r\n                    i -= ne;\r\n                    str = toFixedPoint( str, e );\r\n\r\n                    // Append zeros?\r\n                    if ( e + 1 > len ) {\r\n                        if ( --i > 0 ) for ( str += '.'; i--; str += '0' );\r\n                    } else {\r\n                        i += e - len;\r\n                        if ( i > 0 ) {\r\n                            if ( e + 1 == len ) str += '.';\r\n                            for ( ; i--; str += '0' );\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return n.s < 0 && c0 ? '-' + str : str;\r\n        }\r\n\r\n\r\n        // Handle BigNumber.max and BigNumber.min.\r\n        function maxOrMin( args, method ) {\r\n            var m, n,\r\n                i = 0;\r\n\r\n            if ( isArray( args[0] ) ) args = args[0];\r\n            m = new BigNumber( args[0] );\r\n\r\n            for ( ; ++i < args.length; ) {\r\n                n = new BigNumber( args[i] );\r\n\r\n                // If any number is NaN, return NaN.\r\n                if ( !n.s ) {\r\n                    m = n;\r\n                    break;\r\n                } else if ( method.call( m, n ) ) {\r\n                    m = n;\r\n                }\r\n            }\r\n\r\n            return m;\r\n        }\r\n\r\n\r\n        /*\r\n         * Return true if n is an integer in range, otherwise throw.\r\n         * Use for argument validation when ERRORS is true.\r\n         */\r\n        function intValidatorWithErrors( n, min, max, caller, name ) {\r\n            if ( n < min || n > max || n != truncate(n) ) {\r\n                raise( caller, ( name || 'decimal places' ) +\r\n                  ( n < min || n > max ? ' out of range' : ' not an integer' ), n );\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n\r\n        /*\r\n         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n         * Called by minus, plus and times.\r\n         */\r\n        function normalise( n, c, e ) {\r\n            var i = 1,\r\n                j = c.length;\r\n\r\n             // Remove trailing zeros.\r\n            for ( ; !c[--j]; c.pop() );\r\n\r\n            // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n            for ( j = c[0]; j >= 10; j /= 10, i++ );\r\n\r\n            // Overflow?\r\n            if ( ( e = i + e * LOG_BASE - 1 ) > MAX_EXP ) {\r\n\r\n                // Infinity.\r\n                n.c = n.e = null;\r\n\r\n            // Underflow?\r\n            } else if ( e < MIN_EXP ) {\r\n\r\n                // Zero.\r\n                n.c = [ n.e = 0 ];\r\n            } else {\r\n                n.e = e;\r\n                n.c = c;\r\n            }\r\n\r\n            return n;\r\n        }\r\n\r\n\r\n        // Handle values that fail the validity test in BigNumber.\r\n        parseNumeric = (function () {\r\n            var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n                dotAfter = /^([^.]+)\\.$/,\r\n                dotBefore = /^\\.([^.]+)$/,\r\n                isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n                whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n            return function ( x, str, num, b ) {\r\n                var base,\r\n                    s = num ? str : str.replace( whitespaceOrPlus, '' );\r\n\r\n                // No exception on ±Infinity or NaN.\r\n                if ( isInfinityOrNaN.test(s) ) {\r\n                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n                } else {\r\n                    if ( !num ) {\r\n\r\n                        // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n                        s = s.replace( basePrefix, function ( m, p1, p2 ) {\r\n                            base = ( p2 = p2.toLowerCase() ) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n                            return !b || b == base ? p1 : m;\r\n                        });\r\n\r\n                        if (b) {\r\n                            base = b;\r\n\r\n                            // E.g. '1.' to '1', '.1' to '0.1'\r\n                            s = s.replace( dotAfter, '$1' ).replace( dotBefore, '0.$1' );\r\n                        }\r\n\r\n                        if ( str != s ) return new BigNumber( s, base );\r\n                    }\r\n\r\n                    // 'new BigNumber() not a number: {n}'\r\n                    // 'new BigNumber() not a base {b} number: {n}'\r\n                    if (ERRORS) raise( id, 'not a' + ( b ? ' base ' + b : '' ) + ' number', str );\r\n                    x.s = null;\r\n                }\r\n\r\n                x.c = x.e = null;\r\n                id = 0;\r\n            }\r\n        })();\r\n\r\n\r\n        // Throw a BigNumber Error.\r\n        function raise( caller, msg, val ) {\r\n            var error = new Error( [\r\n                'new BigNumber',     // 0\r\n                'cmp',               // 1\r\n                'config',            // 2\r\n                'div',               // 3\r\n                'divToInt',          // 4\r\n                'eq',                // 5\r\n                'gt',                // 6\r\n                'gte',               // 7\r\n                'lt',                // 8\r\n                'lte',               // 9\r\n                'minus',             // 10\r\n                'mod',               // 11\r\n                'plus',              // 12\r\n                'precision',         // 13\r\n                'random',            // 14\r\n                'round',             // 15\r\n                'shift',             // 16\r\n                'times',             // 17\r\n                'toDigits',          // 18\r\n                'toExponential',     // 19\r\n                'toFixed',           // 20\r\n                'toFormat',          // 21\r\n                'toFraction',        // 22\r\n                'pow',               // 23\r\n                'toPrecision',       // 24\r\n                'toString',          // 25\r\n                'BigNumber'          // 26\r\n            ][caller] + '() ' + msg + ': ' + val );\r\n\r\n            error.name = 'BigNumber Error';\r\n            id = 0;\r\n            throw error;\r\n        }\r\n\r\n\r\n        /*\r\n         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n         * If r is truthy, it is known that there are more digits after the rounding digit.\r\n         */\r\n        function round( x, sd, rm, r ) {\r\n            var d, i, j, k, n, ni, rd,\r\n                xc = x.c,\r\n                pows10 = POWS_TEN;\r\n\r\n            // if x is not Infinity or NaN...\r\n            if (xc) {\r\n\r\n                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n                // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n                // ni is the index of n within x.c.\r\n                // d is the number of digits of n.\r\n                // i is the index of rd within n including leading zeros.\r\n                // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n                out: {\r\n\r\n                    // Get the number of digits of the first element of xc.\r\n                    for ( d = 1, k = xc[0]; k >= 10; k /= 10, d++ );\r\n                    i = sd - d;\r\n\r\n                    // If the rounding digit is in the first element of xc...\r\n                    if ( i < 0 ) {\r\n                        i += LOG_BASE;\r\n                        j = sd;\r\n                        n = xc[ ni = 0 ];\r\n\r\n                        // Get the rounding digit at index j of n.\r\n                        rd = n / pows10[ d - j - 1 ] % 10 | 0;\r\n                    } else {\r\n                        ni = mathceil( ( i + 1 ) / LOG_BASE );\r\n\r\n                        if ( ni >= xc.length ) {\r\n\r\n                            if (r) {\r\n\r\n                                // Needed by sqrt.\r\n                                for ( ; xc.length <= ni; xc.push(0) );\r\n                                n = rd = 0;\r\n                                d = 1;\r\n                                i %= LOG_BASE;\r\n                                j = i - LOG_BASE + 1;\r\n                            } else {\r\n                                break out;\r\n                            }\r\n                        } else {\r\n                            n = k = xc[ni];\r\n\r\n                            // Get the number of digits of n.\r\n                            for ( d = 1; k >= 10; k /= 10, d++ );\r\n\r\n                            // Get the index of rd within n.\r\n                            i %= LOG_BASE;\r\n\r\n                            // Get the index of rd within n, adjusted for leading zeros.\r\n                            // The number of leading zeros of n is given by LOG_BASE - d.\r\n                            j = i - LOG_BASE + d;\r\n\r\n                            // Get the rounding digit at index j of n.\r\n                            rd = j < 0 ? 0 : n / pows10[ d - j - 1 ] % 10 | 0;\r\n                        }\r\n                    }\r\n\r\n                    r = r || sd < 0 ||\r\n\r\n                    // Are there any non-zero digits after the rounding digit?\r\n                    // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right\r\n                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n                      xc[ni + 1] != null || ( j < 0 ? n : n % pows10[ d - j - 1 ] );\r\n\r\n                    r = rm < 4\r\n                      ? ( rd || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )\r\n                      : rd > 5 || rd == 5 && ( rm == 4 || r || rm == 6 &&\r\n\r\n                        // Check whether the digit to the left of the rounding digit is odd.\r\n                        ( ( i > 0 ? j > 0 ? n / pows10[ d - j ] : 0 : xc[ni - 1] ) % 10 ) & 1 ||\r\n                          rm == ( x.s < 0 ? 8 : 7 ) );\r\n\r\n                    if ( sd < 1 || !xc[0] ) {\r\n                        xc.length = 0;\r\n\r\n                        if (r) {\r\n\r\n                            // Convert sd to decimal places.\r\n                            sd -= x.e + 1;\r\n\r\n                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n                            xc[0] = pows10[ ( LOG_BASE - sd % LOG_BASE ) % LOG_BASE ];\r\n                            x.e = -sd || 0;\r\n                        } else {\r\n\r\n                            // Zero.\r\n                            xc[0] = x.e = 0;\r\n                        }\r\n\r\n                        return x;\r\n                    }\r\n\r\n                    // Remove excess digits.\r\n                    if ( i == 0 ) {\r\n                        xc.length = ni;\r\n                        k = 1;\r\n                        ni--;\r\n                    } else {\r\n                        xc.length = ni + 1;\r\n                        k = pows10[ LOG_BASE - i ];\r\n\r\n                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n                        // j > 0 means i > number of leading zeros of n.\r\n                        xc[ni] = j > 0 ? mathfloor( n / pows10[ d - j ] % pows10[j] ) * k : 0;\r\n                    }\r\n\r\n                    // Round up?\r\n                    if (r) {\r\n\r\n                        for ( ; ; ) {\r\n\r\n                            // If the digit to be rounded up is in the first element of xc...\r\n                            if ( ni == 0 ) {\r\n\r\n                                // i will be the length of xc[0] before k is added.\r\n                                for ( i = 1, j = xc[0]; j >= 10; j /= 10, i++ );\r\n                                j = xc[0] += k;\r\n                                for ( k = 1; j >= 10; j /= 10, k++ );\r\n\r\n                                // if i != k the length has increased.\r\n                                if ( i != k ) {\r\n                                    x.e++;\r\n                                    if ( xc[0] == BASE ) xc[0] = 1;\r\n                                }\r\n\r\n                                break;\r\n                            } else {\r\n                                xc[ni] += k;\r\n                                if ( xc[ni] != BASE ) break;\r\n                                xc[ni--] = 0;\r\n                                k = 1;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Remove trailing zeros.\r\n                    for ( i = xc.length; xc[--i] === 0; xc.pop() );\r\n                }\r\n\r\n                // Overflow? Infinity.\r\n                if ( x.e > MAX_EXP ) {\r\n                    x.c = x.e = null;\r\n\r\n                // Underflow? Zero.\r\n                } else if ( x.e < MIN_EXP ) {\r\n                    x.c = [ x.e = 0 ];\r\n                }\r\n            }\r\n\r\n            return x;\r\n        }\r\n\r\n\r\n        // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n         */\r\n        P.absoluteValue = P.abs = function () {\r\n            var x = new BigNumber(this);\r\n            if ( x.s < 0 ) x.s = 1;\r\n            return x;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole\r\n         * number in the direction of Infinity.\r\n         */\r\n        P.ceil = function () {\r\n            return round( new BigNumber(this), this.e + 1, 2 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return\r\n         * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n         * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n         * 0 if they have the same value,\r\n         * or null if the value of either is NaN.\r\n         */\r\n        P.comparedTo = P.cmp = function ( y, b ) {\r\n            id = 1;\r\n            return compare( this, new BigNumber( y, b ) );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return the number of decimal places of the value of this BigNumber, or null if the value\r\n         * of this BigNumber is ±Infinity or NaN.\r\n         */\r\n        P.decimalPlaces = P.dp = function () {\r\n            var n, v,\r\n                c = this.c;\r\n\r\n            if ( !c ) return null;\r\n            n = ( ( v = c.length - 1 ) - bitFloor( this.e / LOG_BASE ) ) * LOG_BASE;\r\n\r\n            // Subtract the number of trailing zeros of the last number.\r\n            if ( v = c[v] ) for ( ; v % 10 == 0; v /= 10, n-- );\r\n            if ( n < 0 ) n = 0;\r\n\r\n            return n;\r\n        };\r\n\r\n\r\n        /*\r\n         *  n / 0 = I\r\n         *  n / N = N\r\n         *  n / I = 0\r\n         *  0 / n = 0\r\n         *  0 / 0 = N\r\n         *  0 / N = N\r\n         *  0 / I = 0\r\n         *  N / n = N\r\n         *  N / 0 = N\r\n         *  N / N = N\r\n         *  N / I = N\r\n         *  I / n = I\r\n         *  I / 0 = I\r\n         *  I / N = N\r\n         *  I / I = N\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n         */\r\n        P.dividedBy = P.div = function ( y, b ) {\r\n            id = 3;\r\n            return div( this, new BigNumber( y, b ), DECIMAL_PLACES, ROUNDING_MODE );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n         * BigNumber by the value of BigNumber(y, b).\r\n         */\r\n        P.dividedToIntegerBy = P.divToInt = function ( y, b ) {\r\n            id = 4;\r\n            return div( this, new BigNumber( y, b ), 0, 1 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n         * otherwise returns false.\r\n         */\r\n        P.equals = P.eq = function ( y, b ) {\r\n            id = 5;\r\n            return compare( this, new BigNumber( y, b ) ) === 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole\r\n         * number in the direction of -Infinity.\r\n         */\r\n        P.floor = function () {\r\n            return round( new BigNumber(this), this.e + 1, 3 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n         * otherwise returns false.\r\n         */\r\n        P.greaterThan = P.gt = function ( y, b ) {\r\n            id = 6;\r\n            return compare( this, new BigNumber( y, b ) ) > 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is greater than or equal to the value of\r\n         * BigNumber(y, b), otherwise returns false.\r\n         */\r\n        P.greaterThanOrEqualTo = P.gte = function ( y, b ) {\r\n            id = 7;\r\n            return ( b = compare( this, new BigNumber( y, b ) ) ) === 1 || b === 0;\r\n\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is a finite number, otherwise returns false.\r\n         */\r\n        P.isFinite = function () {\r\n            return !!this.c;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n         */\r\n        P.isInteger = P.isInt = function () {\r\n            return !!this.c && bitFloor( this.e / LOG_BASE ) > this.c.length - 2;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is NaN, otherwise returns false.\r\n         */\r\n        P.isNaN = function () {\r\n            return !this.s;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is negative, otherwise returns false.\r\n         */\r\n        P.isNegative = P.isNeg = function () {\r\n            return this.s < 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.\r\n         */\r\n        P.isZero = function () {\r\n            return !!this.c && this.c[0] == 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n         * otherwise returns false.\r\n         */\r\n        P.lessThan = P.lt = function ( y, b ) {\r\n            id = 8;\r\n            return compare( this, new BigNumber( y, b ) ) < 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is less than or equal to the value of\r\n         * BigNumber(y, b), otherwise returns false.\r\n         */\r\n        P.lessThanOrEqualTo = P.lte = function ( y, b ) {\r\n            id = 9;\r\n            return ( b = compare( this, new BigNumber( y, b ) ) ) === -1 || b === 0;\r\n        };\r\n\r\n\r\n        /*\r\n         *  n - 0 = n\r\n         *  n - N = N\r\n         *  n - I = -I\r\n         *  0 - n = -n\r\n         *  0 - 0 = 0\r\n         *  0 - N = N\r\n         *  0 - I = -I\r\n         *  N - n = N\r\n         *  N - 0 = N\r\n         *  N - N = N\r\n         *  N - I = N\r\n         *  I - n = I\r\n         *  I - 0 = I\r\n         *  I - N = N\r\n         *  I - I = N\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n         * BigNumber(y, b).\r\n         */\r\n        P.minus = P.sub = function ( y, b ) {\r\n            var i, j, t, xLTy,\r\n                x = this,\r\n                a = x.s;\r\n\r\n            id = 10;\r\n            y = new BigNumber( y, b );\r\n            b = y.s;\r\n\r\n            // Either NaN?\r\n            if ( !a || !b ) return new BigNumber(NaN);\r\n\r\n            // Signs differ?\r\n            if ( a != b ) {\r\n                y.s = -b;\r\n                return x.plus(y);\r\n            }\r\n\r\n            var xe = x.e / LOG_BASE,\r\n                ye = y.e / LOG_BASE,\r\n                xc = x.c,\r\n                yc = y.c;\r\n\r\n            if ( !xe || !ye ) {\r\n\r\n                // Either Infinity?\r\n                if ( !xc || !yc ) return xc ? ( y.s = -b, y ) : new BigNumber( yc ? x : NaN );\r\n\r\n                // Either zero?\r\n                if ( !xc[0] || !yc[0] ) {\r\n\r\n                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n                    return yc[0] ? ( y.s = -b, y ) : new BigNumber( xc[0] ? x :\r\n\r\n                      // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n                      ROUNDING_MODE == 3 ? -0 : 0 );\r\n                }\r\n            }\r\n\r\n            xe = bitFloor(xe);\r\n            ye = bitFloor(ye);\r\n            xc = xc.slice();\r\n\r\n            // Determine which is the bigger number.\r\n            if ( a = xe - ye ) {\r\n\r\n                if ( xLTy = a < 0 ) {\r\n                    a = -a;\r\n                    t = xc;\r\n                } else {\r\n                    ye = xe;\r\n                    t = yc;\r\n                }\r\n\r\n                t.reverse();\r\n\r\n                // Prepend zeros to equalise exponents.\r\n                for ( b = a; b--; t.push(0) );\r\n                t.reverse();\r\n            } else {\r\n\r\n                // Exponents equal. Check digit by digit.\r\n                j = ( xLTy = ( a = xc.length ) < ( b = yc.length ) ) ? a : b;\r\n\r\n                for ( a = b = 0; b < j; b++ ) {\r\n\r\n                    if ( xc[b] != yc[b] ) {\r\n                        xLTy = xc[b] < yc[b];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // x < y? Point xc to the array of the bigger number.\r\n            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n            b = ( j = yc.length ) - ( i = xc.length );\r\n\r\n            // Append zeros to xc if shorter.\r\n            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n            if ( b > 0 ) for ( ; b--; xc[i++] = 0 );\r\n            b = BASE - 1;\r\n\r\n            // Subtract yc from xc.\r\n            for ( ; j > a; ) {\r\n\r\n                if ( xc[--j] < yc[j] ) {\r\n                    for ( i = j; i && !xc[--i]; xc[i] = b );\r\n                    --xc[i];\r\n                    xc[j] += BASE;\r\n                }\r\n\r\n                xc[j] -= yc[j];\r\n            }\r\n\r\n            // Remove leading zeros and adjust exponent accordingly.\r\n            for ( ; xc[0] == 0; xc.shift(), --ye );\r\n\r\n            // Zero?\r\n            if ( !xc[0] ) {\r\n\r\n                // Following IEEE 754 (2008) 6.3,\r\n                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n                y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n                y.c = [ y.e = 0 ];\r\n                return y;\r\n            }\r\n\r\n            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n            // for finite x and y.\r\n            return normalise( y, xc, ye );\r\n        };\r\n\r\n\r\n        /*\r\n         *   n % 0 =  N\r\n         *   n % N =  N\r\n         *   n % I =  n\r\n         *   0 % n =  0\r\n         *  -0 % n = -0\r\n         *   0 % 0 =  N\r\n         *   0 % N =  N\r\n         *   0 % I =  0\r\n         *   N % n =  N\r\n         *   N % 0 =  N\r\n         *   N % N =  N\r\n         *   N % I =  N\r\n         *   I % n =  N\r\n         *   I % 0 =  N\r\n         *   I % N =  N\r\n         *   I % I =  N\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n         * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n         */\r\n        P.modulo = P.mod = function ( y, b ) {\r\n            var q, s,\r\n                x = this;\r\n\r\n            id = 11;\r\n            y = new BigNumber( y, b );\r\n\r\n            // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n            if ( !x.c || !y.s || y.c && !y.c[0] ) {\r\n                return new BigNumber(NaN);\r\n\r\n            // Return x if y is Infinity or x is zero.\r\n            } else if ( !y.c || x.c && !x.c[0] ) {\r\n                return new BigNumber(x);\r\n            }\r\n\r\n            if ( MODULO_MODE == 9 ) {\r\n\r\n                // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n                // r = x - qy    where  0 <= r < abs(y)\r\n                s = y.s;\r\n                y.s = 1;\r\n                q = div( x, y, 0, 3 );\r\n                y.s = s;\r\n                q.s *= s;\r\n            } else {\r\n                q = div( x, y, 0, MODULO_MODE );\r\n            }\r\n\r\n            return x.minus( q.times(y) );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n         * i.e. multiplied by -1.\r\n         */\r\n        P.negated = P.neg = function () {\r\n            var x = new BigNumber(this);\r\n            x.s = -x.s || null;\r\n            return x;\r\n        };\r\n\r\n\r\n        /*\r\n         *  n + 0 = n\r\n         *  n + N = N\r\n         *  n + I = I\r\n         *  0 + n = n\r\n         *  0 + 0 = 0\r\n         *  0 + N = N\r\n         *  0 + I = I\r\n         *  N + n = N\r\n         *  N + 0 = N\r\n         *  N + N = N\r\n         *  N + I = N\r\n         *  I + n = I\r\n         *  I + 0 = I\r\n         *  I + N = N\r\n         *  I + I = I\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n         * BigNumber(y, b).\r\n         */\r\n        P.plus = P.add = function ( y, b ) {\r\n            var t,\r\n                x = this,\r\n                a = x.s;\r\n\r\n            id = 12;\r\n            y = new BigNumber( y, b );\r\n            b = y.s;\r\n\r\n            // Either NaN?\r\n            if ( !a || !b ) return new BigNumber(NaN);\r\n\r\n            // Signs differ?\r\n             if ( a != b ) {\r\n                y.s = -b;\r\n                return x.minus(y);\r\n            }\r\n\r\n            var xe = x.e / LOG_BASE,\r\n                ye = y.e / LOG_BASE,\r\n                xc = x.c,\r\n                yc = y.c;\r\n\r\n            if ( !xe || !ye ) {\r\n\r\n                // Return ±Infinity if either ±Infinity.\r\n                if ( !xc || !yc ) return new BigNumber( a / 0 );\r\n\r\n                // Either zero?\r\n                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n                if ( !xc[0] || !yc[0] ) return yc[0] ? y : new BigNumber( xc[0] ? x : a * 0 );\r\n            }\r\n\r\n            xe = bitFloor(xe);\r\n            ye = bitFloor(ye);\r\n            xc = xc.slice();\r\n\r\n            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n            if ( a = xe - ye ) {\r\n                if ( a > 0 ) {\r\n                    ye = xe;\r\n                    t = yc;\r\n                } else {\r\n                    a = -a;\r\n                    t = xc;\r\n                }\r\n\r\n                t.reverse();\r\n                for ( ; a--; t.push(0) );\r\n                t.reverse();\r\n            }\r\n\r\n            a = xc.length;\r\n            b = yc.length;\r\n\r\n            // Point xc to the longer array, and b to the shorter length.\r\n            if ( a - b < 0 ) t = yc, yc = xc, xc = t, b = a;\r\n\r\n            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n            for ( a = 0; b; ) {\r\n                a = ( xc[--b] = xc[b] + yc[b] + a ) / BASE | 0;\r\n                xc[b] %= BASE;\r\n            }\r\n\r\n            if (a) {\r\n                xc.unshift(a);\r\n                ++ye;\r\n            }\r\n\r\n            // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n            // ye = MAX_EXP + 1 possible\r\n            return normalise( y, xc, ye );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return the number of significant digits of the value of this BigNumber.\r\n         *\r\n         * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n         */\r\n        P.precision = P.sd = function (z) {\r\n            var n, v,\r\n                x = this,\r\n                c = x.c;\r\n\r\n            // 'precision() argument not a boolean or binary digit: {z}'\r\n            if ( z != null && z !== !!z && z !== 1 && z !== 0 ) {\r\n                if (ERRORS) raise( 13, 'argument' + notBool, z );\r\n                if ( z != !!z ) z = null;\r\n            }\r\n\r\n            if ( !c ) return null;\r\n            v = c.length - 1;\r\n            n = v * LOG_BASE + 1;\r\n\r\n            if ( v = c[v] ) {\r\n\r\n                // Subtract the number of trailing zeros of the last element.\r\n                for ( ; v % 10 == 0; v /= 10, n-- );\r\n\r\n                // Add the number of digits of the first element.\r\n                for ( v = c[0]; v >= 10; v /= 10, n++ );\r\n            }\r\n\r\n            if ( z && x.e + 1 > n ) n = x.e + 1;\r\n\r\n            return n;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of\r\n         * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if\r\n         * omitted.\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'round() decimal places out of range: {dp}'\r\n         * 'round() decimal places not an integer: {dp}'\r\n         * 'round() rounding mode not an integer: {rm}'\r\n         * 'round() rounding mode out of range: {rm}'\r\n         */\r\n        P.round = function ( dp, rm ) {\r\n            var n = new BigNumber(this);\r\n\r\n            if ( dp == null || isValidInt( dp, 0, MAX, 15 ) ) {\r\n                round( n, ~~dp + this.e + 1, rm == null ||\r\n                  !isValidInt( rm, 0, 8, 15, roundingMode ) ? ROUNDING_MODE : rm | 0 );\r\n            }\r\n\r\n            return n;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n         *\r\n         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n         *\r\n         * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity\r\n         * otherwise.\r\n         *\r\n         * 'shift() argument not an integer: {k}'\r\n         * 'shift() argument out of range: {k}'\r\n         */\r\n        P.shift = function (k) {\r\n            var n = this;\r\n            return isValidInt( k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument' )\r\n\r\n              // k < 1e+21, or truncate(k) will produce exponential notation.\r\n              ? n.times( '1e' + truncate(k) )\r\n              : new BigNumber( n.c && n.c[0] && ( k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER )\r\n                ? n.s * ( k < 0 ? 0 : 1 / 0 )\r\n                : n );\r\n        };\r\n\r\n\r\n        /*\r\n         *  sqrt(-n) =  N\r\n         *  sqrt( N) =  N\r\n         *  sqrt(-I) =  N\r\n         *  sqrt( I) =  I\r\n         *  sqrt( 0) =  0\r\n         *  sqrt(-0) = -0\r\n         *\r\n         * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n         */\r\n        P.squareRoot = P.sqrt = function () {\r\n            var m, n, r, rep, t,\r\n                x = this,\r\n                c = x.c,\r\n                s = x.s,\r\n                e = x.e,\r\n                dp = DECIMAL_PLACES + 4,\r\n                half = new BigNumber('0.5');\r\n\r\n            // Negative/NaN/Infinity/zero?\r\n            if ( s !== 1 || !c || !c[0] ) {\r\n                return new BigNumber( !s || s < 0 && ( !c || c[0] ) ? NaN : c ? x : 1 / 0 );\r\n            }\r\n\r\n            // Initial estimate.\r\n            s = Math.sqrt( +x );\r\n\r\n            // Math.sqrt underflow/overflow?\r\n            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n            if ( s == 0 || s == 1 / 0 ) {\r\n                n = coeffToString(c);\r\n                if ( ( n.length + e ) % 2 == 0 ) n += '0';\r\n                s = Math.sqrt(n);\r\n                e = bitFloor( ( e + 1 ) / 2 ) - ( e < 0 || e % 2 );\r\n\r\n                if ( s == 1 / 0 ) {\r\n                    n = '1e' + e;\r\n                } else {\r\n                    n = s.toExponential();\r\n                    n = n.slice( 0, n.indexOf('e') + 1 ) + e;\r\n                }\r\n\r\n                r = new BigNumber(n);\r\n            } else {\r\n                r = new BigNumber( s + '' );\r\n            }\r\n\r\n            // Check for zero.\r\n            // r could be zero if MIN_EXP is changed after the this value was created.\r\n            // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n            // coeffToString to throw.\r\n            if ( r.c[0] ) {\r\n                e = r.e;\r\n                s = e + dp;\r\n                if ( s < 3 ) s = 0;\r\n\r\n                // Newton-Raphson iteration.\r\n                for ( ; ; ) {\r\n                    t = r;\r\n                    r = half.times( t.plus( div( x, t, dp, 1 ) ) );\r\n\r\n                    if ( coeffToString( t.c   ).slice( 0, s ) === ( n =\r\n                         coeffToString( r.c ) ).slice( 0, s ) ) {\r\n\r\n                        // The exponent of r may here be one less than the final result exponent,\r\n                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n                        // are indexed correctly.\r\n                        if ( r.e < e ) --s;\r\n                        n = n.slice( s - 3, s + 1 );\r\n\r\n                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n                        // iteration.\r\n                        if ( n == '9999' || !rep && n == '4999' ) {\r\n\r\n                            // On the first iteration only, check to see if rounding up gives the\r\n                            // exact result as the nines may infinitely repeat.\r\n                            if ( !rep ) {\r\n                                round( t, t.e + DECIMAL_PLACES + 2, 0 );\r\n\r\n                                if ( t.times(t).eq(x) ) {\r\n                                    r = t;\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            dp += 4;\r\n                            s += 4;\r\n                            rep = 1;\r\n                        } else {\r\n\r\n                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n                            // result. If not, then there are further digits and m will be truthy.\r\n                            if ( !+n || !+n.slice(1) && n.charAt(0) == '5' ) {\r\n\r\n                                // Truncate to the first rounding digit.\r\n                                round( r, r.e + DECIMAL_PLACES + 2, 1 );\r\n                                m = !r.times(r).eq(x);\r\n                            }\r\n\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return round( r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m );\r\n        };\r\n\r\n\r\n        /*\r\n         *  n * 0 = 0\r\n         *  n * N = N\r\n         *  n * I = I\r\n         *  0 * n = 0\r\n         *  0 * 0 = 0\r\n         *  0 * N = N\r\n         *  0 * I = N\r\n         *  N * n = N\r\n         *  N * 0 = N\r\n         *  N * N = N\r\n         *  N * I = N\r\n         *  I * n = I\r\n         *  I * 0 = N\r\n         *  I * N = N\r\n         *  I * I = I\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber times the value of\r\n         * BigNumber(y, b).\r\n         */\r\n        P.times = P.mul = function ( y, b ) {\r\n            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n                base, sqrtBase,\r\n                x = this,\r\n                xc = x.c,\r\n                yc = ( id = 17, y = new BigNumber( y, b ) ).c;\r\n\r\n            // Either NaN, ±Infinity or ±0?\r\n            if ( !xc || !yc || !xc[0] || !yc[0] ) {\r\n\r\n                // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n                if ( !x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc ) {\r\n                    y.c = y.e = y.s = null;\r\n                } else {\r\n                    y.s *= x.s;\r\n\r\n                    // Return ±Infinity if either is ±Infinity.\r\n                    if ( !xc || !yc ) {\r\n                        y.c = y.e = null;\r\n\r\n                    // Return ±0 if either is ±0.\r\n                    } else {\r\n                        y.c = [0];\r\n                        y.e = 0;\r\n                    }\r\n                }\r\n\r\n                return y;\r\n            }\r\n\r\n            e = bitFloor( x.e / LOG_BASE ) + bitFloor( y.e / LOG_BASE );\r\n            y.s *= x.s;\r\n            xcL = xc.length;\r\n            ycL = yc.length;\r\n\r\n            // Ensure xc points to longer array and xcL to its length.\r\n            if ( xcL < ycL ) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n            // Initialise the result array with zeros.\r\n            for ( i = xcL + ycL, zc = []; i--; zc.push(0) );\r\n\r\n            base = BASE;\r\n            sqrtBase = SQRT_BASE;\r\n\r\n            for ( i = ycL; --i >= 0; ) {\r\n                c = 0;\r\n                ylo = yc[i] % sqrtBase;\r\n                yhi = yc[i] / sqrtBase | 0;\r\n\r\n                for ( k = xcL, j = i + k; j > i; ) {\r\n                    xlo = xc[--k] % sqrtBase;\r\n                    xhi = xc[k] / sqrtBase | 0;\r\n                    m = yhi * xlo + xhi * ylo;\r\n                    xlo = ylo * xlo + ( ( m % sqrtBase ) * sqrtBase ) + zc[j] + c;\r\n                    c = ( xlo / base | 0 ) + ( m / sqrtBase | 0 ) + yhi * xhi;\r\n                    zc[j--] = xlo % base;\r\n                }\r\n\r\n                zc[j] = c;\r\n            }\r\n\r\n            if (c) {\r\n                ++e;\r\n            } else {\r\n                zc.shift();\r\n            }\r\n\r\n            return normalise( y, zc, e );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of\r\n         * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n         *\r\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toDigits() precision out of range: {sd}'\r\n         * 'toDigits() precision not an integer: {sd}'\r\n         * 'toDigits() rounding mode not an integer: {rm}'\r\n         * 'toDigits() rounding mode out of range: {rm}'\r\n         */\r\n        P.toDigits = function ( sd, rm ) {\r\n            var n = new BigNumber(this);\r\n            sd = sd == null || !isValidInt( sd, 1, MAX, 18, 'precision' ) ? null : sd | 0;\r\n            rm = rm == null || !isValidInt( rm, 0, 8, 18, roundingMode ) ? ROUNDING_MODE : rm | 0;\r\n            return sd ? round( n, sd, rm ) : n;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber in exponential notation and\r\n         * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toExponential() decimal places not an integer: {dp}'\r\n         * 'toExponential() decimal places out of range: {dp}'\r\n         * 'toExponential() rounding mode not an integer: {rm}'\r\n         * 'toExponential() rounding mode out of range: {rm}'\r\n         */\r\n        P.toExponential = function ( dp, rm ) {\r\n            return format( this,\r\n              dp != null && isValidInt( dp, 0, MAX, 19 ) ? ~~dp + 1 : null, rm, 19 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n         *\r\n         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n         * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toFixed() decimal places not an integer: {dp}'\r\n         * 'toFixed() decimal places out of range: {dp}'\r\n         * 'toFixed() rounding mode not an integer: {rm}'\r\n         * 'toFixed() rounding mode out of range: {rm}'\r\n         */\r\n        P.toFixed = function ( dp, rm ) {\r\n            return format( this, dp != null && isValidInt( dp, 0, MAX, 20 )\r\n              ? ~~dp + this.e + 1 : null, rm, 20 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n         * of the FORMAT object (see BigNumber.config).\r\n         *\r\n         * FORMAT = {\r\n         *      decimalSeparator : '.',\r\n         *      groupSeparator : ',',\r\n         *      groupSize : 3,\r\n         *      secondaryGroupSize : 0,\r\n         *      fractionGroupSeparator : '\\xA0',    // non-breaking space\r\n         *      fractionGroupSize : 0\r\n         * };\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toFormat() decimal places not an integer: {dp}'\r\n         * 'toFormat() decimal places out of range: {dp}'\r\n         * 'toFormat() rounding mode not an integer: {rm}'\r\n         * 'toFormat() rounding mode out of range: {rm}'\r\n         */\r\n        P.toFormat = function ( dp, rm ) {\r\n            var str = format( this, dp != null && isValidInt( dp, 0, MAX, 21 )\r\n              ? ~~dp + this.e + 1 : null, rm, 21 );\r\n\r\n            if ( this.c ) {\r\n                var i,\r\n                    arr = str.split('.'),\r\n                    g1 = +FORMAT.groupSize,\r\n                    g2 = +FORMAT.secondaryGroupSize,\r\n                    groupSeparator = FORMAT.groupSeparator,\r\n                    intPart = arr[0],\r\n                    fractionPart = arr[1],\r\n                    isNeg = this.s < 0,\r\n                    intDigits = isNeg ? intPart.slice(1) : intPart,\r\n                    len = intDigits.length;\r\n\r\n                if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n                if ( g1 > 0 && len > 0 ) {\r\n                    i = len % g1 || g1;\r\n                    intPart = intDigits.substr( 0, i );\r\n\r\n                    for ( ; i < len; i += g1 ) {\r\n                        intPart += groupSeparator + intDigits.substr( i, g1 );\r\n                    }\r\n\r\n                    if ( g2 > 0 ) intPart += groupSeparator + intDigits.slice(i);\r\n                    if (isNeg) intPart = '-' + intPart;\r\n                }\r\n\r\n                str = fractionPart\r\n                  ? intPart + FORMAT.decimalSeparator + ( ( g2 = +FORMAT.fractionGroupSize )\r\n                    ? fractionPart.replace( new RegExp( '\\\\d{' + g2 + '}\\\\B', 'g' ),\r\n                      '$&' + FORMAT.fractionGroupSeparator )\r\n                    : fractionPart )\r\n                  : intPart;\r\n            }\r\n\r\n            return str;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string array representing the value of this BigNumber as a simple fraction with\r\n         * an integer numerator and an integer denominator. The denominator will be a positive\r\n         * non-zero value less than or equal to the specified maximum denominator. If a maximum\r\n         * denominator is not specified, the denominator will be the lowest value necessary to\r\n         * represent the number exactly.\r\n         *\r\n         * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.\r\n         *\r\n         * 'toFraction() max denominator not an integer: {md}'\r\n         * 'toFraction() max denominator out of range: {md}'\r\n         */\r\n        P.toFraction = function (md) {\r\n            var arr, d0, d2, e, exp, n, n0, q, s,\r\n                k = ERRORS,\r\n                x = this,\r\n                xc = x.c,\r\n                d = new BigNumber(ONE),\r\n                n1 = d0 = new BigNumber(ONE),\r\n                d1 = n0 = new BigNumber(ONE);\r\n\r\n            if ( md != null ) {\r\n                ERRORS = false;\r\n                n = new BigNumber(md);\r\n                ERRORS = k;\r\n\r\n                if ( !( k = n.isInt() ) || n.lt(ONE) ) {\r\n\r\n                    if (ERRORS) {\r\n                        raise( 22,\r\n                          'max denominator ' + ( k ? 'out of range' : 'not an integer' ), md );\r\n                    }\r\n\r\n                    // ERRORS is false:\r\n                    // If md is a finite non-integer >= 1, round it to an integer and use it.\r\n                    md = !k && n.c && round( n, n.e + 1, 1 ).gte(ONE) ? n : null;\r\n                }\r\n            }\r\n\r\n            if ( !xc ) return x.toString();\r\n            s = coeffToString(xc);\r\n\r\n            // Determine initial denominator.\r\n            // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n            e = d.e = s.length - x.e - 1;\r\n            d.c[0] = POWS_TEN[ ( exp = e % LOG_BASE ) < 0 ? LOG_BASE + exp : exp ];\r\n            md = !md || n.cmp(d) > 0 ? ( e > 0 ? d : n1 ) : n;\r\n\r\n            exp = MAX_EXP;\r\n            MAX_EXP = 1 / 0;\r\n            n = new BigNumber(s);\r\n\r\n            // n0 = d1 = 0\r\n            n0.c[0] = 0;\r\n\r\n            for ( ; ; )  {\r\n                q = div( n, d, 0, 1 );\r\n                d2 = d0.plus( q.times(d1) );\r\n                if ( d2.cmp(md) == 1 ) break;\r\n                d0 = d1;\r\n                d1 = d2;\r\n                n1 = n0.plus( q.times( d2 = n1 ) );\r\n                n0 = d2;\r\n                d = n.minus( q.times( d2 = d ) );\r\n                n = d2;\r\n            }\r\n\r\n            d2 = div( md.minus(d0), d1, 0, 1 );\r\n            n0 = n0.plus( d2.times(n1) );\r\n            d0 = d0.plus( d2.times(d1) );\r\n            n0.s = n1.s = x.s;\r\n            e *= 2;\r\n\r\n            // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n            arr = div( n1, d1, e, ROUNDING_MODE ).minus(x).abs().cmp(\r\n                  div( n0, d0, e, ROUNDING_MODE ).minus(x).abs() ) < 1\r\n                    ? [ n1.toString(), d1.toString() ]\r\n                    : [ n0.toString(), d0.toString() ];\r\n\r\n            MAX_EXP = exp;\r\n            return arr;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return the value of this BigNumber converted to a number primitive.\r\n         */\r\n        P.toNumber = function () {\r\n            return +this;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a BigNumber whose value is the value of this BigNumber raised to the power n.\r\n         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n         * If POW_PRECISION is not 0, round to POW_PRECISION using ROUNDING_MODE.\r\n         *\r\n         * n {number} Integer, -9007199254740992 to 9007199254740992 inclusive.\r\n         * (Performs 54 loop iterations for n of 9007199254740992.)\r\n         *\r\n         * 'pow() exponent not an integer: {n}'\r\n         * 'pow() exponent out of range: {n}'\r\n         */\r\n        P.toPower = P.pow = function (n) {\r\n            var k, y,\r\n                i = mathfloor( n < 0 ? -n : +n ),\r\n                x = this;\r\n\r\n            // Pass ±Infinity to Math.pow if exponent is out of range.\r\n            if ( !isValidInt( n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent' ) &&\r\n              ( !isFinite(n) || i > MAX_SAFE_INTEGER && ( n /= 0 ) ||\r\n                parseFloat(n) != n && !( n = NaN ) ) ) {\r\n                return new BigNumber( Math.pow( +x, n ) );\r\n            }\r\n\r\n            // Truncating each coefficient array to a length of k after each multiplication equates\r\n            // to truncating significant digits to POW_PRECISION + [28, 41], i.e. there will be a\r\n            // minimum of 28 guard digits retained. (Using + 1.5 would give [9, 21] guard digits.)\r\n            k = POW_PRECISION ? mathceil( POW_PRECISION / LOG_BASE + 2 ) : 0;\r\n            y = new BigNumber(ONE);\r\n\r\n            for ( ; ; ) {\r\n\r\n                if ( i % 2 ) {\r\n                    y = y.times(x);\r\n                    if ( !y.c ) break;\r\n                    if ( k && y.c.length > k ) y.c.length = k;\r\n                }\r\n\r\n                i = mathfloor( i / 2 );\r\n                if ( !i ) break;\r\n\r\n                x = x.times(x);\r\n                if ( k && x.c && x.c.length > k ) x.c.length = k;\r\n            }\r\n\r\n            if ( n < 0 ) y = ONE.div(y);\r\n            return k ? round( y, POW_PRECISION, ROUNDING_MODE ) : y;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n         * necessary to represent the integer part of the value in fixed-point notation, then use\r\n         * exponential notation.\r\n         *\r\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toPrecision() precision not an integer: {sd}'\r\n         * 'toPrecision() precision out of range: {sd}'\r\n         * 'toPrecision() rounding mode not an integer: {rm}'\r\n         * 'toPrecision() rounding mode out of range: {rm}'\r\n         */\r\n        P.toPrecision = function ( sd, rm ) {\r\n            return format( this, sd != null && isValidInt( sd, 1, MAX, 24, 'precision' )\r\n              ? sd | 0 : null, rm, 24 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n         * TO_EXP_NEG, return exponential notation.\r\n         *\r\n         * [b] {number} Integer, 2 to 64 inclusive.\r\n         *\r\n         * 'toString() base not an integer: {b}'\r\n         * 'toString() base out of range: {b}'\r\n         */\r\n        P.toString = function (b) {\r\n            var str,\r\n                n = this,\r\n                s = n.s,\r\n                e = n.e;\r\n\r\n            // Infinity or NaN?\r\n            if ( e === null ) {\r\n\r\n                if (s) {\r\n                    str = 'Infinity';\r\n                    if ( s < 0 ) str = '-' + str;\r\n                } else {\r\n                    str = 'NaN';\r\n                }\r\n            } else {\r\n                str = coeffToString( n.c );\r\n\r\n                if ( b == null || !isValidInt( b, 2, 64, 25, 'base' ) ) {\r\n                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n                      ? toExponential( str, e )\r\n                      : toFixedPoint( str, e );\r\n                } else {\r\n                    str = convertBase( toFixedPoint( str, e ), b | 0, 10, s );\r\n                }\r\n\r\n                if ( s < 0 && n.c[0] ) str = '-' + str;\r\n            }\r\n\r\n            return str;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole\r\n         * number.\r\n         */\r\n        P.truncated = P.trunc = function () {\r\n            return round( new BigNumber(this), this.e + 1, 1 );\r\n        };\r\n\r\n\r\n\r\n        /*\r\n         * Return as toString, but do not accept a base argument, and include the minus sign for\r\n         * negative zero.\r\n         */\r\n        P.valueOf = P.toJSON = function () {\r\n            var str,\r\n                n = this,\r\n                e = n.e;\r\n\r\n            if ( e === null ) return n.toString();\r\n\r\n            str = coeffToString( n.c );\r\n\r\n            str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n                ? toExponential( str, e )\r\n                : toFixedPoint( str, e );\r\n\r\n            return n.s < 0 ? '-' + str : str;\r\n        };\r\n\r\n\r\n        // Aliases for BigDecimal methods.\r\n        //P.add = P.plus;         // P.add included above\r\n        //P.subtract = P.minus;   // P.sub included above\r\n        //P.multiply = P.times;   // P.mul included above\r\n        //P.divide = P.div;\r\n        //P.remainder = P.mod;\r\n        //P.compareTo = P.cmp;\r\n        //P.negate = P.neg;\r\n\r\n\r\n        if ( configObj != null ) BigNumber.config(configObj);\r\n\r\n        return BigNumber;\r\n    }\r\n\r\n\r\n    // PRIVATE HELPER FUNCTIONS\r\n\r\n\r\n    function bitFloor(n) {\r\n        var i = n | 0;\r\n        return n > 0 || n === i ? i : i - 1;\r\n    }\r\n\r\n\r\n    // Return a coefficient array as a string of base 10 digits.\r\n    function coeffToString(a) {\r\n        var s, z,\r\n            i = 1,\r\n            j = a.length,\r\n            r = a[0] + '';\r\n\r\n        for ( ; i < j; ) {\r\n            s = a[i++] + '';\r\n            z = LOG_BASE - s.length;\r\n            for ( ; z--; s = '0' + s );\r\n            r += s;\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for ( j = r.length; r.charCodeAt(--j) === 48; );\r\n        return r.slice( 0, j + 1 || 1 );\r\n    }\r\n\r\n\r\n    // Compare the value of BigNumbers x and y.\r\n    function compare( x, y ) {\r\n        var a, b,\r\n            xc = x.c,\r\n            yc = y.c,\r\n            i = x.s,\r\n            j = y.s,\r\n            k = x.e,\r\n            l = y.e;\r\n\r\n        // Either NaN?\r\n        if ( !i || !j ) return null;\r\n\r\n        a = xc && !xc[0];\r\n        b = yc && !yc[0];\r\n\r\n        // Either zero?\r\n        if ( a || b ) return a ? b ? 0 : -j : i;\r\n\r\n        // Signs differ?\r\n        if ( i != j ) return i;\r\n\r\n        a = i < 0;\r\n        b = k == l;\r\n\r\n        // Either Infinity?\r\n        if ( !xc || !yc ) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n        // Compare exponents.\r\n        if ( !b ) return k > l ^ a ? 1 : -1;\r\n\r\n        j = ( k = xc.length ) < ( l = yc.length ) ? k : l;\r\n\r\n        // Compare digit by digit.\r\n        for ( i = 0; i < j; i++ ) if ( xc[i] != yc[i] ) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n        // Compare lengths.\r\n        return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n    }\r\n\r\n\r\n    /*\r\n     * Return true if n is a valid number in range, otherwise false.\r\n     * Use for argument validation when ERRORS is false.\r\n     * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.\r\n     */\r\n    function intValidatorNoErrors( n, min, max ) {\r\n        return ( n = truncate(n) ) >= min && n <= max;\r\n    }\r\n\r\n\r\n    function isArray(obj) {\r\n        return Object.prototype.toString.call(obj) == '[object Array]';\r\n    }\r\n\r\n\r\n    /*\r\n     * Convert string of baseIn to an array of numbers of baseOut.\r\n     * Eg. convertBase('255', 10, 16) returns [15, 15].\r\n     * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\n     */\r\n    function toBaseOut( str, baseIn, baseOut ) {\r\n        var j,\r\n            arr = [0],\r\n            arrL,\r\n            i = 0,\r\n            len = str.length;\r\n\r\n        for ( ; i < len; ) {\r\n            for ( arrL = arr.length; arrL--; arr[arrL] *= baseIn );\r\n            arr[ j = 0 ] += ALPHABET.indexOf( str.charAt( i++ ) );\r\n\r\n            for ( ; j < arr.length; j++ ) {\r\n\r\n                if ( arr[j] > baseOut - 1 ) {\r\n                    if ( arr[j + 1] == null ) arr[j + 1] = 0;\r\n                    arr[j + 1] += arr[j] / baseOut | 0;\r\n                    arr[j] %= baseOut;\r\n                }\r\n            }\r\n        }\r\n\r\n        return arr.reverse();\r\n    }\r\n\r\n\r\n    function toExponential( str, e ) {\r\n        return ( str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str ) +\r\n          ( e < 0 ? 'e' : 'e+' ) + e;\r\n    }\r\n\r\n\r\n    function toFixedPoint( str, e ) {\r\n        var len, z;\r\n\r\n        // Negative exponent?\r\n        if ( e < 0 ) {\r\n\r\n            // Prepend zeros.\r\n            for ( z = '0.'; ++e; z += '0' );\r\n            str = z + str;\r\n\r\n        // Positive exponent\r\n        } else {\r\n            len = str.length;\r\n\r\n            // Append zeros.\r\n            if ( ++e > len ) {\r\n                for ( z = '0', e -= len; --e; z += '0' );\r\n                str += z;\r\n            } else if ( e < len ) {\r\n                str = str.slice( 0, e ) + '.' + str.slice(e);\r\n            }\r\n        }\r\n\r\n        return str;\r\n    }\r\n\r\n\r\n    function truncate(n) {\r\n        n = parseFloat(n);\r\n        return n < 0 ? mathceil(n) : mathfloor(n);\r\n    }\r\n\r\n\r\n    // EXPORT\r\n\r\n\r\n   // AMD.\r\n    if ( typeof define == 'function' && define.amd ) {\r\n        define( function () { return constructorFactory(); } );\r\n\r\n    // Node.js and other environments that support module.exports.\r\n    } else if ( typeof module != 'undefined' && module.exports ) {\r\n        module.exports = constructorFactory();\r\n\r\n        // Split string stops browserify adding crypto shim.\r\n        if ( !cryptoObj ) try { cryptoObj = require('cry' + 'pto'); } catch (e) {}\r\n\r\n    // Browser.\r\n    } else {\r\n        if ( !globalObj ) globalObj = typeof self != 'undefined' ? self : Function('return this')();\r\n        globalObj.BigNumber = constructorFactory();\r\n    }\r\n})(this);\r\n"]}