{"version":3,"sources":["ConnectionConfig.js"],"names":[],"mappings":"AAAA,IAAI,WAAkB,QAAQ,KAAR,EAAe,KAArC;AACA,IAAI,kBAAkB,QAAQ,6BAAR,CAAtB;AACA,IAAI,WAAkB,QAAQ,+BAAR,CAAtB;AACA,IAAI,cAAkB,IAAtB;;AAEA,OAAO,OAAP,GAAiB,gBAAjB;AACA,SAAS,gBAAT,CAA0B,OAA1B,EAAmC;AACjC,MAAI,OAAO,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,cAAU,iBAAiB,QAAjB,CAA0B,OAA1B,CAAV;AACD;;AAED,OAAK,IAAL,GAA0B,QAAQ,IAAR,IAAgB,WAA1C;AACA,OAAK,IAAL,GAA0B,QAAQ,IAAR,IAAgB,IAA1C;AACA,OAAK,YAAL,GAA0B,QAAQ,YAAlC;AACA,OAAK,UAAL,GAA0B,QAAQ,UAAlC;AACA,OAAK,IAAL,GAA0B,QAAQ,IAAR,IAAgB,SAA1C;AACA,OAAK,QAAL,GAA0B,QAAQ,QAAR,IAAoB,SAA9C;AACA,OAAK,QAAL,GAA0B,QAAQ,QAAlC;AACA,OAAK,cAAL,GAA2B,QAAQ,cAAR,KAA2B,SAA5B,GACrB,KAAK,IADgB,GAEtB,QAAQ,cAFZ;AAGA,OAAK,YAAL,GAA0B,QAAQ,YAAR,IAAwB,KAAlD;AACA,OAAK,iBAAL,GAA0B,QAAQ,iBAAR,IAA6B,KAAvD;AACA,OAAK,gBAAL,GAA0B,QAAQ,gBAAR,IAA4B,KAAtD;AACA,OAAK,WAAL,GAA0B,QAAQ,WAAR,IAAuB,KAAjD;AACA,OAAK,KAAL,GAA0B,QAAQ,KAAlC;AACA,OAAK,KAAL,GAA0B,QAAQ,KAAR,KAAkB,KAA5C;AACA,OAAK,gBAAL,GAA0B,QAAQ,gBAAR,IAA4B,KAAtD;AACA,OAAK,QAAL,GAA0B,QAAQ,QAAR,IAAoB,OAA9C;AACA,OAAK,KAAL,GAA0B,QAAQ,KAAR,IAAiB,EAA3C;AACA,OAAK,WAAL,GAA0B,QAAQ,WAAlC;AACA,OAAK,IAAL,GAA0B,QAAQ,IAAR,IAAgB,SAA1C;AACA,OAAK,GAAL,GAA2B,OAAO,QAAQ,GAAf,KAAuB,QAAxB,GACtB,iBAAiB,aAAjB,CAA+B,QAAQ,GAAvC,CADsB,GAErB,QAAQ,GAAR,IAAe,KAFpB;AAGA,OAAK,kBAAL,GAA0B,QAAQ,kBAAR,IAA8B,KAAxD;AACA,OAAK,QAAL,GAA2B,QAAQ,QAAR,KAAqB,SAAtB,GACtB,IADsB,GAEtB,QAAQ,QAFZ;;AAIA,MAAI,KAAK,QAAL,CAAc,CAAd,KAAoB,GAAxB,EAA6B;;;;AAI3B,SAAK,QAAL,GAAgB,MAAM,KAAK,QAAL,CAAc,MAAd,CAAqB,CAArB,CAAtB;AACD;;AAED,MAAI,KAAK,GAAT,EAAc;;AAEZ,SAAK,GAAL,CAAS,kBAAT,GAA8B,KAAK,GAAL,CAAS,kBAAT,KAAgC,KAA9D;AACD;;AAED,OAAK,aAAL,GAAqB,CAArB;AACA,OAAK,aAAL,GAAsB,QAAQ,OAAT,GACjB,iBAAiB,gBAAjB,CAAkC,QAAQ,OAA1C,CADiB,GAEjB,QAAQ,aAAR,IAAuB,SAAS,eAFpC;;;AAKA,MAAI,eAAe,iBAAiB,eAAjB,CAAiC,OAAjC,CAAnB;AACA,OAAK,WAAL,GAAmB,iBAAiB,UAAjB,CAA4B,YAA5B,EAA0C,QAAQ,KAAlD,CAAnB;AACD;;AAED,iBAAiB,UAAjB,GAA8B,SAAS,UAAT,CAAoB,YAApB,EAAkC,SAAlC,EAA6C;AACzE,MAAI,WAAW,iBAAiB,aAAjB,CAA+B,YAA/B,CAAf;AACA,MAAI,WAAW,iBAAiB,aAAjB,CAA+B,SAA/B,CAAf;;;AAGA,OAAK,IAAI,IAAT,IAAiB,QAAjB,EAA2B;AACzB,QAAI,SAAS,IAAT,MAAmB,KAAvB,EAA8B;AAC5B,eAAS,IAAT,IAAiB,SAAS,IAAT,CAAjB;AACD;AACF;;;AAGD,MAAI,QAAQ,GAAZ;AACA,OAAK,IAAI,IAAT,IAAiB,QAAjB,EAA2B;AACzB,QAAI,SAAS,IAAT,CAAJ,EAAoB;;AAElB,eAAS,gBAAgB,YAAY,IAA5B,KAAqC,GAA9C;AACD;AACF;;AAED,SAAO,KAAP;AACD,CArBD;;AAuBA,iBAAiB,gBAAjB,GAAoC,SAAS,gBAAT,CAA0B,OAA1B,EAAmC;AACrE,MAAI,MAAM,SAAS,QAAQ,WAAR,EAAT,CAAV;;AAEA,MAAI,QAAQ,SAAZ,EAAuB;AACrB,UAAM,IAAI,SAAJ,CAAc,uBAAuB,OAAvB,GAAiC,IAA/C,CAAN;AACD;;AAED,SAAO,GAAP;AACD,CARD;;AAUA,iBAAiB,eAAjB,GAAmC,SAAS,eAAT,CAAyB,OAAzB,EAAkC;AACnE,MAAI,eAAe,CACjB,WADiB,E;AAEjB,kBAFiB,E;AAGjB,oBAHiB,E;AAIjB,eAJiB,E;AAKjB,mBALiB,E;AAMjB,iBANiB,E;AAOjB,gBAPiB,E;AAQjB,cARiB,E;AASjB,kBATiB,E;AAUjB,kBAViB,E;AAWjB,SAXiB,E;AAYjB,gBAZiB,E;AAajB,gBAbiB,E;AAcjB,qBAdiB,E;AAejB,aAfiB,E;AAgBjB,sBAhBiB,E;AAiBjB,iB;AAjBiB,GAAnB;;AAoBA,MAAI,WAAW,QAAQ,kBAAvB,EAA2C;;AAEzC,iBAAa,IAAb,CAAkB,mBAAlB;AACD;;AAED,SAAO,YAAP;AACD,CA3BD;;AA6BA,iBAAiB,aAAjB,GAAiC,SAAS,aAAT,CAAuB,IAAvB,EAA6B;AAC5D,MAAI,CAAC,WAAL,EAAkB;AAChB,kBAAc,QAAQ,mCAAR,CAAd;AACD;;AAED,MAAI,MAAM,YAAY,IAAZ,CAAV;;AAEA,MAAI,QAAQ,SAAZ,EAAuB;AACrB,UAAM,IAAI,SAAJ,CAAc,2BAA2B,IAA3B,GAAkC,IAAhD,CAAN;AACD;;AAED,SAAO,GAAP;AACD,CAZD;;AAcA,iBAAiB,aAAjB,GAAiC,SAAS,aAAT,CAAuB,QAAvB,EAAiC;AAChE,MAAI,WAAW,OAAO,MAAP,CAAc,IAAd,CAAf;;AAEA,MAAI,CAAC,QAAL,EAAe;AACb,WAAO,QAAP;AACD;;AAED,MAAI,QAAQ,CAAC,MAAM,OAAN,CAAc,QAAd,CAAD,GACR,OAAO,YAAY,EAAnB,EAAuB,WAAvB,GAAqC,KAArC,CAA2C,UAA3C,CADQ,GAER,QAFJ;;AAIA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAAM,MAA1B,EAAkC,GAAlC,EAAuC;AACrC,QAAI,OAAS,MAAM,CAAN,CAAb;AACA,QAAI,SAAS,CAAb;AACA,QAAI,QAAS,KAAK,CAAL,CAAb;;AAEA,QAAI,UAAU,SAAd,EAAyB;;AAEvB;AACD;;AAED,QAAI,UAAU,GAAV,IAAiB,UAAU,GAA/B,EAAoC;AAClC,eAAS,CAAT;AACA,cAAS,GAAT;AACD;;AAED,aAAS,KAAK,MAAL,CAAY,MAAZ,CAAT,IAAgC,UAAU,GAA1C;AACD;;AAED,SAAO,QAAP;AACD,CA9BD;;AAgCA,iBAAiB,QAAjB,GAA4B,UAAS,GAAT,EAAc;AACxC,QAAM,SAAS,GAAT,EAAc,IAAd,CAAN;;AAEA,MAAI,UAAU;AACZ,UAAW,IAAI,QADH;AAEZ,UAAW,IAAI,IAFH;AAGZ,cAAW,IAAI,QAAJ,CAAa,MAAb,CAAoB,CAApB;AAHC,GAAd;;AAMA,MAAI,IAAI,IAAR,EAAc;AACZ,QAAI,OAAO,IAAI,IAAJ,CAAS,KAAT,CAAe,GAAf,CAAX;AACA,YAAQ,IAAR,GAAmB,KAAK,KAAL,EAAnB;AACA,YAAQ,QAAR,GAAmB,KAAK,IAAL,CAAU,GAAV,CAAnB;AACD;;AAED,MAAI,IAAI,KAAR,EAAe;AACb,SAAK,IAAI,GAAT,IAAgB,IAAI,KAApB,EAA2B;AACzB,UAAI,QAAQ,IAAI,KAAJ,CAAU,GAAV,CAAZ;;AAEA,UAAI;;AAEF,gBAAQ,GAAR,IAAe,KAAK,KAAL,CAAW,KAAX,CAAf;AACD,OAHD,CAGE,OAAO,GAAP,EAAY;;AAEZ,gBAAQ,GAAR,IAAe,KAAf;AACD;AACF;AACF;;AAED,SAAO,OAAP;AACD,CA9BD","file":"ConnectionConfig-compiled.js","sourcesContent":["var urlParse        = require('url').parse;\nvar ClientConstants = require('./protocol/constants/client');\nvar Charsets        = require('./protocol/constants/charsets');\nvar SSLProfiles     = null;\n\nmodule.exports = ConnectionConfig;\nfunction ConnectionConfig(options) {\n  if (typeof options === 'string') {\n    options = ConnectionConfig.parseUrl(options);\n  }\n\n  this.host               = options.host || 'localhost';\n  this.port               = options.port || 3306;\n  this.localAddress       = options.localAddress;\n  this.socketPath         = options.socketPath;\n  this.user               = options.user || undefined;\n  this.password           = options.password || undefined;\n  this.database           = options.database;\n  this.connectTimeout     = (options.connectTimeout === undefined)\n    ? (10 * 1000)\n    : options.connectTimeout;\n  this.insecureAuth       = options.insecureAuth || false;\n  this.supportBigNumbers  = options.supportBigNumbers || false;\n  this.bigNumberStrings   = options.bigNumberStrings || false;\n  this.dateStrings        = options.dateStrings || false;\n  this.debug              = options.debug;\n  this.trace              = options.trace !== false;\n  this.stringifyObjects   = options.stringifyObjects || false;\n  this.timezone           = options.timezone || 'local';\n  this.flags              = options.flags || '';\n  this.queryFormat        = options.queryFormat;\n  this.pool               = options.pool || undefined;\n  this.ssl                = (typeof options.ssl === 'string')\n    ? ConnectionConfig.getSSLProfile(options.ssl)\n    : (options.ssl || false);\n  this.multipleStatements = options.multipleStatements || false;\n  this.typeCast           = (options.typeCast === undefined)\n    ? true\n    : options.typeCast;\n\n  if (this.timezone[0] == \" \") {\n    // \"+\" is a url encoded char for space so it\n    // gets translated to space when giving a\n    // connection string..\n    this.timezone = \"+\" + this.timezone.substr(1);\n  }\n\n  if (this.ssl) {\n    // Default rejectUnauthorized to true\n    this.ssl.rejectUnauthorized = this.ssl.rejectUnauthorized !== false;\n  }\n\n  this.maxPacketSize = 0;\n  this.charsetNumber = (options.charset)\n    ? ConnectionConfig.getCharsetNumber(options.charset)\n    : options.charsetNumber||Charsets.UTF8_GENERAL_CI;\n\n  // Set the client flags\n  var defaultFlags = ConnectionConfig.getDefaultFlags(options);\n  this.clientFlags = ConnectionConfig.mergeFlags(defaultFlags, options.flags);\n}\n\nConnectionConfig.mergeFlags = function mergeFlags(defaultFlags, userFlags) {\n  var allFlags = ConnectionConfig.parseFlagList(defaultFlags);\n  var newFlags = ConnectionConfig.parseFlagList(userFlags);\n\n  // Merge the new flags\n  for (var flag in newFlags) {\n    if (allFlags[flag] !== false) {\n      allFlags[flag] = newFlags[flag];\n    }\n  }\n\n  // Build flags\n  var flags = 0x0;\n  for (var flag in allFlags) {\n    if (allFlags[flag]) {\n      // TODO: Throw here on some future release\n      flags |= ClientConstants['CLIENT_' + flag] || 0x0;\n    }\n  }\n\n  return flags;\n};\n\nConnectionConfig.getCharsetNumber = function getCharsetNumber(charset) {\n  var num = Charsets[charset.toUpperCase()];\n\n  if (num === undefined) {\n    throw new TypeError('Unknown charset \\'' + charset + '\\'');\n  }\n\n  return num;\n};\n\nConnectionConfig.getDefaultFlags = function getDefaultFlags(options) {\n  var defaultFlags = [\n    '-COMPRESS',          // Compression protocol *NOT* supported\n    '-CONNECT_ATTRS',     // Does *NOT* send connection attributes in Protocol::HandshakeResponse41\n    '+CONNECT_WITH_DB',   // One can specify db on connect in Handshake Response Packet\n    '+FOUND_ROWS',        // Send found rows instead of affected rows\n    '+IGNORE_SIGPIPE',    // Don't issue SIGPIPE if network failures\n    '+IGNORE_SPACE',      // Let the parser ignore spaces before '('\n    '+LOCAL_FILES',       // Can use LOAD DATA LOCAL\n    '+LONG_FLAG',         // Longer flags in Protocol::ColumnDefinition320\n    '+LONG_PASSWORD',     // Use the improved version of Old Password Authentication\n    '+MULTI_RESULTS',     // Can handle multiple resultsets for COM_QUERY\n    '+ODBC',              // Special handling of ODBC behaviour\n    '-PLUGIN_AUTH',       // Does *NOT* support auth plugins\n    '+PROTOCOL_41',       // Uses the 4.1 protocol\n    '+PS_MULTI_RESULTS',  // Can handle multiple resultsets for COM_STMT_EXECUTE\n    '+RESERVED',          // Unused\n    '+SECURE_CONNECTION', // Supports Authentication::Native41\n    '+TRANSACTIONS'       // Expects status flags\n  ];\n\n  if (options && options.multipleStatements) {\n    // May send multiple statements per COM_QUERY and COM_STMT_PREPARE\n    defaultFlags.push('+MULTI_STATEMENTS');\n  }\n\n  return defaultFlags;\n};\n\nConnectionConfig.getSSLProfile = function getSSLProfile(name) {\n  if (!SSLProfiles) {\n    SSLProfiles = require('./protocol/constants/ssl_profiles');\n  }\n\n  var ssl = SSLProfiles[name];\n\n  if (ssl === undefined) {\n    throw new TypeError('Unknown SSL profile \\'' + name + '\\'');\n  }\n\n  return ssl;\n};\n\nConnectionConfig.parseFlagList = function parseFlagList(flagList) {\n  var allFlags = Object.create(null);\n\n  if (!flagList) {\n    return allFlags;\n  }\n\n  var flags = !Array.isArray(flagList)\n    ? String(flagList || '').toUpperCase().split(/\\s*,+\\s*/)\n    : flagList;\n\n  for (var i = 0; i < flags.length; i++) {\n    var flag   = flags[i];\n    var offset = 1;\n    var state  = flag[0];\n\n    if (state === undefined) {\n      // TODO: throw here on some future release\n      continue;\n    }\n\n    if (state !== '-' && state !== '+') {\n      offset = 0;\n      state  = '+';\n    }\n\n    allFlags[flag.substr(offset)] = state === '+';\n  }\n\n  return allFlags;\n};\n\nConnectionConfig.parseUrl = function(url) {\n  url = urlParse(url, true);\n\n  var options = {\n    host     : url.hostname,\n    port     : url.port,\n    database : url.pathname.substr(1)\n  };\n\n  if (url.auth) {\n    var auth = url.auth.split(':');\n    options.user     = auth.shift();\n    options.password = auth.join(':');\n  }\n\n  if (url.query) {\n    for (var key in url.query) {\n      var value = url.query[key];\n\n      try {\n        // Try to parse this as a JSON expression first\n        options[key] = JSON.parse(value);\n      } catch (err) {\n        // Otherwise assume it is a plain string\n        options[key] = value;\n      }\n    }\n  }\n\n  return options;\n};\n"]}