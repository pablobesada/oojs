{"version":3,"sources":["PoolCluster.js"],"names":[],"mappings":"AAAA,IAAI,OAAgB,QAAQ,QAAR,CAApB;AACA,IAAI,aAAgB,QAAQ,cAAR,CAApB;AACA,IAAI,gBAAgB,QAAQ,iBAAR,CAApB;AACA,IAAI,eAAgB,QAAQ,gBAAR,CAApB;AACA,IAAI,OAAgB,QAAQ,MAAR,CAApB;AACA,IAAI,eAAgB,QAAQ,QAAR,EAAkB,YAAtC;;AAEA,OAAO,OAAP,GAAiB,WAAjB;;;;;AAKA,SAAS,WAAT,CAAqB,MAArB,EAA6B;AAC3B,eAAa,IAAb,CAAkB,IAAlB;;AAEA,WAAS,UAAU,EAAnB;AACA,OAAK,SAAL,GAAiB,OAAO,OAAO,QAAd,KAA2B,WAA3B,GAAyC,IAAzC,GAAgD,OAAO,QAAxE;AACA,OAAK,gBAAL,GAAwB,OAAO,eAAP,IAA0B,IAAlD;AACA,OAAK,qBAAL,GAA6B,OAAO,oBAAP,IAA+B,CAA5D;AACA,OAAK,mBAAL,GAA2B,OAAO,kBAAP,IAA6B,CAAxD;;AAEA,OAAK,OAAL,GAAe,KAAf;AACA,OAAK,WAAL,GAAmB,OAAO,MAAP,CAAc,IAAd,CAAnB;AACA,OAAK,OAAL,GAAe,CAAf;AACA,OAAK,WAAL,GAAmB,OAAO,MAAP,CAAc,IAAd,CAAnB;AACA,OAAK,MAAL,GAAc,OAAO,MAAP,CAAc,IAAd,CAAd;AACD;;AAED,KAAK,QAAL,CAAc,WAAd,EAA2B,YAA3B;;AAEA,YAAY,SAAZ,CAAsB,GAAtB,GAA4B,SAAS,GAAT,CAAa,EAAb,EAAiB,MAAjB,EAAyB;AACnD,MAAI,KAAK,OAAT,EAAkB;AAChB,UAAM,IAAI,KAAJ,CAAU,wBAAV,CAAN;AACD;;AAED,MAAI,SAAS,OAAO,EAAP,KAAc,QAAd,GACT,cAAe,EAAE,KAAK,OADb,GAET,OAAO,EAAP,CAFJ;;AAIA,MAAI,KAAK,MAAL,CAAY,MAAZ,MAAwB,SAA5B,EAAuC;AACrC,UAAM,IAAI,KAAJ,CAAU,cAAc,MAAd,GAAuB,sCAAjC,CAAN;AACD;;AAED,MAAI,aAAa,OAAO,EAAP,KAAc,QAAd,GACb,IAAI,UAAJ,CAAe,MAAf,CADa,GAEb,IAAI,UAAJ,CAAe,EAAf,CAFJ;;AAIA,OAAK,MAAL,CAAY,MAAZ,IAAsB;AACpB,QAAgB,MADI;AAEpB,gBAAgB,CAFI;AAGpB,UAAgB,IAAI,IAAJ,CAAS,EAAC,QAAQ,UAAT,EAAT,CAHI;AAIpB,mBAAgB;AAJI,GAAtB;;AAOA,OAAK,gBAAL;AACD,CAzBD;;AA2BA,YAAY,SAAZ,CAAsB,GAAtB,GAA4B,SAAS,GAAT,CAAa,QAAb,EAAuB;AACjD,MAAI,KAAK,aAAa,SAAb,GACL,QADK,GAEL,GAFJ;;AAIA,MAAI,OAAO,EAAP,KAAc,UAAlB,EAA8B;AAC5B,UAAM,UAAU,sCAAV,CAAN;AACD;;AAED,MAAI,KAAK,OAAT,EAAkB;AAChB,WAAO,QAAQ,QAAR,CAAiB,EAAjB,CAAP;AACD;;AAED,OAAK,OAAL,GAAe,IAAf;;AAEA,MAAI,aAAe,KAAnB;AACA,MAAI,UAAe,OAAO,IAAP,CAAY,KAAK,MAAjB,CAAnB;AACA,MAAI,eAAe,QAAQ,MAA3B;;AAEA,WAAS,KAAT,CAAe,GAAf,EAAoB;AAClB,QAAI,UAAJ,EAAgB;AACd;AACD;;AAED,QAAI,OAAO,EAAE,YAAF,KAAmB,CAA9B,EAAiC;AAC/B,mBAAa,IAAb;AACA,aAAO,GAAG,GAAH,CAAP;AACD;AACF;;AAED,MAAI,iBAAiB,CAArB,EAAwB;AACtB,WAAO,QAAQ,QAAR,CAAiB,EAAjB,CAAP;AACD;;AAED,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,QAAQ,MAA5B,EAAoC,GAApC,EAAyC;AACvC,QAAI,SAAS,QAAQ,CAAR,CAAb;AACA,QAAI,OAAO,KAAK,MAAL,CAAY,MAAZ,CAAX;;AAEA,SAAK,IAAL,CAAU,GAAV,CAAc,KAAd;AACD;AACF,CAxCD;;AA0CA,YAAY,SAAZ,CAAsB,EAAtB,GAA2B,UAAS,OAAT,EAAkB,QAAlB,EAA4B;AACrD,YAAU,WAAW,GAArB;;AAEA,aAAW,YAAY,KAAK,gBAA5B;AACA,aAAW,SAAS,WAAT,EAAX;AACA,MAAI,OAAO,aAAa,QAAb,CAAP,KAAkC,WAAtC,EAAmD;AACjD,eAAW,KAAK,gBAAhB;AACD;;AAED,MAAI,MAAM,UAAU,QAApB;;AAEA,MAAI,OAAO,KAAK,WAAL,CAAiB,GAAjB,CAAP,KAAiC,WAArC,EAAkD;AAChD,SAAK,WAAL,CAAiB,GAAjB,IAAwB,IAAI,aAAJ,CAAkB,IAAlB,EAAwB,OAAxB,EAAiC,QAAjC,CAAxB;AACD;;AAED,SAAO,KAAK,WAAL,CAAiB,GAAjB,CAAP;AACD,CAhBD;;AAkBA,YAAY,SAAZ,CAAsB,MAAtB,GAA+B,SAAS,MAAT,CAAgB,OAAhB,EAAyB;AACtD,MAAI,eAAe,KAAK,YAAL,CAAkB,OAAlB,EAA2B,IAA3B,CAAnB;;AAEA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,aAAa,MAAjC,EAAyC,GAAzC,EAA8C;AAC5C,QAAI,OAAO,KAAK,QAAL,CAAc,aAAa,CAAb,CAAd,CAAX;;AAEA,QAAI,IAAJ,EAAU;AACR,WAAK,WAAL,CAAiB,IAAjB;AACD;AACF;AACF,CAVD;;AAYA,YAAY,SAAZ,CAAsB,aAAtB,GAAsC,UAAS,OAAT,EAAkB,QAAlB,EAA4B,EAA5B,EAAgC;AACpE,MAAI,SAAJ;AACA,MAAI,OAAO,OAAP,KAAmB,UAAvB,EAAmC;AACjC,SAAK,OAAL;AACA,gBAAY,KAAK,EAAL,EAAZ;AACD,GAHD,MAGO;AACL,QAAI,OAAO,QAAP,KAAoB,UAAxB,EAAoC;AAClC,WAAK,QAAL;AACA,iBAAW,KAAK,gBAAhB;AACD;;AAED,gBAAY,KAAK,EAAL,CAAQ,OAAR,EAAiB,QAAjB,CAAZ;AACD;;AAED,YAAU,aAAV,CAAwB,EAAxB;AACD,CAfD;;AAiBA,YAAY,SAAZ,CAAsB,gBAAtB,GAAyC,SAAS,gBAAT,GAA4B;AACnE,OAAK,WAAL,GAAmB,OAAO,MAAP,CAAc,IAAd,CAAnB;AACD,CAFD;;AAIA,YAAY,SAAZ,CAAsB,mBAAtB,GAA4C,SAAS,mBAAT,CAA6B,IAA7B,EAAmC;AAC7E,MAAI,aAAa,KAAK,UAAtB;;AAEA,MAAI,aAAa,KAAK,qBAAtB,EAA6C;AAC3C,iBAAa,KAAK,qBAAlB;AACD;;AAED,MAAI,aAAa,CAAjB,EAAoB;AAClB,iBAAa,CAAb;AACD;;AAED,OAAK,UAAL,GAAkB,aAAa,CAA/B;;AAEA,MAAI,KAAK,aAAT,EAAwB;AACtB,SAAK,aAAL,GAAqB,CAArB;AACA,SAAK,IAAL,CAAU,QAAV,EAAoB,KAAK,EAAzB;AACD;AACF,CAjBD;;AAmBA,YAAY,SAAZ,CAAsB,YAAtB,GAAqC,SAAS,YAAT,CAAsB,OAAtB,EAA+B,cAA/B,EAA+C;AAClF,MAAI,cAAe,CAAnB;AACA,MAAI,eAAe,KAAK,WAAL,CAAiB,OAAjB,CAAnB;;AAEA,MAAI,iBAAiB,SAArB,EAAgC;AAC9B,QAAI,UAAW,OAAO,IAAP,CAAY,KAAK,MAAjB,CAAf;AACA,QAAI,WAAW,QAAQ,MAAR,CAAe,CAAC,CAAhB,MAAuB,GAAtC;AACA,QAAI,UAAW,WACX,QAAQ,MAAR,CAAe,CAAf,EAAkB,QAAQ,MAAR,GAAiB,CAAnC,CADW,GAEX,OAFJ;;AAIA,QAAI,QAAJ,EAAc;AACZ,qBAAe,QAAQ,MAAR,KAAmB,CAAnB,GACX,QAAQ,MAAR,CAAe,UAAU,EAAV,EAAc;AAAE,eAAO,GAAG,MAAH,CAAU,CAAV,EAAa,QAAQ,MAArB,MAAiC,OAAxC;AAAkD,OAAjF,CADW,GAEX,OAFJ;AAGD,KAJD,MAIO;AACL,UAAI,QAAQ,QAAQ,OAAR,CAAgB,OAAhB,CAAZ;AACA,qBAAe,QAAQ,KAAR,CAAc,KAAd,EAAqB,QAAQ,CAA7B,CAAf;AACD;;AAED,SAAK,WAAL,CAAiB,OAAjB,IAA4B,YAA5B;AACD;;AAED,MAAI,cAAJ,EAAoB;AAClB,WAAO,YAAP;AACD;;AAED,SAAO,aAAa,MAAb,CAAoB,UAAU,MAAV,EAAkB;AAC3C,QAAI,OAAO,KAAK,QAAL,CAAc,MAAd,CAAX;;AAEA,QAAI,CAAC,KAAK,aAAV,EAAyB;AACvB,aAAO,IAAP;AACD;;AAED,QAAI,CAAC,WAAL,EAAkB;AAChB,oBAAc,0BAAd;AACD;;AAED,WAAO,KAAK,aAAL,IAAsB,WAA7B;AACD,GAZM,EAYJ,IAZI,CAAP;AAaD,CAxCD;;AA0CA,YAAY,SAAZ,CAAsB,QAAtB,GAAiC,SAAS,QAAT,CAAkB,EAAlB,EAAsB;AACrD,SAAO,KAAK,MAAL,CAAY,EAAZ,KAAmB,IAA1B;AACD,CAFD;;AAIA,YAAY,SAAZ,CAAsB,mBAAtB,GAA4C,SAAS,mBAAT,CAA6B,IAA7B,EAAmC;AAC7E,MAAI,aAAa,EAAE,KAAK,UAAxB;;AAEA,MAAI,KAAK,qBAAL,GAA6B,UAAjC,EAA6C;AAC3C;AACD;;AAED,MAAI,KAAK,mBAAL,GAA2B,CAA/B,EAAkC;AAChC,SAAK,aAAL,GAAqB,6BAA6B,KAAK,mBAAvD;AACA,SAAK,IAAL,CAAU,SAAV,EAAqB,KAAK,EAA1B;AACA;AACD;;AAED,OAAK,WAAL,CAAiB,IAAjB;AACA,OAAK,IAAL,CAAU,QAAV,EAAoB,KAAK,EAAzB;AACD,CAfD;;AAiBA,YAAY,SAAZ,CAAsB,cAAtB,GAAuC,UAAS,IAAT,EAAe,EAAf,EAAmB;AACxD,MAAI,OAAO,IAAX;;AAEA,OAAK,IAAL,CAAU,aAAV,CAAwB,UAAU,GAAV,EAAe,UAAf,EAA2B;AACjD,QAAI,GAAJ,EAAS;AACP,WAAK,mBAAL,CAAyB,IAAzB;AACA,SAAG,GAAH;AACA;AACD,KAJD,MAIO;AACL,WAAK,mBAAL,CAAyB,IAAzB;AACD;;AAED,eAAW,UAAX,GAAwB,KAAK,EAA7B;;AAEA,OAAG,IAAH,EAAS,UAAT;AACD,GAZD;AAaD,CAhBD;;AAkBA,YAAY,SAAZ,CAAsB,WAAtB,GAAoC,SAAS,WAAT,CAAqB,IAArB,EAA2B;AAC7D,SAAO,KAAK,MAAL,CAAY,KAAK,EAAjB,CAAP;;AAEA,OAAK,gBAAL;;AAEA,OAAK,IAAL,CAAU,GAAV,CAAc,KAAd;AACD,CAND;;AAQA,SAAS,wBAAT,GAAoC;AAClC,MAAI,EAAJ;;AAEA,MAAI,OAAO,QAAQ,MAAf,KAA0B,UAA9B,EAA0C;AACxC,SAAK,QAAQ,MAAR,EAAL;AACA,SAAK,GAAG,CAAH,IAAQ,GAAR,GAAc,GAAG,CAAH,IAAQ,IAA3B;AACD,GAHD,MAGO;AACL,SAAK,QAAQ,MAAR,KAAmB,IAAxB;AACD;;AAED,SAAO,KAAK,KAAL,CAAW,EAAX,CAAP;AACD;;AAED,SAAS,GAAT,CAAa,GAAb,EAAkB;AAChB,MAAI,GAAJ,EAAS;AACP,UAAM,GAAN;AACD;AACF;;AAED,SAAS,KAAT,GAAiB,CAAE","file":"PoolCluster-compiled.js","sourcesContent":["var Pool          = require('./Pool');\nvar PoolConfig    = require('./PoolConfig');\nvar PoolNamespace = require('./PoolNamespace');\nvar PoolSelector  = require('./PoolSelector');\nvar Util          = require('util');\nvar EventEmitter  = require('events').EventEmitter;\n\nmodule.exports = PoolCluster;\n\n/**\n * PoolCluster\n */\nfunction PoolCluster(config) {\n  EventEmitter.call(this);\n\n  config = config || {};\n  this._canRetry = typeof config.canRetry === 'undefined' ? true : config.canRetry;\n  this._defaultSelector = config.defaultSelector || 'RR';\n  this._removeNodeErrorCount = config.removeNodeErrorCount || 5;\n  this._restoreNodeTimeout = config.restoreNodeTimeout || 0;\n\n  this._closed = false;\n  this._findCaches = Object.create(null);\n  this._lastId = 0;\n  this._namespaces = Object.create(null);\n  this._nodes = Object.create(null);\n}\n\nUtil.inherits(PoolCluster, EventEmitter);\n\nPoolCluster.prototype.add = function add(id, config) {\n  if (this._closed) {\n    throw new Error('PoolCluster is closed.');\n  }\n\n  var nodeId = typeof id === 'object'\n    ? 'CLUSTER::' + (++this._lastId)\n    : String(id);\n\n  if (this._nodes[nodeId] !== undefined) {\n    throw new Error('Node ID \"' + nodeId + '\" is already defined in PoolCluster.');\n  }\n\n  var poolConfig = typeof id !== 'object'\n    ? new PoolConfig(config)\n    : new PoolConfig(id);\n\n  this._nodes[nodeId] = {\n    id            : nodeId,\n    errorCount    : 0,\n    pool          : new Pool({config: poolConfig}),\n    _offlineUntil : 0\n  };\n\n  this._clearFindCaches();\n};\n\nPoolCluster.prototype.end = function end(callback) {\n  var cb = callback !== undefined\n    ? callback\n    : _cb;\n\n  if (typeof cb !== 'function') {\n    throw TypeError('callback argument must be a function');\n  }\n\n  if (this._closed) {\n    return process.nextTick(cb);\n  }\n\n  this._closed = true;\n\n  var calledBack   = false;\n  var nodeIds      = Object.keys(this._nodes);\n  var waitingClose = nodeIds.length;\n\n  function onEnd(err) {\n    if (calledBack) {\n      return;\n    }\n\n    if (err || --waitingClose === 0) {\n      calledBack = true;\n      return cb(err);\n    }\n  }\n\n  if (waitingClose === 0) {\n    return process.nextTick(cb);\n  }\n\n  for (var i = 0; i < nodeIds.length; i++) {\n    var nodeId = nodeIds[i];\n    var node = this._nodes[nodeId];\n\n    node.pool.end(onEnd);\n  }\n};\n\nPoolCluster.prototype.of = function(pattern, selector) {\n  pattern = pattern || '*';\n\n  selector = selector || this._defaultSelector;\n  selector = selector.toUpperCase();\n  if (typeof PoolSelector[selector] === 'undefined') {\n    selector = this._defaultSelector;\n  }\n\n  var key = pattern + selector;\n\n  if (typeof this._namespaces[key] === 'undefined') {\n    this._namespaces[key] = new PoolNamespace(this, pattern, selector);\n  }\n\n  return this._namespaces[key];\n};\n\nPoolCluster.prototype.remove = function remove(pattern) {\n  var foundNodeIds = this._findNodeIds(pattern, true);\n\n  for (var i = 0; i < foundNodeIds.length; i++) {\n    var node = this._getNode(foundNodeIds[i]);\n\n    if (node) {\n      this._removeNode(node);\n    }\n  }\n};\n\nPoolCluster.prototype.getConnection = function(pattern, selector, cb) {\n  var namespace;\n  if (typeof pattern === 'function') {\n    cb = pattern;\n    namespace = this.of();\n  } else {\n    if (typeof selector === 'function') {\n      cb = selector;\n      selector = this._defaultSelector;\n    }\n\n    namespace = this.of(pattern, selector);\n  }\n\n  namespace.getConnection(cb);\n};\n\nPoolCluster.prototype._clearFindCaches = function _clearFindCaches() {\n  this._findCaches = Object.create(null);\n};\n\nPoolCluster.prototype._decreaseErrorCount = function _decreaseErrorCount(node) {\n  var errorCount = node.errorCount;\n\n  if (errorCount > this._removeNodeErrorCount) {\n    errorCount = this._removeNodeErrorCount;\n  }\n\n  if (errorCount < 1) {\n    errorCount = 1;\n  }\n\n  node.errorCount = errorCount - 1;\n\n  if (node._offlineUntil) {\n    node._offlineUntil = 0;\n    this.emit('online', node.id);\n  }\n};\n\nPoolCluster.prototype._findNodeIds = function _findNodeIds(pattern, includeOffline) {\n  var currentTime  = 0;\n  var foundNodeIds = this._findCaches[pattern];\n\n  if (foundNodeIds === undefined) {\n    var nodeIds  = Object.keys(this._nodes);\n    var wildcard = pattern.substr(-1) === '*';\n    var keyword  = wildcard\n      ? pattern.substr(0, pattern.length - 1)\n      : pattern;\n\n    if (wildcard) {\n      foundNodeIds = keyword.length !== 0\n        ? nodeIds.filter(function (id) { return id.substr(0, keyword.length) === keyword; })\n        : nodeIds;\n    } else {\n      var index = nodeIds.indexOf(keyword);\n      foundNodeIds = nodeIds.slice(index, index + 1);\n    }\n\n    this._findCaches[pattern] = foundNodeIds;\n  }\n\n  if (includeOffline) {\n    return foundNodeIds;\n  }\n\n  return foundNodeIds.filter(function (nodeId) {\n    var node = this._getNode(nodeId);\n\n    if (!node._offlineUntil) {\n      return true;\n    }\n\n    if (!currentTime) {\n      currentTime = getMonotonicMilliseconds();\n    }\n\n    return node._offlineUntil <= currentTime;\n  }, this);\n};\n\nPoolCluster.prototype._getNode = function _getNode(id) {\n  return this._nodes[id] || null;\n};\n\nPoolCluster.prototype._increaseErrorCount = function _increaseErrorCount(node) {\n  var errorCount = ++node.errorCount;\n\n  if (this._removeNodeErrorCount > errorCount) {\n    return;\n  }\n\n  if (this._restoreNodeTimeout > 0) {\n    node._offlineUntil = getMonotonicMilliseconds() + this._restoreNodeTimeout;\n    this.emit('offline', node.id);\n    return;\n  }\n\n  this._removeNode(node);\n  this.emit('remove', node.id);\n};\n\nPoolCluster.prototype._getConnection = function(node, cb) {\n  var self = this;\n\n  node.pool.getConnection(function (err, connection) {\n    if (err) {\n      self._increaseErrorCount(node);\n      cb(err);\n      return;\n    } else {\n      self._decreaseErrorCount(node);\n    }\n\n    connection._clusterId = node.id;\n\n    cb(null, connection);\n  });\n};\n\nPoolCluster.prototype._removeNode = function _removeNode(node) {\n  delete this._nodes[node.id];\n\n  this._clearFindCaches();\n\n  node.pool.end(_noop);\n};\n\nfunction getMonotonicMilliseconds() {\n  var ms;\n\n  if (typeof process.hrtime === 'function') {\n    ms = process.hrtime();\n    ms = ms[0] * 1e3 + ms[1] * 1e-6;\n  } else {\n    ms = process.uptime() * 1000;\n  }\n\n  return Math.floor(ms);\n}\n\nfunction _cb(err) {\n  if (err) {\n    throw err;\n  }\n}\n\nfunction _noop() {}\n"]}