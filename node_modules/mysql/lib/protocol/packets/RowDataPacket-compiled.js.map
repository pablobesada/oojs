{"version":3,"sources":["RowDataPacket.js"],"names":[],"mappings":"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","file":"RowDataPacket-compiled.js","sourcesContent":["var Types                        = require('../constants/types');\nvar Charsets                     = require('../constants/charsets');\nvar Field                        = require('./Field');\nvar IEEE_754_BINARY_64_PRECISION = Math.pow(2, 53);\n\nmodule.exports = RowDataPacket;\nfunction RowDataPacket() {\n}\n\nObject.defineProperty(RowDataPacket.prototype, 'parse', {\n  configurable: true,\n  enumerable: false,\n  value: parse\n});\n\nObject.defineProperty(RowDataPacket.prototype, '_typeCast', {\n  configurable: true,\n  enumerable: false,\n  value: typeCast\n});\n\nfunction parse(parser, fieldPackets, typeCast, nestTables, connection) {\n  var self = this;\n  var next = function () {\n    return self._typeCast(fieldPacket, parser, connection.config.timezone, connection.config.supportBigNumbers, connection.config.bigNumberStrings, connection.config.dateStrings);\n  };\n\n  for (var i = 0; i < fieldPackets.length; i++) {\n    var fieldPacket = fieldPackets[i];\n    var value;\n\n    if (typeof typeCast == \"function\") {\n      value = typeCast.apply(connection, [ new Field({ packet: fieldPacket, parser: parser }), next ]);\n    } else {\n      value = (typeCast)\n        ? this._typeCast(fieldPacket, parser, connection.config.timezone, connection.config.supportBigNumbers, connection.config.bigNumberStrings, connection.config.dateStrings)\n        : ( (fieldPacket.charsetNr === Charsets.BINARY)\n          ? parser.parseLengthCodedBuffer()\n          : parser.parseLengthCodedString() );\n    }\n\n    if (typeof nestTables == \"string\" && nestTables.length) {\n      this[fieldPacket.table + nestTables + fieldPacket.name] = value;\n    } else if (nestTables) {\n      this[fieldPacket.table] = this[fieldPacket.table] || {};\n      this[fieldPacket.table][fieldPacket.name] = value;\n    } else {\n      this[fieldPacket.name] = value;\n    }\n  }\n}\n\nfunction typeCast(field, parser, timeZone, supportBigNumbers, bigNumberStrings, dateStrings) {\n  var numberString;\n\n  switch (field.type) {\n    case Types.TIMESTAMP:\n    case Types.TIMESTAMP2:\n    case Types.DATE:\n    case Types.DATETIME:\n    case Types.DATETIME2:\n    case Types.NEWDATE:\n      var dateString = parser.parseLengthCodedString();\n      if (dateStrings) {\n          return dateString;\n      }\n      var dt;\n\n      if (dateString === null) {\n        return null;\n      }\n\n      var originalString = dateString;\n      if (field.type === Types.DATE) {\n        dateString += ' 00:00:00';\n      }\n\n      if (timeZone !== 'local') {\n        dateString += ' ' + timeZone;\n      }\n\n      dt = new Date(dateString);\n      if (isNaN(dt.getTime())) {\n        return originalString;\n      }\n\n      return dt;\n    case Types.TINY:\n    case Types.SHORT:\n    case Types.LONG:\n    case Types.INT24:\n    case Types.YEAR:\n    case Types.FLOAT:\n    case Types.DOUBLE:\n      numberString = parser.parseLengthCodedString();\n      return (numberString === null || (field.zeroFill && numberString[0] == \"0\"))\n        ? numberString : Number(numberString);\n    case Types.NEWDECIMAL:\n    case Types.LONGLONG:\n      numberString = parser.parseLengthCodedString();\n      return (numberString === null || (field.zeroFill && numberString[0] == \"0\"))\n        ? numberString\n        : ((supportBigNumbers && (bigNumberStrings || (Number(numberString) > IEEE_754_BINARY_64_PRECISION)))\n          ? numberString\n          : Number(numberString));\n    case Types.BIT:\n      return parser.parseLengthCodedBuffer();\n    case Types.STRING:\n    case Types.VAR_STRING:\n    case Types.TINY_BLOB:\n    case Types.MEDIUM_BLOB:\n    case Types.LONG_BLOB:\n    case Types.BLOB:\n      return (field.charsetNr === Charsets.BINARY)\n        ? parser.parseLengthCodedBuffer()\n        : parser.parseLengthCodedString();\n    case Types.GEOMETRY:\n      return parser.parseGeometryValue();\n    default:\n      return parser.parseLengthCodedString();\n  }\n}\n"]}