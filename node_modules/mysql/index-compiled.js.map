{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["var Classes = Object.create(null);\n\n/**\n * Create a new Connection instance.\n * @param {object} config\n * @public\n */\nexports.createConnection = function createConnection(config) {\n  var Connection       = loadClass('Connection');\n  var ConnectionConfig = loadClass('ConnectionConfig');\n\n  return new Connection({config: new ConnectionConfig(config)});\n};\n\n/**\n * Create a new Pool instance.\n * @param {object} config\n * @public\n */\nexports.createPool = function createPool(config) {\n  var Pool       = loadClass('Pool');\n  var PoolConfig = loadClass('PoolConfig');\n\n  return new Pool({config: new PoolConfig(config)});\n};\n\n/**\n * Create a new PoolCluster instance.\n * @param {object} config\n * @public\n */\nexports.createPoolCluster = function createPoolCluster(config) {\n  var PoolCluster = loadClass('PoolCluster');\n\n  return new PoolCluster(config);\n};\n\n/**\n * Create a new Query instance.\n * @public\n */\nexports.createQuery = function createQuery(sql, values, callback) {\n  var Connection = loadClass('Connection');\n\n  return Connection.createQuery(sql, values, callback);\n};\n\n/**\n * Escape a value for SQL.\n * @param {*} value\n * @param {boolean} [stringifyObjects=false]\n * @param {string} [timeZone=local]\n * @public\n */\nexports.escape = function escape(value, stringifyObjects, timeZone) {\n  var SqlString = loadClass('SqlString');\n\n  return SqlString.escape(value, stringifyObjects, timeZone);\n};\n\n/**\n * Escape an identifier for SQL.\n * @param {*} value\n * @param {boolean} [forbidQualified]\n * @public\n */\nexports.escapeId = function escapeId(value, forbidQualified) {\n  var SqlString = loadClass('SqlString');\n\n  return SqlString.escapeId(value, forbidQualified);\n};\n\n/**\n * Format SQL and replacement values into a SQL string.\n * @param {string} sql\n * @param {array} [values]\n * @param {boolean} [stringifyObjects=false]\n * @param {string} [timeZone=local]\n * @public\n */\nexports.format = function format(sql, values, stringifyObjects, timeZone) {\n  var SqlString = loadClass('SqlString');\n\n  return SqlString.format(sql, values, stringifyObjects, timeZone);\n};\n\n/**\n * The type constants.\n * @public\n */\nObject.defineProperty(exports, 'Types', {\n  get: loadClass.bind(null, 'Types')\n});\n\n/**\n * Load the given class.\n * @private\n */\nfunction loadClass(className) {\n  var Class = Classes[className];\n\n  if (Class !== undefined) {\n    return Class;\n  }\n\n  // This uses a switch for static require analysis\n  switch (className) {\n    case 'Connection':\n      Class = require('./lib/Connection');\n      break;\n    case 'ConnectionConfig':\n      Class = require('./lib/ConnectionConfig');\n      break;\n    case 'Pool':\n      Class = require('./lib/Pool');\n      break;\n    case 'PoolCluster':\n      Class = require('./lib/PoolCluster');\n      break;\n    case 'PoolConfig':\n      Class = require('./lib/PoolConfig');\n      break;\n    case 'SqlString':\n      Class = require('./lib/protocol/SqlString');\n      break;\n    case 'Types':\n      Class = require('./lib/protocol/constants/types');\n      break;\n    default:\n      throw new Error('Cannot find class \\'' + className + '\\'');\n  }\n\n  // Store to prevent invoking require()\n  Classes[className] = Class;\n\n  return Class;\n}\n"]}